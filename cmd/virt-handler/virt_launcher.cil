; This is the custom SELinux policy for virt-launcher. This file is hopefully temporary.
; Applications running in regular container usually have container_t as an SELinux type.
; However, some applications running in virt-launcher (namely libvirtd) need more permissions.
(block virt_launcher
    ;
    ; In the virt_launcher block, everything we define will be prefixed with "virt_launcher."
    ; Therefore, every mention of "process" really means "virt_launcher.process".
    ;
    ; virt_launcher.process is defined as a run-able domain type
    (type process)
    (roletype system_r process)
    (typeattributeset domain (process))
    ;
    ; Giving virt_launcher.process the same attributes as container_t
    (typeattributeset container_domain (process))
    (typeattributeset container_net_domain (process))
    (typeattributeset svirt_sandbox_domain (process))
    (typeattributeset sandbox_net_domain (process))
    ; This one is particularly important, without it the type would not be mcs-constrained.
    ; MCS is leveraged by container_t and others, like us, to prevent cross-pod communication.
    (typeattributeset mcs_constrained_type (process))
    ;
    ;
    ; Adding the permissions missing from container_t to be able to run programs like libvirtd
    ; The list of "allow" rules should be as short and as documented as possible
    ;
    ;
    ; Allowing virt-launcher to read files under /proc
    ; This is needed by libvirt/qemu to read at least /proc/cpuinfo and /proc/uptime
    ; The permission below already exists on container_t, but not on its parent attribute container_domain
    ; This is therefore not blocking the switch to container_t
    (allow process proc_type (file (open read)))
    ;
    ; Allowing libvirtd to relay network-related debug messages
    ; libvirtd seems to run fine without it.
    ; There is already a dontaudit covering it, removing the permission would not trigger AVCs.
    ; However, without this permission, there would be a lot of warnings poluting the logs.
    ; The permission below already exists on container_t, but not on its parent attribute container_domain
    ; This is therefore not blocking the switch to container_t
    (allow process self (netlink_audit_socket (nlmsg_relay)))
    ;
    ; Allowing tun sockets to be relabelled from "virt_launcher.process" to itself.
    ; That might seem useless, but when libvirtd adds a tun socket to a network multiqueue,
    ;   that triggers a relabelling, even if the label is already correct.
    ; "relabelfrom" and "relabelto" were added upstream and won't be necessary in the future.
    ; It is unclear if "attach_queue" is actually needed
    ; The permission below already exists on container_t, but not on its parent attribute container_domain
    ; This is therefore not blocking the switch to container_t
    (allow process self (tun_socket (relabelfrom relabelto attach_queue)))
    ;
    ; This is needed to allow virtiofs to mount filesystem and access NFS
    (allow process nfs_t (dir (mounton)))
    (allow process proc_t (dir (mounton)))
    (allow process proc_t (filesystem (mount unmount)))
)
