// Code generated by MockGen. DO NOT EDIT.
// Source: kubevirt.go

// Package kubecli is a generated GoMock package.
package kubecli

import (
	context "context"
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/client-go/route/clientset/versioned/typed/route/v1"
	v10 "github.com/openshift/client-go/security/clientset/versioned/typed/security/v1"
	v11 "k8s.io/api/autoscaling/v1"
	clientset "k8s.io/apiextensions-apiserver/pkg/client/clientset/clientset"
	v12 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	discovery "k8s.io/client-go/discovery"
	dynamic "k8s.io/client-go/dynamic"
	v13 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"
	v1beta1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1beta1"
	v1alpha1 "k8s.io/client-go/kubernetes/typed/apiserverinternal/v1alpha1"
	v14 "k8s.io/client-go/kubernetes/typed/apps/v1"
	v1beta10 "k8s.io/client-go/kubernetes/typed/apps/v1beta1"
	v1beta2 "k8s.io/client-go/kubernetes/typed/apps/v1beta2"
	v15 "k8s.io/client-go/kubernetes/typed/authentication/v1"
	v1beta11 "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"
	v16 "k8s.io/client-go/kubernetes/typed/authorization/v1"
	v1beta12 "k8s.io/client-go/kubernetes/typed/authorization/v1beta1"
	v17 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
	v2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2"
	v2beta1 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta1"
	v2beta2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta2"
	v18 "k8s.io/client-go/kubernetes/typed/batch/v1"
	v1beta13 "k8s.io/client-go/kubernetes/typed/batch/v1beta1"
	v19 "k8s.io/client-go/kubernetes/typed/certificates/v1"
	v1beta14 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1"
	v110 "k8s.io/client-go/kubernetes/typed/coordination/v1"
	v1beta15 "k8s.io/client-go/kubernetes/typed/coordination/v1beta1"
	v111 "k8s.io/client-go/kubernetes/typed/core/v1"
	v112 "k8s.io/client-go/kubernetes/typed/discovery/v1"
	v1beta16 "k8s.io/client-go/kubernetes/typed/discovery/v1beta1"
	v113 "k8s.io/client-go/kubernetes/typed/events/v1"
	v1beta17 "k8s.io/client-go/kubernetes/typed/events/v1beta1"
	v1beta18 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
	v1alpha10 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1alpha1"
	v1beta19 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta1"
	v1beta20 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta2"
	v114 "k8s.io/client-go/kubernetes/typed/networking/v1"
	v1beta110 "k8s.io/client-go/kubernetes/typed/networking/v1beta1"
	v115 "k8s.io/client-go/kubernetes/typed/node/v1"
	v1alpha11 "k8s.io/client-go/kubernetes/typed/node/v1alpha1"
	v1beta111 "k8s.io/client-go/kubernetes/typed/node/v1beta1"
	v116 "k8s.io/client-go/kubernetes/typed/policy/v1"
	v1beta112 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"
	v117 "k8s.io/client-go/kubernetes/typed/rbac/v1"
	v1alpha12 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"
	v1beta113 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1"
	v118 "k8s.io/client-go/kubernetes/typed/scheduling/v1"
	v1alpha13 "k8s.io/client-go/kubernetes/typed/scheduling/v1alpha1"
	v1beta114 "k8s.io/client-go/kubernetes/typed/scheduling/v1beta1"
	v119 "k8s.io/client-go/kubernetes/typed/storage/v1"
	v1alpha14 "k8s.io/client-go/kubernetes/typed/storage/v1alpha1"
	v1beta115 "k8s.io/client-go/kubernetes/typed/storage/v1beta1"
	rest "k8s.io/client-go/rest"
	v120 "kubevirt.io/api/core/v1"
	versioned "kubevirt.io/client-go/generated/containerized-data-importer/clientset/versioned"
	versioned0 "kubevirt.io/client-go/generated/external-snapshotter/clientset/versioned"
	versioned1 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned"
	v1alpha15 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/clone/v1alpha1"
	v1alpha16 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/export/v1alpha1"
	v1alpha2 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/instancetype/v1alpha2"
	v1alpha17 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/migrations/v1alpha1"
	v1alpha18 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/pool/v1alpha1"
	v1alpha19 "kubevirt.io/client-go/generated/kubevirt/clientset/versioned/typed/snapshot/v1alpha1"
	versioned2 "kubevirt.io/client-go/generated/network-attachment-definition-client/clientset/versioned"
	versioned3 "kubevirt.io/client-go/generated/prometheus-operator/clientset/versioned"
	version "kubevirt.io/client-go/version"
)

// MockKubevirtClient is a mock of KubevirtClient interface.
type MockKubevirtClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubevirtClientMockRecorder
}

// MockKubevirtClientMockRecorder is the mock recorder for MockKubevirtClient.
type MockKubevirtClientMockRecorder struct {
	mock *MockKubevirtClient
}

// NewMockKubevirtClient creates a new mock instance.
func NewMockKubevirtClient(ctrl *gomock.Controller) *MockKubevirtClient {
	mock := &MockKubevirtClient{ctrl: ctrl}
	mock.recorder = &MockKubevirtClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubevirtClient) EXPECT() *MockKubevirtClientMockRecorder {
	return m.recorder
}

// AdmissionregistrationV1 mocks base method.
func (m *MockKubevirtClient) AdmissionregistrationV1() v13.AdmissionregistrationV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdmissionregistrationV1")
	ret0, _ := ret[0].(v13.AdmissionregistrationV1Interface)
	return ret0
}

// AdmissionregistrationV1 indicates an expected call of AdmissionregistrationV1.
func (mr *MockKubevirtClientMockRecorder) AdmissionregistrationV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdmissionregistrationV1", reflect.TypeOf((*MockKubevirtClient)(nil).AdmissionregistrationV1))
}

// AdmissionregistrationV1beta1 mocks base method.
func (m *MockKubevirtClient) AdmissionregistrationV1beta1() v1beta1.AdmissionregistrationV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdmissionregistrationV1beta1")
	ret0, _ := ret[0].(v1beta1.AdmissionregistrationV1beta1Interface)
	return ret0
}

// AdmissionregistrationV1beta1 indicates an expected call of AdmissionregistrationV1beta1.
func (mr *MockKubevirtClientMockRecorder) AdmissionregistrationV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdmissionregistrationV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).AdmissionregistrationV1beta1))
}

// AppsV1 mocks base method.
func (m *MockKubevirtClient) AppsV1() v14.AppsV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppsV1")
	ret0, _ := ret[0].(v14.AppsV1Interface)
	return ret0
}

// AppsV1 indicates an expected call of AppsV1.
func (mr *MockKubevirtClientMockRecorder) AppsV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppsV1", reflect.TypeOf((*MockKubevirtClient)(nil).AppsV1))
}

// AppsV1beta1 mocks base method.
func (m *MockKubevirtClient) AppsV1beta1() v1beta10.AppsV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppsV1beta1")
	ret0, _ := ret[0].(v1beta10.AppsV1beta1Interface)
	return ret0
}

// AppsV1beta1 indicates an expected call of AppsV1beta1.
func (mr *MockKubevirtClientMockRecorder) AppsV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppsV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).AppsV1beta1))
}

// AppsV1beta2 mocks base method.
func (m *MockKubevirtClient) AppsV1beta2() v1beta2.AppsV1beta2Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppsV1beta2")
	ret0, _ := ret[0].(v1beta2.AppsV1beta2Interface)
	return ret0
}

// AppsV1beta2 indicates an expected call of AppsV1beta2.
func (mr *MockKubevirtClientMockRecorder) AppsV1beta2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppsV1beta2", reflect.TypeOf((*MockKubevirtClient)(nil).AppsV1beta2))
}

// AuthenticationV1 mocks base method.
func (m *MockKubevirtClient) AuthenticationV1() v15.AuthenticationV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticationV1")
	ret0, _ := ret[0].(v15.AuthenticationV1Interface)
	return ret0
}

// AuthenticationV1 indicates an expected call of AuthenticationV1.
func (mr *MockKubevirtClientMockRecorder) AuthenticationV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationV1", reflect.TypeOf((*MockKubevirtClient)(nil).AuthenticationV1))
}

// AuthenticationV1beta1 mocks base method.
func (m *MockKubevirtClient) AuthenticationV1beta1() v1beta11.AuthenticationV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticationV1beta1")
	ret0, _ := ret[0].(v1beta11.AuthenticationV1beta1Interface)
	return ret0
}

// AuthenticationV1beta1 indicates an expected call of AuthenticationV1beta1.
func (mr *MockKubevirtClientMockRecorder) AuthenticationV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticationV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).AuthenticationV1beta1))
}

// AuthorizationV1 mocks base method.
func (m *MockKubevirtClient) AuthorizationV1() v16.AuthorizationV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationV1")
	ret0, _ := ret[0].(v16.AuthorizationV1Interface)
	return ret0
}

// AuthorizationV1 indicates an expected call of AuthorizationV1.
func (mr *MockKubevirtClientMockRecorder) AuthorizationV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationV1", reflect.TypeOf((*MockKubevirtClient)(nil).AuthorizationV1))
}

// AuthorizationV1beta1 mocks base method.
func (m *MockKubevirtClient) AuthorizationV1beta1() v1beta12.AuthorizationV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizationV1beta1")
	ret0, _ := ret[0].(v1beta12.AuthorizationV1beta1Interface)
	return ret0
}

// AuthorizationV1beta1 indicates an expected call of AuthorizationV1beta1.
func (mr *MockKubevirtClientMockRecorder) AuthorizationV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizationV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).AuthorizationV1beta1))
}

// AutoscalingV1 mocks base method.
func (m *MockKubevirtClient) AutoscalingV1() v17.AutoscalingV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoscalingV1")
	ret0, _ := ret[0].(v17.AutoscalingV1Interface)
	return ret0
}

// AutoscalingV1 indicates an expected call of AutoscalingV1.
func (mr *MockKubevirtClientMockRecorder) AutoscalingV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoscalingV1", reflect.TypeOf((*MockKubevirtClient)(nil).AutoscalingV1))
}

// AutoscalingV2 mocks base method.
func (m *MockKubevirtClient) AutoscalingV2() v2.AutoscalingV2Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoscalingV2")
	ret0, _ := ret[0].(v2.AutoscalingV2Interface)
	return ret0
}

// AutoscalingV2 indicates an expected call of AutoscalingV2.
func (mr *MockKubevirtClientMockRecorder) AutoscalingV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoscalingV2", reflect.TypeOf((*MockKubevirtClient)(nil).AutoscalingV2))
}

// AutoscalingV2beta1 mocks base method.
func (m *MockKubevirtClient) AutoscalingV2beta1() v2beta1.AutoscalingV2beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoscalingV2beta1")
	ret0, _ := ret[0].(v2beta1.AutoscalingV2beta1Interface)
	return ret0
}

// AutoscalingV2beta1 indicates an expected call of AutoscalingV2beta1.
func (mr *MockKubevirtClientMockRecorder) AutoscalingV2beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoscalingV2beta1", reflect.TypeOf((*MockKubevirtClient)(nil).AutoscalingV2beta1))
}

// AutoscalingV2beta2 mocks base method.
func (m *MockKubevirtClient) AutoscalingV2beta2() v2beta2.AutoscalingV2beta2Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoscalingV2beta2")
	ret0, _ := ret[0].(v2beta2.AutoscalingV2beta2Interface)
	return ret0
}

// AutoscalingV2beta2 indicates an expected call of AutoscalingV2beta2.
func (mr *MockKubevirtClientMockRecorder) AutoscalingV2beta2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoscalingV2beta2", reflect.TypeOf((*MockKubevirtClient)(nil).AutoscalingV2beta2))
}

// BatchV1 mocks base method.
func (m *MockKubevirtClient) BatchV1() v18.BatchV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchV1")
	ret0, _ := ret[0].(v18.BatchV1Interface)
	return ret0
}

// BatchV1 indicates an expected call of BatchV1.
func (mr *MockKubevirtClientMockRecorder) BatchV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchV1", reflect.TypeOf((*MockKubevirtClient)(nil).BatchV1))
}

// BatchV1beta1 mocks base method.
func (m *MockKubevirtClient) BatchV1beta1() v1beta13.BatchV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchV1beta1")
	ret0, _ := ret[0].(v1beta13.BatchV1beta1Interface)
	return ret0
}

// BatchV1beta1 indicates an expected call of BatchV1beta1.
func (mr *MockKubevirtClientMockRecorder) BatchV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).BatchV1beta1))
}

// CdiClient mocks base method.
func (m *MockKubevirtClient) CdiClient() versioned.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CdiClient")
	ret0, _ := ret[0].(versioned.Interface)
	return ret0
}

// CdiClient indicates an expected call of CdiClient.
func (mr *MockKubevirtClientMockRecorder) CdiClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CdiClient", reflect.TypeOf((*MockKubevirtClient)(nil).CdiClient))
}

// CertificatesV1 mocks base method.
func (m *MockKubevirtClient) CertificatesV1() v19.CertificatesV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesV1")
	ret0, _ := ret[0].(v19.CertificatesV1Interface)
	return ret0
}

// CertificatesV1 indicates an expected call of CertificatesV1.
func (mr *MockKubevirtClientMockRecorder) CertificatesV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesV1", reflect.TypeOf((*MockKubevirtClient)(nil).CertificatesV1))
}

// CertificatesV1beta1 mocks base method.
func (m *MockKubevirtClient) CertificatesV1beta1() v1beta14.CertificatesV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificatesV1beta1")
	ret0, _ := ret[0].(v1beta14.CertificatesV1beta1Interface)
	return ret0
}

// CertificatesV1beta1 indicates an expected call of CertificatesV1beta1.
func (mr *MockKubevirtClientMockRecorder) CertificatesV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificatesV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).CertificatesV1beta1))
}

// ClusterProfiler mocks base method.
func (m *MockKubevirtClient) ClusterProfiler() *ClusterProfiler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterProfiler")
	ret0, _ := ret[0].(*ClusterProfiler)
	return ret0
}

// ClusterProfiler indicates an expected call of ClusterProfiler.
func (mr *MockKubevirtClientMockRecorder) ClusterProfiler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterProfiler", reflect.TypeOf((*MockKubevirtClient)(nil).ClusterProfiler))
}

// Config mocks base method.
func (m *MockKubevirtClient) Config() *rest.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*rest.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockKubevirtClientMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockKubevirtClient)(nil).Config))
}

// CoordinationV1 mocks base method.
func (m *MockKubevirtClient) CoordinationV1() v110.CoordinationV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoordinationV1")
	ret0, _ := ret[0].(v110.CoordinationV1Interface)
	return ret0
}

// CoordinationV1 indicates an expected call of CoordinationV1.
func (mr *MockKubevirtClientMockRecorder) CoordinationV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoordinationV1", reflect.TypeOf((*MockKubevirtClient)(nil).CoordinationV1))
}

// CoordinationV1beta1 mocks base method.
func (m *MockKubevirtClient) CoordinationV1beta1() v1beta15.CoordinationV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoordinationV1beta1")
	ret0, _ := ret[0].(v1beta15.CoordinationV1beta1Interface)
	return ret0
}

// CoordinationV1beta1 indicates an expected call of CoordinationV1beta1.
func (mr *MockKubevirtClientMockRecorder) CoordinationV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoordinationV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).CoordinationV1beta1))
}

// CoreV1 mocks base method.
func (m *MockKubevirtClient) CoreV1() v111.CoreV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoreV1")
	ret0, _ := ret[0].(v111.CoreV1Interface)
	return ret0
}

// CoreV1 indicates an expected call of CoreV1.
func (mr *MockKubevirtClientMockRecorder) CoreV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoreV1", reflect.TypeOf((*MockKubevirtClient)(nil).CoreV1))
}

// Discovery mocks base method.
func (m *MockKubevirtClient) Discovery() discovery.DiscoveryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discovery")
	ret0, _ := ret[0].(discovery.DiscoveryInterface)
	return ret0
}

// Discovery indicates an expected call of Discovery.
func (mr *MockKubevirtClientMockRecorder) Discovery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discovery", reflect.TypeOf((*MockKubevirtClient)(nil).Discovery))
}

// DiscoveryClient mocks base method.
func (m *MockKubevirtClient) DiscoveryClient() discovery.DiscoveryInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryClient")
	ret0, _ := ret[0].(discovery.DiscoveryInterface)
	return ret0
}

// DiscoveryClient indicates an expected call of DiscoveryClient.
func (mr *MockKubevirtClientMockRecorder) DiscoveryClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryClient", reflect.TypeOf((*MockKubevirtClient)(nil).DiscoveryClient))
}

// DiscoveryV1 mocks base method.
func (m *MockKubevirtClient) DiscoveryV1() v112.DiscoveryV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryV1")
	ret0, _ := ret[0].(v112.DiscoveryV1Interface)
	return ret0
}

// DiscoveryV1 indicates an expected call of DiscoveryV1.
func (mr *MockKubevirtClientMockRecorder) DiscoveryV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryV1", reflect.TypeOf((*MockKubevirtClient)(nil).DiscoveryV1))
}

// DiscoveryV1beta1 mocks base method.
func (m *MockKubevirtClient) DiscoveryV1beta1() v1beta16.DiscoveryV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoveryV1beta1")
	ret0, _ := ret[0].(v1beta16.DiscoveryV1beta1Interface)
	return ret0
}

// DiscoveryV1beta1 indicates an expected call of DiscoveryV1beta1.
func (mr *MockKubevirtClientMockRecorder) DiscoveryV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoveryV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).DiscoveryV1beta1))
}

// DynamicClient mocks base method.
func (m *MockKubevirtClient) DynamicClient() dynamic.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DynamicClient")
	ret0, _ := ret[0].(dynamic.Interface)
	return ret0
}

// DynamicClient indicates an expected call of DynamicClient.
func (mr *MockKubevirtClientMockRecorder) DynamicClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DynamicClient", reflect.TypeOf((*MockKubevirtClient)(nil).DynamicClient))
}

// EventsV1 mocks base method.
func (m *MockKubevirtClient) EventsV1() v113.EventsV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsV1")
	ret0, _ := ret[0].(v113.EventsV1Interface)
	return ret0
}

// EventsV1 indicates an expected call of EventsV1.
func (mr *MockKubevirtClientMockRecorder) EventsV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsV1", reflect.TypeOf((*MockKubevirtClient)(nil).EventsV1))
}

// EventsV1beta1 mocks base method.
func (m *MockKubevirtClient) EventsV1beta1() v1beta17.EventsV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EventsV1beta1")
	ret0, _ := ret[0].(v1beta17.EventsV1beta1Interface)
	return ret0
}

// EventsV1beta1 indicates an expected call of EventsV1beta1.
func (mr *MockKubevirtClientMockRecorder) EventsV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EventsV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).EventsV1beta1))
}

// ExpandSpec mocks base method.
func (m *MockKubevirtClient) ExpandSpec(namespace string) ExpandSpecInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandSpec", namespace)
	ret0, _ := ret[0].(ExpandSpecInterface)
	return ret0
}

// ExpandSpec indicates an expected call of ExpandSpec.
func (mr *MockKubevirtClientMockRecorder) ExpandSpec(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandSpec", reflect.TypeOf((*MockKubevirtClient)(nil).ExpandSpec), namespace)
}

// ExtensionsClient mocks base method.
func (m *MockKubevirtClient) ExtensionsClient() clientset.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionsClient")
	ret0, _ := ret[0].(clientset.Interface)
	return ret0
}

// ExtensionsClient indicates an expected call of ExtensionsClient.
func (mr *MockKubevirtClientMockRecorder) ExtensionsClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionsClient", reflect.TypeOf((*MockKubevirtClient)(nil).ExtensionsClient))
}

// ExtensionsV1beta1 mocks base method.
func (m *MockKubevirtClient) ExtensionsV1beta1() v1beta18.ExtensionsV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtensionsV1beta1")
	ret0, _ := ret[0].(v1beta18.ExtensionsV1beta1Interface)
	return ret0
}

// ExtensionsV1beta1 indicates an expected call of ExtensionsV1beta1.
func (mr *MockKubevirtClientMockRecorder) ExtensionsV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtensionsV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).ExtensionsV1beta1))
}

// FlowcontrolV1alpha1 mocks base method.
func (m *MockKubevirtClient) FlowcontrolV1alpha1() v1alpha10.FlowcontrolV1alpha1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowcontrolV1alpha1")
	ret0, _ := ret[0].(v1alpha10.FlowcontrolV1alpha1Interface)
	return ret0
}

// FlowcontrolV1alpha1 indicates an expected call of FlowcontrolV1alpha1.
func (mr *MockKubevirtClientMockRecorder) FlowcontrolV1alpha1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowcontrolV1alpha1", reflect.TypeOf((*MockKubevirtClient)(nil).FlowcontrolV1alpha1))
}

// FlowcontrolV1beta1 mocks base method.
func (m *MockKubevirtClient) FlowcontrolV1beta1() v1beta19.FlowcontrolV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowcontrolV1beta1")
	ret0, _ := ret[0].(v1beta19.FlowcontrolV1beta1Interface)
	return ret0
}

// FlowcontrolV1beta1 indicates an expected call of FlowcontrolV1beta1.
func (mr *MockKubevirtClientMockRecorder) FlowcontrolV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowcontrolV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).FlowcontrolV1beta1))
}

// FlowcontrolV1beta2 mocks base method.
func (m *MockKubevirtClient) FlowcontrolV1beta2() v1beta20.FlowcontrolV1beta2Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowcontrolV1beta2")
	ret0, _ := ret[0].(v1beta20.FlowcontrolV1beta2Interface)
	return ret0
}

// FlowcontrolV1beta2 indicates an expected call of FlowcontrolV1beta2.
func (mr *MockKubevirtClientMockRecorder) FlowcontrolV1beta2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowcontrolV1beta2", reflect.TypeOf((*MockKubevirtClient)(nil).FlowcontrolV1beta2))
}

// GeneratedKubeVirtClient mocks base method.
func (m *MockKubevirtClient) GeneratedKubeVirtClient() versioned1.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratedKubeVirtClient")
	ret0, _ := ret[0].(versioned1.Interface)
	return ret0
}

// GeneratedKubeVirtClient indicates an expected call of GeneratedKubeVirtClient.
func (mr *MockKubevirtClientMockRecorder) GeneratedKubeVirtClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratedKubeVirtClient", reflect.TypeOf((*MockKubevirtClient)(nil).GeneratedKubeVirtClient))
}

// GuestfsVersion mocks base method.
func (m *MockKubevirtClient) GuestfsVersion() *GuestfsVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuestfsVersion")
	ret0, _ := ret[0].(*GuestfsVersion)
	return ret0
}

// GuestfsVersion indicates an expected call of GuestfsVersion.
func (mr *MockKubevirtClientMockRecorder) GuestfsVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuestfsVersion", reflect.TypeOf((*MockKubevirtClient)(nil).GuestfsVersion))
}

// InternalV1alpha1 mocks base method.
func (m *MockKubevirtClient) InternalV1alpha1() v1alpha1.InternalV1alpha1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InternalV1alpha1")
	ret0, _ := ret[0].(v1alpha1.InternalV1alpha1Interface)
	return ret0
}

// InternalV1alpha1 indicates an expected call of InternalV1alpha1.
func (mr *MockKubevirtClientMockRecorder) InternalV1alpha1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InternalV1alpha1", reflect.TypeOf((*MockKubevirtClient)(nil).InternalV1alpha1))
}

// KubeVirt mocks base method.
func (m *MockKubevirtClient) KubeVirt(namespace string) KubeVirtInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubeVirt", namespace)
	ret0, _ := ret[0].(KubeVirtInterface)
	return ret0
}

// KubeVirt indicates an expected call of KubeVirt.
func (mr *MockKubevirtClientMockRecorder) KubeVirt(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubeVirt", reflect.TypeOf((*MockKubevirtClient)(nil).KubeVirt), namespace)
}

// KubernetesSnapshotClient mocks base method.
func (m *MockKubevirtClient) KubernetesSnapshotClient() versioned0.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesSnapshotClient")
	ret0, _ := ret[0].(versioned0.Interface)
	return ret0
}

// KubernetesSnapshotClient indicates an expected call of KubernetesSnapshotClient.
func (mr *MockKubevirtClientMockRecorder) KubernetesSnapshotClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesSnapshotClient", reflect.TypeOf((*MockKubevirtClient)(nil).KubernetesSnapshotClient))
}

// MigrationPolicy mocks base method.
func (m *MockKubevirtClient) MigrationPolicy() v1alpha17.MigrationPolicyInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationPolicy")
	ret0, _ := ret[0].(v1alpha17.MigrationPolicyInterface)
	return ret0
}

// MigrationPolicy indicates an expected call of MigrationPolicy.
func (mr *MockKubevirtClientMockRecorder) MigrationPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationPolicy", reflect.TypeOf((*MockKubevirtClient)(nil).MigrationPolicy))
}

// MigrationPolicyClient mocks base method.
func (m *MockKubevirtClient) MigrationPolicyClient() *v1alpha17.MigrationsV1alpha1Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationPolicyClient")
	ret0, _ := ret[0].(*v1alpha17.MigrationsV1alpha1Client)
	return ret0
}

// MigrationPolicyClient indicates an expected call of MigrationPolicyClient.
func (mr *MockKubevirtClientMockRecorder) MigrationPolicyClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationPolicyClient", reflect.TypeOf((*MockKubevirtClient)(nil).MigrationPolicyClient))
}

// NetworkClient mocks base method.
func (m *MockKubevirtClient) NetworkClient() versioned2.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkClient")
	ret0, _ := ret[0].(versioned2.Interface)
	return ret0
}

// NetworkClient indicates an expected call of NetworkClient.
func (mr *MockKubevirtClientMockRecorder) NetworkClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkClient", reflect.TypeOf((*MockKubevirtClient)(nil).NetworkClient))
}

// NetworkingV1 mocks base method.
func (m *MockKubevirtClient) NetworkingV1() v114.NetworkingV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingV1")
	ret0, _ := ret[0].(v114.NetworkingV1Interface)
	return ret0
}

// NetworkingV1 indicates an expected call of NetworkingV1.
func (mr *MockKubevirtClientMockRecorder) NetworkingV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingV1", reflect.TypeOf((*MockKubevirtClient)(nil).NetworkingV1))
}

// NetworkingV1beta1 mocks base method.
func (m *MockKubevirtClient) NetworkingV1beta1() v1beta110.NetworkingV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkingV1beta1")
	ret0, _ := ret[0].(v1beta110.NetworkingV1beta1Interface)
	return ret0
}

// NetworkingV1beta1 indicates an expected call of NetworkingV1beta1.
func (mr *MockKubevirtClientMockRecorder) NetworkingV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkingV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).NetworkingV1beta1))
}

// NodeV1 mocks base method.
func (m *MockKubevirtClient) NodeV1() v115.NodeV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeV1")
	ret0, _ := ret[0].(v115.NodeV1Interface)
	return ret0
}

// NodeV1 indicates an expected call of NodeV1.
func (mr *MockKubevirtClientMockRecorder) NodeV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeV1", reflect.TypeOf((*MockKubevirtClient)(nil).NodeV1))
}

// NodeV1alpha1 mocks base method.
func (m *MockKubevirtClient) NodeV1alpha1() v1alpha11.NodeV1alpha1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeV1alpha1")
	ret0, _ := ret[0].(v1alpha11.NodeV1alpha1Interface)
	return ret0
}

// NodeV1alpha1 indicates an expected call of NodeV1alpha1.
func (mr *MockKubevirtClientMockRecorder) NodeV1alpha1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeV1alpha1", reflect.TypeOf((*MockKubevirtClient)(nil).NodeV1alpha1))
}

// NodeV1beta1 mocks base method.
func (m *MockKubevirtClient) NodeV1beta1() v1beta111.NodeV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeV1beta1")
	ret0, _ := ret[0].(v1beta111.NodeV1beta1Interface)
	return ret0
}

// NodeV1beta1 indicates an expected call of NodeV1beta1.
func (mr *MockKubevirtClientMockRecorder) NodeV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).NodeV1beta1))
}

// PolicyV1 mocks base method.
func (m *MockKubevirtClient) PolicyV1() v116.PolicyV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyV1")
	ret0, _ := ret[0].(v116.PolicyV1Interface)
	return ret0
}

// PolicyV1 indicates an expected call of PolicyV1.
func (mr *MockKubevirtClientMockRecorder) PolicyV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyV1", reflect.TypeOf((*MockKubevirtClient)(nil).PolicyV1))
}

// PolicyV1beta1 mocks base method.
func (m *MockKubevirtClient) PolicyV1beta1() v1beta112.PolicyV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyV1beta1")
	ret0, _ := ret[0].(v1beta112.PolicyV1beta1Interface)
	return ret0
}

// PolicyV1beta1 indicates an expected call of PolicyV1beta1.
func (mr *MockKubevirtClientMockRecorder) PolicyV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).PolicyV1beta1))
}

// PrometheusClient mocks base method.
func (m *MockKubevirtClient) PrometheusClient() versioned3.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusClient")
	ret0, _ := ret[0].(versioned3.Interface)
	return ret0
}

// PrometheusClient indicates an expected call of PrometheusClient.
func (mr *MockKubevirtClientMockRecorder) PrometheusClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusClient", reflect.TypeOf((*MockKubevirtClient)(nil).PrometheusClient))
}

// RbacV1 mocks base method.
func (m *MockKubevirtClient) RbacV1() v117.RbacV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RbacV1")
	ret0, _ := ret[0].(v117.RbacV1Interface)
	return ret0
}

// RbacV1 indicates an expected call of RbacV1.
func (mr *MockKubevirtClientMockRecorder) RbacV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RbacV1", reflect.TypeOf((*MockKubevirtClient)(nil).RbacV1))
}

// RbacV1alpha1 mocks base method.
func (m *MockKubevirtClient) RbacV1alpha1() v1alpha12.RbacV1alpha1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RbacV1alpha1")
	ret0, _ := ret[0].(v1alpha12.RbacV1alpha1Interface)
	return ret0
}

// RbacV1alpha1 indicates an expected call of RbacV1alpha1.
func (mr *MockKubevirtClientMockRecorder) RbacV1alpha1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RbacV1alpha1", reflect.TypeOf((*MockKubevirtClient)(nil).RbacV1alpha1))
}

// RbacV1beta1 mocks base method.
func (m *MockKubevirtClient) RbacV1beta1() v1beta113.RbacV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RbacV1beta1")
	ret0, _ := ret[0].(v1beta113.RbacV1beta1Interface)
	return ret0
}

// RbacV1beta1 indicates an expected call of RbacV1beta1.
func (mr *MockKubevirtClientMockRecorder) RbacV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RbacV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).RbacV1beta1))
}

// ReplicaSet mocks base method.
func (m *MockKubevirtClient) ReplicaSet(namespace string) ReplicaSetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicaSet", namespace)
	ret0, _ := ret[0].(ReplicaSetInterface)
	return ret0
}

// ReplicaSet indicates an expected call of ReplicaSet.
func (mr *MockKubevirtClientMockRecorder) ReplicaSet(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicaSet", reflect.TypeOf((*MockKubevirtClient)(nil).ReplicaSet), namespace)
}

// RestClient mocks base method.
func (m *MockKubevirtClient) RestClient() *rest.RESTClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestClient")
	ret0, _ := ret[0].(*rest.RESTClient)
	return ret0
}

// RestClient indicates an expected call of RestClient.
func (mr *MockKubevirtClientMockRecorder) RestClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestClient", reflect.TypeOf((*MockKubevirtClient)(nil).RestClient))
}

// RouteClient mocks base method.
func (m *MockKubevirtClient) RouteClient() v1.RouteV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteClient")
	ret0, _ := ret[0].(v1.RouteV1Interface)
	return ret0
}

// RouteClient indicates an expected call of RouteClient.
func (mr *MockKubevirtClientMockRecorder) RouteClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteClient", reflect.TypeOf((*MockKubevirtClient)(nil).RouteClient))
}

// SchedulingV1 mocks base method.
func (m *MockKubevirtClient) SchedulingV1() v118.SchedulingV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulingV1")
	ret0, _ := ret[0].(v118.SchedulingV1Interface)
	return ret0
}

// SchedulingV1 indicates an expected call of SchedulingV1.
func (mr *MockKubevirtClientMockRecorder) SchedulingV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulingV1", reflect.TypeOf((*MockKubevirtClient)(nil).SchedulingV1))
}

// SchedulingV1alpha1 mocks base method.
func (m *MockKubevirtClient) SchedulingV1alpha1() v1alpha13.SchedulingV1alpha1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulingV1alpha1")
	ret0, _ := ret[0].(v1alpha13.SchedulingV1alpha1Interface)
	return ret0
}

// SchedulingV1alpha1 indicates an expected call of SchedulingV1alpha1.
func (mr *MockKubevirtClientMockRecorder) SchedulingV1alpha1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulingV1alpha1", reflect.TypeOf((*MockKubevirtClient)(nil).SchedulingV1alpha1))
}

// SchedulingV1beta1 mocks base method.
func (m *MockKubevirtClient) SchedulingV1beta1() v1beta114.SchedulingV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulingV1beta1")
	ret0, _ := ret[0].(v1beta114.SchedulingV1beta1Interface)
	return ret0
}

// SchedulingV1beta1 indicates an expected call of SchedulingV1beta1.
func (mr *MockKubevirtClientMockRecorder) SchedulingV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulingV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).SchedulingV1beta1))
}

// SecClient mocks base method.
func (m *MockKubevirtClient) SecClient() v10.SecurityV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecClient")
	ret0, _ := ret[0].(v10.SecurityV1Interface)
	return ret0
}

// SecClient indicates an expected call of SecClient.
func (mr *MockKubevirtClientMockRecorder) SecClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecClient", reflect.TypeOf((*MockKubevirtClient)(nil).SecClient))
}

// ServerVersion mocks base method.
func (m *MockKubevirtClient) ServerVersion() ServerVersionInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerVersion")
	ret0, _ := ret[0].(ServerVersionInterface)
	return ret0
}

// ServerVersion indicates an expected call of ServerVersion.
func (mr *MockKubevirtClientMockRecorder) ServerVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerVersion", reflect.TypeOf((*MockKubevirtClient)(nil).ServerVersion))
}

// StorageV1 mocks base method.
func (m *MockKubevirtClient) StorageV1() v119.StorageV1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1")
	ret0, _ := ret[0].(v119.StorageV1Interface)
	return ret0
}

// StorageV1 indicates an expected call of StorageV1.
func (mr *MockKubevirtClientMockRecorder) StorageV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1", reflect.TypeOf((*MockKubevirtClient)(nil).StorageV1))
}

// StorageV1alpha1 mocks base method.
func (m *MockKubevirtClient) StorageV1alpha1() v1alpha14.StorageV1alpha1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1alpha1")
	ret0, _ := ret[0].(v1alpha14.StorageV1alpha1Interface)
	return ret0
}

// StorageV1alpha1 indicates an expected call of StorageV1alpha1.
func (mr *MockKubevirtClientMockRecorder) StorageV1alpha1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1alpha1", reflect.TypeOf((*MockKubevirtClient)(nil).StorageV1alpha1))
}

// StorageV1beta1 mocks base method.
func (m *MockKubevirtClient) StorageV1beta1() v1beta115.StorageV1beta1Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageV1beta1")
	ret0, _ := ret[0].(v1beta115.StorageV1beta1Interface)
	return ret0
}

// StorageV1beta1 indicates an expected call of StorageV1beta1.
func (mr *MockKubevirtClientMockRecorder) StorageV1beta1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageV1beta1", reflect.TypeOf((*MockKubevirtClient)(nil).StorageV1beta1))
}

// VirtualMachine mocks base method.
func (m *MockKubevirtClient) VirtualMachine(namespace string) VirtualMachineInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachine", namespace)
	ret0, _ := ret[0].(VirtualMachineInterface)
	return ret0
}

// VirtualMachine indicates an expected call of VirtualMachine.
func (mr *MockKubevirtClientMockRecorder) VirtualMachine(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachine", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachine), namespace)
}

// VirtualMachineClone mocks base method.
func (m *MockKubevirtClient) VirtualMachineClone(namespace string) v1alpha15.VirtualMachineCloneInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineClone", namespace)
	ret0, _ := ret[0].(v1alpha15.VirtualMachineCloneInterface)
	return ret0
}

// VirtualMachineClone indicates an expected call of VirtualMachineClone.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineClone(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineClone", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineClone), namespace)
}

// VirtualMachineClusterInstancetype mocks base method.
func (m *MockKubevirtClient) VirtualMachineClusterInstancetype() v1alpha2.VirtualMachineClusterInstancetypeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineClusterInstancetype")
	ret0, _ := ret[0].(v1alpha2.VirtualMachineClusterInstancetypeInterface)
	return ret0
}

// VirtualMachineClusterInstancetype indicates an expected call of VirtualMachineClusterInstancetype.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineClusterInstancetype() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineClusterInstancetype", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineClusterInstancetype))
}

// VirtualMachineClusterPreference mocks base method.
func (m *MockKubevirtClient) VirtualMachineClusterPreference() v1alpha2.VirtualMachineClusterPreferenceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineClusterPreference")
	ret0, _ := ret[0].(v1alpha2.VirtualMachineClusterPreferenceInterface)
	return ret0
}

// VirtualMachineClusterPreference indicates an expected call of VirtualMachineClusterPreference.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineClusterPreference() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineClusterPreference", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineClusterPreference))
}

// VirtualMachineExport mocks base method.
func (m *MockKubevirtClient) VirtualMachineExport(namespace string) v1alpha16.VirtualMachineExportInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineExport", namespace)
	ret0, _ := ret[0].(v1alpha16.VirtualMachineExportInterface)
	return ret0
}

// VirtualMachineExport indicates an expected call of VirtualMachineExport.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineExport(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineExport", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineExport), namespace)
}

// VirtualMachineInstance mocks base method.
func (m *MockKubevirtClient) VirtualMachineInstance(namespace string) VirtualMachineInstanceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineInstance", namespace)
	ret0, _ := ret[0].(VirtualMachineInstanceInterface)
	return ret0
}

// VirtualMachineInstance indicates an expected call of VirtualMachineInstance.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineInstance(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineInstance", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineInstance), namespace)
}

// VirtualMachineInstanceMigration mocks base method.
func (m *MockKubevirtClient) VirtualMachineInstanceMigration(namespace string) VirtualMachineInstanceMigrationInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineInstanceMigration", namespace)
	ret0, _ := ret[0].(VirtualMachineInstanceMigrationInterface)
	return ret0
}

// VirtualMachineInstanceMigration indicates an expected call of VirtualMachineInstanceMigration.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineInstanceMigration(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineInstanceMigration", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineInstanceMigration), namespace)
}

// VirtualMachineInstancePreset mocks base method.
func (m *MockKubevirtClient) VirtualMachineInstancePreset(namespace string) VirtualMachineInstancePresetInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineInstancePreset", namespace)
	ret0, _ := ret[0].(VirtualMachineInstancePresetInterface)
	return ret0
}

// VirtualMachineInstancePreset indicates an expected call of VirtualMachineInstancePreset.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineInstancePreset(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineInstancePreset", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineInstancePreset), namespace)
}

// VirtualMachineInstancetype mocks base method.
func (m *MockKubevirtClient) VirtualMachineInstancetype(namespace string) v1alpha2.VirtualMachineInstancetypeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineInstancetype", namespace)
	ret0, _ := ret[0].(v1alpha2.VirtualMachineInstancetypeInterface)
	return ret0
}

// VirtualMachineInstancetype indicates an expected call of VirtualMachineInstancetype.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineInstancetype(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineInstancetype", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineInstancetype), namespace)
}

// VirtualMachinePool mocks base method.
func (m *MockKubevirtClient) VirtualMachinePool(namespace string) v1alpha18.VirtualMachinePoolInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachinePool", namespace)
	ret0, _ := ret[0].(v1alpha18.VirtualMachinePoolInterface)
	return ret0
}

// VirtualMachinePool indicates an expected call of VirtualMachinePool.
func (mr *MockKubevirtClientMockRecorder) VirtualMachinePool(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachinePool", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachinePool), namespace)
}

// VirtualMachinePreference mocks base method.
func (m *MockKubevirtClient) VirtualMachinePreference(namespace string) v1alpha2.VirtualMachinePreferenceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachinePreference", namespace)
	ret0, _ := ret[0].(v1alpha2.VirtualMachinePreferenceInterface)
	return ret0
}

// VirtualMachinePreference indicates an expected call of VirtualMachinePreference.
func (mr *MockKubevirtClientMockRecorder) VirtualMachinePreference(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachinePreference", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachinePreference), namespace)
}

// VirtualMachineRestore mocks base method.
func (m *MockKubevirtClient) VirtualMachineRestore(namespace string) v1alpha19.VirtualMachineRestoreInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineRestore", namespace)
	ret0, _ := ret[0].(v1alpha19.VirtualMachineRestoreInterface)
	return ret0
}

// VirtualMachineRestore indicates an expected call of VirtualMachineRestore.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineRestore(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineRestore", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineRestore), namespace)
}

// VirtualMachineSnapshot mocks base method.
func (m *MockKubevirtClient) VirtualMachineSnapshot(namespace string) v1alpha19.VirtualMachineSnapshotInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineSnapshot", namespace)
	ret0, _ := ret[0].(v1alpha19.VirtualMachineSnapshotInterface)
	return ret0
}

// VirtualMachineSnapshot indicates an expected call of VirtualMachineSnapshot.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineSnapshot(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineSnapshot", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineSnapshot), namespace)
}

// VirtualMachineSnapshotContent mocks base method.
func (m *MockKubevirtClient) VirtualMachineSnapshotContent(namespace string) v1alpha19.VirtualMachineSnapshotContentInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineSnapshotContent", namespace)
	ret0, _ := ret[0].(v1alpha19.VirtualMachineSnapshotContentInterface)
	return ret0
}

// VirtualMachineSnapshotContent indicates an expected call of VirtualMachineSnapshotContent.
func (mr *MockKubevirtClientMockRecorder) VirtualMachineSnapshotContent(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineSnapshotContent", reflect.TypeOf((*MockKubevirtClient)(nil).VirtualMachineSnapshotContent), namespace)
}

// MockStreamInterface is a mock of StreamInterface interface.
type MockStreamInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStreamInterfaceMockRecorder
}

// MockStreamInterfaceMockRecorder is the mock recorder for MockStreamInterface.
type MockStreamInterfaceMockRecorder struct {
	mock *MockStreamInterface
}

// NewMockStreamInterface creates a new mock instance.
func NewMockStreamInterface(ctrl *gomock.Controller) *MockStreamInterface {
	mock := &MockStreamInterface{ctrl: ctrl}
	mock.recorder = &MockStreamInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamInterface) EXPECT() *MockStreamInterfaceMockRecorder {
	return m.recorder
}

// AsConn mocks base method.
func (m *MockStreamInterface) AsConn() net.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsConn")
	ret0, _ := ret[0].(net.Conn)
	return ret0
}

// AsConn indicates an expected call of AsConn.
func (mr *MockStreamInterfaceMockRecorder) AsConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsConn", reflect.TypeOf((*MockStreamInterface)(nil).AsConn))
}

// Stream mocks base method.
func (m *MockStreamInterface) Stream(options StreamOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream.
func (mr *MockStreamInterfaceMockRecorder) Stream(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockStreamInterface)(nil).Stream), options)
}

// MockVirtualMachineInstanceInterface is a mock of VirtualMachineInstanceInterface interface.
type MockVirtualMachineInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineInstanceInterfaceMockRecorder
}

// MockVirtualMachineInstanceInterfaceMockRecorder is the mock recorder for MockVirtualMachineInstanceInterface.
type MockVirtualMachineInstanceInterfaceMockRecorder struct {
	mock *MockVirtualMachineInstanceInterface
}

// NewMockVirtualMachineInstanceInterface creates a new mock instance.
func NewMockVirtualMachineInstanceInterface(ctrl *gomock.Controller) *MockVirtualMachineInstanceInterface {
	mock := &MockVirtualMachineInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineInstanceInterface) EXPECT() *MockVirtualMachineInstanceInterfaceMockRecorder {
	return m.recorder
}

// AddInterface mocks base method.
func (m *MockVirtualMachineInstanceInterface) AddInterface(ctx context.Context, name string, addInterfaceOptions *v120.AddInterfaceOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInterface", ctx, name, addInterfaceOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInterface indicates an expected call of AddInterface.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) AddInterface(ctx, name, addInterfaceOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInterface", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).AddInterface), ctx, name, addInterfaceOptions)
}

// AddVolume mocks base method.
func (m *MockVirtualMachineInstanceInterface) AddVolume(ctx context.Context, name string, addVolumeOptions *v120.AddVolumeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolume", ctx, name, addVolumeOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolume indicates an expected call of AddVolume.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) AddVolume(ctx, name, addVolumeOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolume", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).AddVolume), ctx, name, addVolumeOptions)
}

// Create mocks base method.
func (m *MockVirtualMachineInstanceInterface) Create(ctx context.Context, instance *v120.VirtualMachineInstance) (*v120.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, instance)
	ret0, _ := ret[0].(*v120.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Create(ctx, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Create), ctx, instance)
}

// Delete mocks base method.
func (m *MockVirtualMachineInstanceInterface) Delete(ctx context.Context, name string, options *v12.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Delete(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Delete), ctx, name, options)
}

// FilesystemList mocks base method.
func (m *MockVirtualMachineInstanceInterface) FilesystemList(ctx context.Context, name string) (v120.VirtualMachineInstanceFileSystemList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilesystemList", ctx, name)
	ret0, _ := ret[0].(v120.VirtualMachineInstanceFileSystemList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilesystemList indicates an expected call of FilesystemList.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) FilesystemList(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilesystemList", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).FilesystemList), ctx, name)
}

// Freeze mocks base method.
func (m *MockVirtualMachineInstanceInterface) Freeze(ctx context.Context, name string, unfreezeTimeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Freeze", ctx, name, unfreezeTimeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Freeze indicates an expected call of Freeze.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Freeze(ctx, name, unfreezeTimeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Freeze", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Freeze), ctx, name, unfreezeTimeout)
}

// Get mocks base method.
func (m *MockVirtualMachineInstanceInterface) Get(ctx context.Context, name string, options *v12.GetOptions) (*v120.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, options)
	ret0, _ := ret[0].(*v120.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Get(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Get), ctx, name, options)
}

// GuestOsInfo mocks base method.
func (m *MockVirtualMachineInstanceInterface) GuestOsInfo(ctx context.Context, name string) (v120.VirtualMachineInstanceGuestAgentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuestOsInfo", ctx, name)
	ret0, _ := ret[0].(v120.VirtualMachineInstanceGuestAgentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuestOsInfo indicates an expected call of GuestOsInfo.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) GuestOsInfo(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuestOsInfo", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).GuestOsInfo), ctx, name)
}

// List mocks base method.
func (m *MockVirtualMachineInstanceInterface) List(ctx context.Context, opts *v12.ListOptions) (*v120.VirtualMachineInstanceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).List), ctx, opts)
}

// Patch mocks base method.
func (m *MockVirtualMachineInstanceInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, patchOptions *v12.PatchOptions, subresources ...string) (*v120.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name, pt, data, patchOptions}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v120.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Patch(ctx, name, pt, data, patchOptions interface{}, subresources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name, pt, data, patchOptions}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Patch), varargs...)
}

// Pause mocks base method.
func (m *MockVirtualMachineInstanceInterface) Pause(ctx context.Context, name string, pauseOptions *v120.PauseOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", ctx, name, pauseOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pause indicates an expected call of Pause.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Pause(ctx, name, pauseOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Pause), ctx, name, pauseOptions)
}

// PortForward mocks base method.
func (m *MockVirtualMachineInstanceInterface) PortForward(name string, port int, protocol string) (StreamInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortForward", name, port, protocol)
	ret0, _ := ret[0].(StreamInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortForward indicates an expected call of PortForward.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) PortForward(name, port, protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortForward", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).PortForward), name, port, protocol)
}

// RemoveVolume mocks base method.
func (m *MockVirtualMachineInstanceInterface) RemoveVolume(ctx context.Context, name string, removeVolumeOptions *v120.RemoveVolumeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolume", ctx, name, removeVolumeOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolume indicates an expected call of RemoveVolume.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) RemoveVolume(ctx, name, removeVolumeOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolume", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).RemoveVolume), ctx, name, removeVolumeOptions)
}

// Screenshot mocks base method.
func (m *MockVirtualMachineInstanceInterface) Screenshot(ctx context.Context, name string, options *v120.ScreenshotOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Screenshot", ctx, name, options)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Screenshot indicates an expected call of Screenshot.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Screenshot(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Screenshot", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Screenshot), ctx, name, options)
}

// SerialConsole mocks base method.
func (m *MockVirtualMachineInstanceInterface) SerialConsole(name string, options *SerialConsoleOptions) (StreamInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerialConsole", name, options)
	ret0, _ := ret[0].(StreamInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SerialConsole indicates an expected call of SerialConsole.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) SerialConsole(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerialConsole", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).SerialConsole), name, options)
}

// SoftReboot mocks base method.
func (m *MockVirtualMachineInstanceInterface) SoftReboot(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftReboot", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftReboot indicates an expected call of SoftReboot.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) SoftReboot(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftReboot", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).SoftReboot), ctx, name)
}

// USBRedir mocks base method.
func (m *MockVirtualMachineInstanceInterface) USBRedir(vmiName string) (StreamInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "USBRedir", vmiName)
	ret0, _ := ret[0].(StreamInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// USBRedir indicates an expected call of USBRedir.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) USBRedir(vmiName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "USBRedir", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).USBRedir), vmiName)
}

// Unfreeze mocks base method.
func (m *MockVirtualMachineInstanceInterface) Unfreeze(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unfreeze", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unfreeze indicates an expected call of Unfreeze.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Unfreeze(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unfreeze", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Unfreeze), ctx, name)
}

// Unpause mocks base method.
func (m *MockVirtualMachineInstanceInterface) Unpause(ctx context.Context, name string, unpauseOptions *v120.UnpauseOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpause", ctx, name, unpauseOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unpause indicates an expected call of Unpause.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Unpause(ctx, name, unpauseOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpause", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Unpause), ctx, name, unpauseOptions)
}

// Update mocks base method.
func (m *MockVirtualMachineInstanceInterface) Update(ctx context.Context, instance *v120.VirtualMachineInstance) (*v120.VirtualMachineInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, instance)
	ret0, _ := ret[0].(*v120.VirtualMachineInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Update(ctx, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Update), ctx, instance)
}

// UserList mocks base method.
func (m *MockVirtualMachineInstanceInterface) UserList(ctx context.Context, name string) (v120.VirtualMachineInstanceGuestOSUserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", ctx, name)
	ret0, _ := ret[0].(v120.VirtualMachineInstanceGuestOSUserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) UserList(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).UserList), ctx, name)
}

// VNC mocks base method.
func (m *MockVirtualMachineInstanceInterface) VNC(name string) (StreamInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VNC", name)
	ret0, _ := ret[0].(StreamInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VNC indicates an expected call of VNC.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) VNC(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VNC", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).VNC), name)
}

// VSOCK mocks base method.
func (m *MockVirtualMachineInstanceInterface) VSOCK(name string, options *v120.VSOCKOptions) (StreamInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VSOCK", name, options)
	ret0, _ := ret[0].(StreamInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VSOCK indicates an expected call of VSOCK.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) VSOCK(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VSOCK", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).VSOCK), name, options)
}

// Watch mocks base method.
func (m *MockVirtualMachineInstanceInterface) Watch(ctx context.Context, opts v12.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockVirtualMachineInstanceInterfaceMockRecorder) Watch(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockVirtualMachineInstanceInterface)(nil).Watch), ctx, opts)
}

// MockReplicaSetInterface is a mock of ReplicaSetInterface interface.
type MockReplicaSetInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReplicaSetInterfaceMockRecorder
}

// MockReplicaSetInterfaceMockRecorder is the mock recorder for MockReplicaSetInterface.
type MockReplicaSetInterfaceMockRecorder struct {
	mock *MockReplicaSetInterface
}

// NewMockReplicaSetInterface creates a new mock instance.
func NewMockReplicaSetInterface(ctrl *gomock.Controller) *MockReplicaSetInterface {
	mock := &MockReplicaSetInterface{ctrl: ctrl}
	mock.recorder = &MockReplicaSetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplicaSetInterface) EXPECT() *MockReplicaSetInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReplicaSetInterface) Create(arg0 *v120.VirtualMachineInstanceReplicaSet) (*v120.VirtualMachineInstanceReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReplicaSetInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReplicaSetInterface)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockReplicaSetInterface) Delete(name string, options *v12.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReplicaSetInterfaceMockRecorder) Delete(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReplicaSetInterface)(nil).Delete), name, options)
}

// Get mocks base method.
func (m *MockReplicaSetInterface) Get(name string, options v12.GetOptions) (*v120.VirtualMachineInstanceReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, options)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReplicaSetInterfaceMockRecorder) Get(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReplicaSetInterface)(nil).Get), name, options)
}

// GetScale mocks base method.
func (m *MockReplicaSetInterface) GetScale(replicaSetName string, options v12.GetOptions) (*v11.Scale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScale", replicaSetName, options)
	ret0, _ := ret[0].(*v11.Scale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScale indicates an expected call of GetScale.
func (mr *MockReplicaSetInterfaceMockRecorder) GetScale(replicaSetName, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScale", reflect.TypeOf((*MockReplicaSetInterface)(nil).GetScale), replicaSetName, options)
}

// List mocks base method.
func (m *MockReplicaSetInterface) List(opts v12.ListOptions) (*v120.VirtualMachineInstanceReplicaSetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceReplicaSetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReplicaSetInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReplicaSetInterface)(nil).List), opts)
}

// Patch mocks base method.
func (m *MockReplicaSetInterface) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v120.VirtualMachineInstanceReplicaSet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, pt, data}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockReplicaSetInterfaceMockRecorder) Patch(name, pt, data interface{}, subresources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, pt, data}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockReplicaSetInterface)(nil).Patch), varargs...)
}

// PatchStatus mocks base method.
func (m *MockReplicaSetInterface) PatchStatus(name string, pt types.PatchType, data []byte) (*v120.VirtualMachineInstanceReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus", name, pt, data)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockReplicaSetInterfaceMockRecorder) PatchStatus(name, pt, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockReplicaSetInterface)(nil).PatchStatus), name, pt, data)
}

// Update mocks base method.
func (m *MockReplicaSetInterface) Update(arg0 *v120.VirtualMachineInstanceReplicaSet) (*v120.VirtualMachineInstanceReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockReplicaSetInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReplicaSetInterface)(nil).Update), arg0)
}

// UpdateScale mocks base method.
func (m *MockReplicaSetInterface) UpdateScale(replicaSetName string, scale *v11.Scale) (*v11.Scale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScale", replicaSetName, scale)
	ret0, _ := ret[0].(*v11.Scale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScale indicates an expected call of UpdateScale.
func (mr *MockReplicaSetInterfaceMockRecorder) UpdateScale(replicaSetName, scale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScale", reflect.TypeOf((*MockReplicaSetInterface)(nil).UpdateScale), replicaSetName, scale)
}

// UpdateStatus mocks base method.
func (m *MockReplicaSetInterface) UpdateStatus(arg0 *v120.VirtualMachineInstanceReplicaSet) (*v120.VirtualMachineInstanceReplicaSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceReplicaSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockReplicaSetInterfaceMockRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockReplicaSetInterface)(nil).UpdateStatus), arg0)
}

// MockVirtualMachineInstancePresetInterface is a mock of VirtualMachineInstancePresetInterface interface.
type MockVirtualMachineInstancePresetInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineInstancePresetInterfaceMockRecorder
}

// MockVirtualMachineInstancePresetInterfaceMockRecorder is the mock recorder for MockVirtualMachineInstancePresetInterface.
type MockVirtualMachineInstancePresetInterfaceMockRecorder struct {
	mock *MockVirtualMachineInstancePresetInterface
}

// NewMockVirtualMachineInstancePresetInterface creates a new mock instance.
func NewMockVirtualMachineInstancePresetInterface(ctrl *gomock.Controller) *MockVirtualMachineInstancePresetInterface {
	mock := &MockVirtualMachineInstancePresetInterface{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineInstancePresetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineInstancePresetInterface) EXPECT() *MockVirtualMachineInstancePresetInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVirtualMachineInstancePresetInterface) Create(arg0 *v120.VirtualMachineInstancePreset) (*v120.VirtualMachineInstancePreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v120.VirtualMachineInstancePreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVirtualMachineInstancePresetInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVirtualMachineInstancePresetInterface)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockVirtualMachineInstancePresetInterface) Delete(name string, options *v12.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineInstancePresetInterfaceMockRecorder) Delete(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineInstancePresetInterface)(nil).Delete), name, options)
}

// Get mocks base method.
func (m *MockVirtualMachineInstancePresetInterface) Get(name string, options v12.GetOptions) (*v120.VirtualMachineInstancePreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, options)
	ret0, _ := ret[0].(*v120.VirtualMachineInstancePreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineInstancePresetInterfaceMockRecorder) Get(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineInstancePresetInterface)(nil).Get), name, options)
}

// List mocks base method.
func (m *MockVirtualMachineInstancePresetInterface) List(opts v12.ListOptions) (*v120.VirtualMachineInstancePresetList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v120.VirtualMachineInstancePresetList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineInstancePresetInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineInstancePresetInterface)(nil).List), opts)
}

// Patch mocks base method.
func (m *MockVirtualMachineInstancePresetInterface) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v120.VirtualMachineInstancePreset, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, pt, data}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v120.VirtualMachineInstancePreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockVirtualMachineInstancePresetInterfaceMockRecorder) Patch(name, pt, data interface{}, subresources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, pt, data}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockVirtualMachineInstancePresetInterface)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockVirtualMachineInstancePresetInterface) Update(arg0 *v120.VirtualMachineInstancePreset) (*v120.VirtualMachineInstancePreset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v120.VirtualMachineInstancePreset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineInstancePresetInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineInstancePresetInterface)(nil).Update), arg0)
}

// MockVirtualMachineInterface is a mock of VirtualMachineInterface interface.
type MockVirtualMachineInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineInterfaceMockRecorder
}

// MockVirtualMachineInterfaceMockRecorder is the mock recorder for MockVirtualMachineInterface.
type MockVirtualMachineInterfaceMockRecorder struct {
	mock *MockVirtualMachineInterface
}

// NewMockVirtualMachineInterface creates a new mock instance.
func NewMockVirtualMachineInterface(ctrl *gomock.Controller) *MockVirtualMachineInterface {
	mock := &MockVirtualMachineInterface{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineInterface) EXPECT() *MockVirtualMachineInterfaceMockRecorder {
	return m.recorder
}

// AddInterface mocks base method.
func (m *MockVirtualMachineInterface) AddInterface(ctx context.Context, name string, addInterfaceOptions *v120.AddInterfaceOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInterface", ctx, name, addInterfaceOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInterface indicates an expected call of AddInterface.
func (mr *MockVirtualMachineInterfaceMockRecorder) AddInterface(ctx, name, addInterfaceOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInterface", reflect.TypeOf((*MockVirtualMachineInterface)(nil).AddInterface), ctx, name, addInterfaceOptions)
}

// AddVolume mocks base method.
func (m *MockVirtualMachineInterface) AddVolume(ctx context.Context, name string, addVolumeOptions *v120.AddVolumeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolume", ctx, name, addVolumeOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVolume indicates an expected call of AddVolume.
func (mr *MockVirtualMachineInterfaceMockRecorder) AddVolume(ctx, name, addVolumeOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolume", reflect.TypeOf((*MockVirtualMachineInterface)(nil).AddVolume), ctx, name, addVolumeOptions)
}

// Create mocks base method.
func (m *MockVirtualMachineInterface) Create(ctx context.Context, vm *v120.VirtualMachine) (*v120.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, vm)
	ret0, _ := ret[0].(*v120.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVirtualMachineInterfaceMockRecorder) Create(ctx, vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Create), ctx, vm)
}

// Delete mocks base method.
func (m *MockVirtualMachineInterface) Delete(ctx context.Context, name string, options *v12.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineInterfaceMockRecorder) Delete(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Delete), ctx, name, options)
}

// ForceRestart mocks base method.
func (m *MockVirtualMachineInterface) ForceRestart(ctx context.Context, name string, restartOptions *v120.RestartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceRestart", ctx, name, restartOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceRestart indicates an expected call of ForceRestart.
func (mr *MockVirtualMachineInterfaceMockRecorder) ForceRestart(ctx, name, restartOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceRestart", reflect.TypeOf((*MockVirtualMachineInterface)(nil).ForceRestart), ctx, name, restartOptions)
}

// ForceStop mocks base method.
func (m *MockVirtualMachineInterface) ForceStop(ctx context.Context, name string, stopOptions *v120.StopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceStop", ctx, name, stopOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceStop indicates an expected call of ForceStop.
func (mr *MockVirtualMachineInterfaceMockRecorder) ForceStop(ctx, name, stopOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceStop", reflect.TypeOf((*MockVirtualMachineInterface)(nil).ForceStop), ctx, name, stopOptions)
}

// Get mocks base method.
func (m *MockVirtualMachineInterface) Get(ctx context.Context, name string, options *v12.GetOptions) (*v120.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, options)
	ret0, _ := ret[0].(*v120.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineInterfaceMockRecorder) Get(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Get), ctx, name, options)
}

// GetWithExpandedSpec mocks base method.
func (m *MockVirtualMachineInterface) GetWithExpandedSpec(ctx context.Context, name string) (*v120.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithExpandedSpec", ctx, name)
	ret0, _ := ret[0].(*v120.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithExpandedSpec indicates an expected call of GetWithExpandedSpec.
func (mr *MockVirtualMachineInterfaceMockRecorder) GetWithExpandedSpec(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithExpandedSpec", reflect.TypeOf((*MockVirtualMachineInterface)(nil).GetWithExpandedSpec), ctx, name)
}

// List mocks base method.
func (m *MockVirtualMachineInterface) List(ctx context.Context, opts *v12.ListOptions) (*v120.VirtualMachineList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].(*v120.VirtualMachineList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineInterfaceMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineInterface)(nil).List), ctx, opts)
}

// MemoryDump mocks base method.
func (m *MockVirtualMachineInterface) MemoryDump(ctx context.Context, name string, memoryDumpRequest *v120.VirtualMachineMemoryDumpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemoryDump", ctx, name, memoryDumpRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemoryDump indicates an expected call of MemoryDump.
func (mr *MockVirtualMachineInterfaceMockRecorder) MemoryDump(ctx, name, memoryDumpRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryDump", reflect.TypeOf((*MockVirtualMachineInterface)(nil).MemoryDump), ctx, name, memoryDumpRequest)
}

// Migrate mocks base method.
func (m *MockVirtualMachineInterface) Migrate(ctx context.Context, name string, migrateOptions *v120.MigrateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx, name, migrateOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockVirtualMachineInterfaceMockRecorder) Migrate(ctx, name, migrateOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Migrate), ctx, name, migrateOptions)
}

// Patch mocks base method.
func (m *MockVirtualMachineInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, patchOptions *v12.PatchOptions, subresources ...string) (*v120.VirtualMachine, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name, pt, data, patchOptions}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v120.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockVirtualMachineInterfaceMockRecorder) Patch(ctx, name, pt, data, patchOptions interface{}, subresources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name, pt, data, patchOptions}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Patch), varargs...)
}

// PatchStatus mocks base method.
func (m *MockVirtualMachineInterface) PatchStatus(ctx context.Context, name string, pt types.PatchType, data []byte, patchOptions *v12.PatchOptions) (*v120.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus", ctx, name, pt, data, patchOptions)
	ret0, _ := ret[0].(*v120.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockVirtualMachineInterfaceMockRecorder) PatchStatus(ctx, name, pt, data, patchOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockVirtualMachineInterface)(nil).PatchStatus), ctx, name, pt, data, patchOptions)
}

// PortForward mocks base method.
func (m *MockVirtualMachineInterface) PortForward(name string, port int, protocol string) (StreamInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortForward", name, port, protocol)
	ret0, _ := ret[0].(StreamInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortForward indicates an expected call of PortForward.
func (mr *MockVirtualMachineInterfaceMockRecorder) PortForward(name, port, protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortForward", reflect.TypeOf((*MockVirtualMachineInterface)(nil).PortForward), name, port, protocol)
}

// RemoveMemoryDump mocks base method.
func (m *MockVirtualMachineInterface) RemoveMemoryDump(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMemoryDump", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMemoryDump indicates an expected call of RemoveMemoryDump.
func (mr *MockVirtualMachineInterfaceMockRecorder) RemoveMemoryDump(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMemoryDump", reflect.TypeOf((*MockVirtualMachineInterface)(nil).RemoveMemoryDump), ctx, name)
}

// RemoveVolume mocks base method.
func (m *MockVirtualMachineInterface) RemoveVolume(ctx context.Context, name string, removeVolumeOptions *v120.RemoveVolumeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolume", ctx, name, removeVolumeOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolume indicates an expected call of RemoveVolume.
func (mr *MockVirtualMachineInterfaceMockRecorder) RemoveVolume(ctx, name, removeVolumeOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolume", reflect.TypeOf((*MockVirtualMachineInterface)(nil).RemoveVolume), ctx, name, removeVolumeOptions)
}

// Restart mocks base method.
func (m *MockVirtualMachineInterface) Restart(ctx context.Context, name string, restartOptions *v120.RestartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", ctx, name, restartOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart.
func (mr *MockVirtualMachineInterfaceMockRecorder) Restart(ctx, name, restartOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Restart), ctx, name, restartOptions)
}

// Start mocks base method.
func (m *MockVirtualMachineInterface) Start(ctx context.Context, name string, startOptions *v120.StartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, name, startOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockVirtualMachineInterfaceMockRecorder) Start(ctx, name, startOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Start), ctx, name, startOptions)
}

// Stop mocks base method.
func (m *MockVirtualMachineInterface) Stop(ctx context.Context, name string, stopOptions *v120.StopOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, name, stopOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockVirtualMachineInterfaceMockRecorder) Stop(ctx, name, stopOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Stop), ctx, name, stopOptions)
}

// Update mocks base method.
func (m *MockVirtualMachineInterface) Update(ctx context.Context, vm *v120.VirtualMachine) (*v120.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, vm)
	ret0, _ := ret[0].(*v120.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineInterfaceMockRecorder) Update(ctx, vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineInterface)(nil).Update), ctx, vm)
}

// UpdateStatus mocks base method.
func (m *MockVirtualMachineInterface) UpdateStatus(ctx context.Context, vm *v120.VirtualMachine) (*v120.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, vm)
	ret0, _ := ret[0].(*v120.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockVirtualMachineInterfaceMockRecorder) UpdateStatus(ctx, vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockVirtualMachineInterface)(nil).UpdateStatus), ctx, vm)
}

// MockVirtualMachineInstanceMigrationInterface is a mock of VirtualMachineInstanceMigrationInterface interface.
type MockVirtualMachineInstanceMigrationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualMachineInstanceMigrationInterfaceMockRecorder
}

// MockVirtualMachineInstanceMigrationInterfaceMockRecorder is the mock recorder for MockVirtualMachineInstanceMigrationInterface.
type MockVirtualMachineInstanceMigrationInterfaceMockRecorder struct {
	mock *MockVirtualMachineInstanceMigrationInterface
}

// NewMockVirtualMachineInstanceMigrationInterface creates a new mock instance.
func NewMockVirtualMachineInstanceMigrationInterface(ctrl *gomock.Controller) *MockVirtualMachineInstanceMigrationInterface {
	mock := &MockVirtualMachineInstanceMigrationInterface{ctrl: ctrl}
	mock.recorder = &MockVirtualMachineInstanceMigrationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualMachineInstanceMigrationInterface) EXPECT() *MockVirtualMachineInstanceMigrationInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVirtualMachineInstanceMigrationInterface) Create(migration *v120.VirtualMachineInstanceMigration, options *v12.CreateOptions) (*v120.VirtualMachineInstanceMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", migration, options)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVirtualMachineInstanceMigrationInterfaceMockRecorder) Create(migration, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVirtualMachineInstanceMigrationInterface)(nil).Create), migration, options)
}

// Delete mocks base method.
func (m *MockVirtualMachineInstanceMigrationInterface) Delete(name string, options *v12.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualMachineInstanceMigrationInterfaceMockRecorder) Delete(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualMachineInstanceMigrationInterface)(nil).Delete), name, options)
}

// Get mocks base method.
func (m *MockVirtualMachineInstanceMigrationInterface) Get(name string, options *v12.GetOptions) (*v120.VirtualMachineInstanceMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, options)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualMachineInstanceMigrationInterfaceMockRecorder) Get(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualMachineInstanceMigrationInterface)(nil).Get), name, options)
}

// List mocks base method.
func (m *MockVirtualMachineInstanceMigrationInterface) List(opts *v12.ListOptions) (*v120.VirtualMachineInstanceMigrationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceMigrationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualMachineInstanceMigrationInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualMachineInstanceMigrationInterface)(nil).List), opts)
}

// Patch mocks base method.
func (m *MockVirtualMachineInstanceMigrationInterface) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v120.VirtualMachineInstanceMigration, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, pt, data}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockVirtualMachineInstanceMigrationInterfaceMockRecorder) Patch(name, pt, data interface{}, subresources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, pt, data}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockVirtualMachineInstanceMigrationInterface)(nil).Patch), varargs...)
}

// PatchStatus mocks base method.
func (m *MockVirtualMachineInstanceMigrationInterface) PatchStatus(name string, pt types.PatchType, data []byte) (*v120.VirtualMachineInstanceMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus", name, pt, data)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockVirtualMachineInstanceMigrationInterfaceMockRecorder) PatchStatus(name, pt, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockVirtualMachineInstanceMigrationInterface)(nil).PatchStatus), name, pt, data)
}

// Update mocks base method.
func (m *MockVirtualMachineInstanceMigrationInterface) Update(arg0 *v120.VirtualMachineInstanceMigration) (*v120.VirtualMachineInstanceMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVirtualMachineInstanceMigrationInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVirtualMachineInstanceMigrationInterface)(nil).Update), arg0)
}

// UpdateStatus mocks base method.
func (m *MockVirtualMachineInstanceMigrationInterface) UpdateStatus(arg0 *v120.VirtualMachineInstanceMigration) (*v120.VirtualMachineInstanceMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0)
	ret0, _ := ret[0].(*v120.VirtualMachineInstanceMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockVirtualMachineInstanceMigrationInterfaceMockRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockVirtualMachineInstanceMigrationInterface)(nil).UpdateStatus), arg0)
}

// MockKubeVirtInterface is a mock of KubeVirtInterface interface.
type MockKubeVirtInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKubeVirtInterfaceMockRecorder
}

// MockKubeVirtInterfaceMockRecorder is the mock recorder for MockKubeVirtInterface.
type MockKubeVirtInterfaceMockRecorder struct {
	mock *MockKubeVirtInterface
}

// NewMockKubeVirtInterface creates a new mock instance.
func NewMockKubeVirtInterface(ctrl *gomock.Controller) *MockKubeVirtInterface {
	mock := &MockKubeVirtInterface{ctrl: ctrl}
	mock.recorder = &MockKubeVirtInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubeVirtInterface) EXPECT() *MockKubeVirtInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKubeVirtInterface) Create(instance *v120.KubeVirt) (*v120.KubeVirt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", instance)
	ret0, _ := ret[0].(*v120.KubeVirt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockKubeVirtInterfaceMockRecorder) Create(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKubeVirtInterface)(nil).Create), instance)
}

// Delete mocks base method.
func (m *MockKubeVirtInterface) Delete(name string, options *v12.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKubeVirtInterfaceMockRecorder) Delete(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKubeVirtInterface)(nil).Delete), name, options)
}

// Get mocks base method.
func (m *MockKubeVirtInterface) Get(name string, options *v12.GetOptions) (*v120.KubeVirt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, options)
	ret0, _ := ret[0].(*v120.KubeVirt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKubeVirtInterfaceMockRecorder) Get(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKubeVirtInterface)(nil).Get), name, options)
}

// List mocks base method.
func (m *MockKubeVirtInterface) List(opts *v12.ListOptions) (*v120.KubeVirtList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v120.KubeVirtList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKubeVirtInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKubeVirtInterface)(nil).List), opts)
}

// Patch mocks base method.
func (m *MockKubeVirtInterface) Patch(name string, pt types.PatchType, data []byte, patchOptions *v12.PatchOptions, subresources ...string) (*v120.KubeVirt, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, pt, data, patchOptions}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v120.KubeVirt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockKubeVirtInterfaceMockRecorder) Patch(name, pt, data, patchOptions interface{}, subresources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, pt, data, patchOptions}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockKubeVirtInterface)(nil).Patch), varargs...)
}

// PatchStatus mocks base method.
func (m *MockKubeVirtInterface) PatchStatus(name string, pt types.PatchType, data []byte, patchOptions *v12.PatchOptions) (*v120.KubeVirt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus", name, pt, data, patchOptions)
	ret0, _ := ret[0].(*v120.KubeVirt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockKubeVirtInterfaceMockRecorder) PatchStatus(name, pt, data, patchOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockKubeVirtInterface)(nil).PatchStatus), name, pt, data, patchOptions)
}

// Update mocks base method.
func (m *MockKubeVirtInterface) Update(arg0 *v120.KubeVirt) (*v120.KubeVirt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v120.KubeVirt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockKubeVirtInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKubeVirtInterface)(nil).Update), arg0)
}

// UpdateStatus mocks base method.
func (m *MockKubeVirtInterface) UpdateStatus(arg0 *v120.KubeVirt) (*v120.KubeVirt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0)
	ret0, _ := ret[0].(*v120.KubeVirt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockKubeVirtInterfaceMockRecorder) UpdateStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockKubeVirtInterface)(nil).UpdateStatus), arg0)
}

// MockServerVersionInterface is a mock of ServerVersionInterface interface.
type MockServerVersionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerVersionInterfaceMockRecorder
}

// MockServerVersionInterfaceMockRecorder is the mock recorder for MockServerVersionInterface.
type MockServerVersionInterfaceMockRecorder struct {
	mock *MockServerVersionInterface
}

// NewMockServerVersionInterface creates a new mock instance.
func NewMockServerVersionInterface(ctrl *gomock.Controller) *MockServerVersionInterface {
	mock := &MockServerVersionInterface{ctrl: ctrl}
	mock.recorder = &MockServerVersionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerVersionInterface) EXPECT() *MockServerVersionInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServerVersionInterface) Get() (*version.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*version.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServerVersionInterfaceMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerVersionInterface)(nil).Get))
}

// MockExpandSpecInterface is a mock of ExpandSpecInterface interface.
type MockExpandSpecInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExpandSpecInterfaceMockRecorder
}

// MockExpandSpecInterfaceMockRecorder is the mock recorder for MockExpandSpecInterface.
type MockExpandSpecInterfaceMockRecorder struct {
	mock *MockExpandSpecInterface
}

// NewMockExpandSpecInterface creates a new mock instance.
func NewMockExpandSpecInterface(ctrl *gomock.Controller) *MockExpandSpecInterface {
	mock := &MockExpandSpecInterface{ctrl: ctrl}
	mock.recorder = &MockExpandSpecInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpandSpecInterface) EXPECT() *MockExpandSpecInterfaceMockRecorder {
	return m.recorder
}

// ForVirtualMachine mocks base method.
func (m *MockExpandSpecInterface) ForVirtualMachine(vm *v120.VirtualMachine) (*v120.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForVirtualMachine", vm)
	ret0, _ := ret[0].(*v120.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForVirtualMachine indicates an expected call of ForVirtualMachine.
func (mr *MockExpandSpecInterfaceMockRecorder) ForVirtualMachine(vm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForVirtualMachine", reflect.TypeOf((*MockExpandSpecInterface)(nil).ForVirtualMachine), vm)
}
