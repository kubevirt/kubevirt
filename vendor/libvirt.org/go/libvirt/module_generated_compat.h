/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (C) 2021 Red Hat, Inc.
 *
 */


#include <stddef.h>
#include <libvirt/libvirt.h>
/* FIXME: lxc and qemu shoudl be conditional include too */
#include <libvirt/libvirt-lxc.h>
#include <libvirt/libvirt-qemu.h>
#include <libvirt/virterror.h>

#pragma once
/* enum virBlkioParameterType */
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_BLKIO_PARAM_INT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_BLKIO_PARAM_UINT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_BLKIO_PARAM_LLONG 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_BLKIO_PARAM_ULLONG 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_BLKIO_PARAM_DOUBLE 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_BLKIO_PARAM_BOOLEAN 0x6
#endif
/* enum virCPUCompareResult */
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_CPU_COMPARE_ERROR -0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_CPU_COMPARE_INCOMPATIBLE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_CPU_COMPARE_IDENTICAL 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_CPU_COMPARE_SUPERSET 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_CPU_COMPARE_LAST 0x3
#endif
/* enum virConnectBaselineCPUFlags */
#if !LIBVIR_CHECK_VERSION(1, 1, 2)
#  define VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_CONNECT_BASELINE_CPU_MIGRATABLE 0x2
#endif
/* enum virConnectCloseReason */
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_CONNECT_CLOSE_REASON_ERROR 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_CONNECT_CLOSE_REASON_EOF 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_CONNECT_CLOSE_REASON_KEEPALIVE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_CONNECT_CLOSE_REASON_CLIENT 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_CONNECT_CLOSE_REASON_LAST 0x4
#endif
/* enum virConnectCompareCPUFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
#  define VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_CONNECT_COMPARE_CPU_VALIDATE_XML 0x2
#endif
/* enum virConnectCredentialType */
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CRED_USERNAME 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CRED_AUTHNAME 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CRED_LANGUAGE 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CRED_CNONCE 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CRED_PASSPHRASE 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CRED_ECHOPROMPT 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CRED_NOECHOPROMPT 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CRED_REALM 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CRED_EXTERNAL 0x9
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_CRED_LAST 0xa
#endif
/* enum virConnectDomainEventAgentLifecycleReason */
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_DOMAIN_STARTED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_CHANNEL 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_LAST 0x3
#endif
/* enum virConnectDomainEventAgentLifecycleState */
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_CONNECTED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_DISCONNECTED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_LAST 0x3
#endif
/* enum virConnectDomainEventBlockJobStatus */
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DOMAIN_BLOCK_JOB_COMPLETED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DOMAIN_BLOCK_JOB_FAILED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_DOMAIN_BLOCK_JOB_CANCELED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#  define VIR_DOMAIN_BLOCK_JOB_READY 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_BLOCK_JOB_LAST 0x4
#endif
/* enum virConnectDomainEventDiskChangeReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 2)
#  define VIR_DOMAIN_EVENT_DISK_DROP_MISSING_ON_START 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_DISK_CHANGE_LAST 0x2
#endif
/* enum virConnectDomainQemuMonitorEventRegisterFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
#  define VIR_CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_REGEX 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
#  define VIR_CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_NOCASE 0x2
#endif
/* enum virConnectFlags */
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_CONNECT_RO 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_CONNECT_NO_ALIASES 0x2
#endif
/* enum virConnectGetAllDomainStatsFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING 0x10
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED 0x20
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT 0x20000000
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF 0x40
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 12)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_BACKING 0x40000000
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT 0x8
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER 0x80
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS 0x80000000
#endif
/* enum virConnectListAllDomainsFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_ACTIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_RUNNING 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE 0x100
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT 0x1000
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_INACTIVE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_PAUSED 0x20
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE 0x200
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT 0x2000
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_PERSISTENT 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_SHUTOFF 0x40
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_AUTOSTART 0x400
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_CONNECT_LIST_DOMAINS_HAS_CHECKPOINT 0x4000
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_TRANSIENT 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_OTHER 0x80
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART 0x800
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_CONNECT_LIST_DOMAINS_NO_CHECKPOINT 0x8000
#endif
/* enum virConnectListAllInterfacesFlags */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_INTERFACES_INACTIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_INTERFACES_ACTIVE 0x2
#endif
/* enum virConnectListAllNetworksFlags */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NETWORKS_INACTIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NETWORKS_AUTOSTART 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NETWORKS_ACTIVE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NETWORKS_NO_AUTOSTART 0x20
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NETWORKS_PERSISTENT 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NETWORKS_TRANSIENT 0x8
#endif
/* enum virConnectListAllNodeDeviceFlags */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_STORAGE 0x100
#endif
#if !LIBVIR_CHECK_VERSION(3, 1, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_DRM 0x1000
#endif
#if !LIBVIR_CHECK_VERSION(6, 8, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_CSS_DEV 0x10000
#endif
#if !LIBVIR_CHECK_VERSION(7, 0, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_AP_MATRIX 0x100000
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST 0x20
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 4)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST 0x200
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV_TYPES 0x2000
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_VDPA 0x20000
#endif
#if !LIBVIR_CHECK_VERSION(7, 9, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPD 0x200000
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET 0x40
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 4)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPORTS 0x400
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV 0x4000
#endif
#if !LIBVIR_CHECK_VERSION(7, 0, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_AP_CARD 0x40000
#endif
#if !LIBVIR_CHECK_VERSION(7, 3, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_INACTIVE 0x40000000
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI 0x80
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC 0x800
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_CCW_DEV 0x8000
#endif
#if !LIBVIR_CHECK_VERSION(7, 0, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_CAP_AP_QUEUE 0x80000
#endif
#if !LIBVIR_CHECK_VERSION(7, 3, 0)
#  define VIR_CONNECT_LIST_NODE_DEVICES_ACTIVE 0x80000000
#endif
/* enum virConnectListAllSecretsFlags */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_SECRETS_EPHEMERAL 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_SECRETS_NO_EPHEMERAL 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_SECRETS_PRIVATE 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_SECRETS_NO_PRIVATE 0x8
#endif
/* enum virConnectListAllStoragePoolsFlags */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_INACTIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_AUTOSTART 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_NETFS 0x100
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_SCSI 0x1000
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_GLUSTER 0x10000
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_ACTIVE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART 0x20
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_LOGICAL 0x200
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_MPATH 0x2000
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_ZFS 0x20000
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_PERSISTENT 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_DIR 0x40
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_DISK 0x400
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_RBD 0x4000
#endif
#if !LIBVIR_CHECK_VERSION(3, 1, 0)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_VSTORAGE 0x40000
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_TRANSIENT 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_FS 0x80
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI 0x800
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_SHEEPDOG 0x8000
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI_DIRECT 0x80000
#endif
/* enum virDomainAgentResponseTimeoutValues */
#if !LIBVIR_CHECK_VERSION(5, 10, 0)
#  define VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_DEFAULT -0x1
#endif
#if !LIBVIR_CHECK_VERSION(5, 10, 0)
#  define VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_BLOCK -0x2
#endif
#if !LIBVIR_CHECK_VERSION(5, 10, 0)
#  define VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_NOWAIT 0x0
#endif
/* enum virDomainAuthorizedSSHKeysSetFlags */
#if !LIBVIR_CHECK_VERSION(6, 10, 0)
#  define VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_APPEND 0x1
#endif
#if !LIBVIR_CHECK_VERSION(6, 10, 0)
#  define VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_REMOVE 0x2
#endif
/* enum virDomainBackupBeginFlags */
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
#  define VIR_DOMAIN_BACKUP_BEGIN_REUSE_EXTERNAL 0x1
#endif
/* enum virDomainBlockCommitFlags */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_DOMAIN_BLOCK_COMMIT_SHALLOW 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_DOMAIN_BLOCK_COMMIT_DELETE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
#  define VIR_DOMAIN_BLOCK_COMMIT_ACTIVE 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 7)
#  define VIR_DOMAIN_BLOCK_COMMIT_RELATIVE 0x8
#endif
/* enum virDomainBlockCopyFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_DOMAIN_BLOCK_COPY_SHALLOW 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_DOMAIN_BLOCK_COPY_REUSE_EXT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(3, 5, 0)
#  define VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB 0x4
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_DOMAIN_BLOCK_COPY_SYNCHRONOUS_WRITES 0x8
#endif
/* enum virDomainBlockJobAbortFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT 0x2
#endif
/* enum virDomainBlockJobInfoFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES 0x1
#endif
/* enum virDomainBlockJobSetSpeedFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES 0x1
#endif
/* enum virDomainBlockJobType */
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DOMAIN_BLOCK_JOB_TYPE_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DOMAIN_BLOCK_JOB_TYPE_PULL 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_DOMAIN_BLOCK_JOB_TYPE_COPY 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT 0x3
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
#  define VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT 0x4
#endif
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
#  define VIR_DOMAIN_BLOCK_JOB_TYPE_BACKUP 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_BLOCK_JOB_TYPE_LAST 0x6
#endif
/* enum virDomainBlockPullFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES 0x40
#endif
/* enum virDomainBlockRebaseFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_DOMAIN_BLOCK_REBASE_SHALLOW 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 7)
#  define VIR_DOMAIN_BLOCK_REBASE_RELATIVE 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_BLOCK_REBASE_COPY_DEV 0x20
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_DOMAIN_BLOCK_REBASE_COPY_RAW 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES 0x40
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_DOMAIN_BLOCK_REBASE_COPY 0x8
#endif
/* enum virDomainBlockResizeFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_BLOCK_RESIZE_BYTES 0x1
#endif
/* enum virDomainBlockedReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_BLOCKED_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_BLOCKED_LAST 0x1
#endif
/* enum virDomainChannelFlags */
#if !LIBVIR_CHECK_VERSION(1, 0, 2)
#  define VIR_DOMAIN_CHANNEL_FORCE 0x1
#endif
/* enum virDomainCheckpointCreateFlags */
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_CREATE_REDEFINE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_CREATE_QUIESCE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(6, 10, 0)
#  define VIR_DOMAIN_CHECKPOINT_CREATE_REDEFINE_VALIDATE 0x4
#endif
/* enum virDomainCheckpointDeleteFlags */
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN 0x1
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_DELETE_METADATA_ONLY 0x2
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN_ONLY 0x4
#endif
/* enum virDomainCheckpointListFlags */
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_LIST_DESCENDANTS 0x1
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_LIST_ROOTS 0x1
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_LIST_TOPOLOGICAL 0x2
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_LIST_LEAVES 0x4
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_LIST_NO_LEAVES 0x8
#endif
/* enum virDomainCheckpointXMLFlags */
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_XML_SECURE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_XML_NO_DOMAIN 0x2
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_CHECKPOINT_XML_SIZE 0x4
#endif
/* enum virDomainConsoleFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_CONSOLE_FORCE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_CONSOLE_SAFE 0x2
#endif
/* enum virDomainControlErrorReason */
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_CONTROL_ERROR_REASON_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_CONTROL_ERROR_REASON_UNKNOWN 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_CONTROL_ERROR_REASON_MONITOR 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_CONTROL_ERROR_REASON_INTERNAL 0x3
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_CONTROL_ERROR_REASON_LAST 0x4
#endif
/* enum virDomainControlState */
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_DOMAIN_CONTROL_OK 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_DOMAIN_CONTROL_JOB 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_DOMAIN_CONTROL_OCCUPIED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_DOMAIN_CONTROL_ERROR 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_CONTROL_LAST 0x4
#endif
/* enum virDomainCoreDumpFlags */
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_DUMP_CRASH 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_DUMP_MEMORY_ONLY 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_DUMP_LIVE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DUMP_BYPASS_CACHE 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DUMP_RESET 0x8
#endif
/* enum virDomainCoreDumpFormat */
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
#  define VIR_DOMAIN_CORE_DUMP_FORMAT_RAW 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
#  define VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
#  define VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
#  define VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY 0x3
#endif
#if !LIBVIR_CHECK_VERSION(7, 4, 0)
#  define VIR_DOMAIN_CORE_DUMP_FORMAT_WIN_DMP 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
#  define VIR_DOMAIN_CORE_DUMP_FORMAT_LAST 0x5
#endif
/* enum virDomainCrashedReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_CRASHED_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
#  define VIR_DOMAIN_CRASHED_PANICKED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_CRASHED_LAST 0x2
#endif
/* enum virDomainCreateFlags */
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
#  define VIR_DOMAIN_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 2)
#  define VIR_DOMAIN_START_PAUSED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 12)
#  define VIR_DOMAIN_START_VALIDATE 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_DOMAIN_START_AUTODESTROY 0x2
#endif
#if !LIBVIR_CHECK_VERSION(8, 1, 0)
#  define VIR_DOMAIN_START_RESET_NVRAM 0x20
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DOMAIN_START_BYPASS_CACHE 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_START_FORCE_BOOT 0x8
#endif
/* enum virDomainDefineFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 12)
#  define VIR_DOMAIN_DEFINE_VALIDATE 0x1
#endif
/* enum virDomainDestroyFlagsValues */
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_DESTROY_DEFAULT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_DESTROY_GRACEFUL 0x1
#endif
#if !LIBVIR_CHECK_VERSION(8, 3, 0)
#  define VIR_DOMAIN_DESTROY_REMOVE_LOGS 0x2
#endif
/* enum virDomainDeviceModifyFlags */
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
#  define VIR_DOMAIN_DEVICE_MODIFY_CURRENT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
#  define VIR_DOMAIN_DEVICE_MODIFY_LIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
#  define VIR_DOMAIN_DEVICE_MODIFY_CONFIG 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 6)
#  define VIR_DOMAIN_DEVICE_MODIFY_FORCE 0x4
#endif
/* enum virDomainDirtyRateCalcFlags */
#if !LIBVIR_CHECK_VERSION(8, 1, 0)
#  define VIR_DOMAIN_DIRTYRATE_MODE_PAGE_SAMPLING 0x0
#endif
#if !LIBVIR_CHECK_VERSION(8, 1, 0)
#  define VIR_DOMAIN_DIRTYRATE_MODE_DIRTY_BITMAP 0x1
#endif
#if !LIBVIR_CHECK_VERSION(8, 1, 0)
#  define VIR_DOMAIN_DIRTYRATE_MODE_DIRTY_RING 0x2
#endif
/* enum virDomainDirtyRateStatus */
#if !LIBVIR_CHECK_VERSION(7, 2, 0)
#  define VIR_DOMAIN_DIRTYRATE_UNSTARTED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(7, 2, 0)
#  define VIR_DOMAIN_DIRTYRATE_MEASURING 0x1
#endif
#if !LIBVIR_CHECK_VERSION(7, 2, 0)
#  define VIR_DOMAIN_DIRTYRATE_MEASURED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(7, 2, 0)
#  define VIR_DOMAIN_DIRTYRATE_LAST 0x3
#endif
/* enum virDomainDiskErrorCode */
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_DISK_ERROR_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_DISK_ERROR_UNSPEC 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_DISK_ERROR_NO_SPACE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_DISK_ERROR_LAST 0x3
#endif
/* enum virDomainEventCrashedDetailType */
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
#  define VIR_DOMAIN_EVENT_CRASHED_PANICKED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(6, 1, 0)
#  define VIR_DOMAIN_EVENT_CRASHED_CRASHLOADED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
#  define VIR_DOMAIN_EVENT_CRASHED_LAST 0x2
#endif
/* enum virDomainEventDefinedDetailType */
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_DEFINED_ADDED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_DEFINED_UPDATED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 19)
#  define VIR_DOMAIN_EVENT_DEFINED_RENAMED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_EVENT_DEFINED_FROM_SNAPSHOT 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_DEFINED_LAST 0x4
#endif
/* enum virDomainEventGraphicsAddressType */
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_LAST 0x3
#endif
/* enum virDomainEventGraphicsPhase */
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_GRAPHICS_CONNECT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_GRAPHICS_LAST 0x3
#endif
/* enum virDomainEventID */
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_ID_LIFECYCLE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_ID_REBOOT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
#  define VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2 0x10
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_EVENT_ID_TUNABLE 0x11
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE 0x12
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 15)
#  define VIR_DOMAIN_EVENT_ID_DEVICE_ADDED 0x13
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 2)
#  define VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION 0x14
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_EVENT_ID_JOB_COMPLETED 0x15
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 4)
#  define VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED 0x16
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_DOMAIN_EVENT_ID_METADATA_CHANGE 0x17
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD 0x18
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_EVENT_ID_MEMORY_FAILURE 0x19
#endif
#if !LIBVIR_CHECK_VERSION(7, 9, 0)
#  define VIR_DOMAIN_EVENT_ID_MEMORY_DEVICE_SIZE_CHANGE 0x1a
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_ID_LAST 0x1b
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_ID_RTC_CHANGE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_ID_WATCHDOG 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_ID_IO_ERROR 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_ID_GRAPHICS 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 1)
#  define VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_EVENT_ID_CONTROL_ERROR 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DOMAIN_EVENT_ID_BLOCK_JOB 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_EVENT_ID_DISK_CHANGE 0x9
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_EVENT_ID_TRAY_CHANGE 0xa
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_EVENT_ID_PMWAKEUP 0xb
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_EVENT_ID_PMSUSPEND 0xc
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE 0xd
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#  define VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK 0xe
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
#  define VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED 0xf
#endif
/* enum virDomainEventIOErrorAction */
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_IO_ERROR_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_IO_ERROR_PAUSE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_IO_ERROR_REPORT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_IO_ERROR_LAST 0x3
#endif
/* enum virDomainEventPMSuspendedDetailType */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_DOMAIN_EVENT_PMSUSPENDED_MEMORY 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#  define VIR_DOMAIN_EVENT_PMSUSPENDED_DISK 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_DOMAIN_EVENT_PMSUSPENDED_LAST 0x2
#endif
/* enum virDomainEventResumedDetailType */
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_RESUMED_UNPAUSED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_RESUMED_MIGRATED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_EVENT_RESUMED_POSTCOPY 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_RESUMED_LAST 0x4
#endif
/* enum virDomainEventShutdownDetailType */
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_DOMAIN_EVENT_SHUTDOWN_FINISHED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
#  define VIR_DOMAIN_EVENT_SHUTDOWN_GUEST 0x1
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
#  define VIR_DOMAIN_EVENT_SHUTDOWN_HOST 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_SHUTDOWN_LAST 0x3
#endif
/* enum virDomainEventStartedDetailType */
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STARTED_BOOTED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STARTED_MIGRATED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STARTED_RESTORED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_STARTED_FROM_SNAPSHOT 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_EVENT_STARTED_WAKEUP 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_STARTED_LAST 0x5
#endif
/* enum virDomainEventStoppedDetailType */
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STOPPED_SHUTDOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STOPPED_DESTROYED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STOPPED_CRASHED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STOPPED_MIGRATED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STOPPED_SAVED 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STOPPED_FAILED 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_STOPPED_LAST 0x7
#endif
/* enum virDomainEventSuspendedDetailType */
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_SUSPENDED_PAUSED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_SUSPENDED_IOERROR 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_SUSPENDED_WATCHDOG 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_EVENT_SUSPENDED_RESTORED 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT 0x5
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_EVENT_SUSPENDED_API_ERROR 0x6
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY 0x7
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_SUSPENDED_LAST 0x9
#endif
/* enum virDomainEventTrayChangeReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_EVENT_TRAY_CHANGE_LAST 0x2
#endif
/* enum virDomainEventType */
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_DEFINED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_UNDEFINED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STARTED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_SUSPENDED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_RESUMED 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_STOPPED 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_DOMAIN_EVENT_SHUTDOWN 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_DOMAIN_EVENT_PMSUSPENDED 0x7
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
#  define VIR_DOMAIN_EVENT_CRASHED 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_LAST 0x9
#endif
/* enum virDomainEventUndefinedDetailType */
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_DOMAIN_EVENT_UNDEFINED_REMOVED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 19)
#  define VIR_DOMAIN_EVENT_UNDEFINED_RENAMED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_UNDEFINED_LAST 0x2
#endif
/* enum virDomainEventWatchdogAction */
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_WATCHDOG_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_WATCHDOG_PAUSE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_WATCHDOG_RESET 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_WATCHDOG_POWEROFF 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_EVENT_WATCHDOG_DEBUG 0x5
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 17)
#  define VIR_DOMAIN_EVENT_WATCHDOG_INJECTNMI 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_EVENT_WATCHDOG_LAST 0x7
#endif
/* enum virDomainGetHostnameFlags */
#if !LIBVIR_CHECK_VERSION(6, 1, 0)
#  define VIR_DOMAIN_GET_HOSTNAME_LEASE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(6, 1, 0)
#  define VIR_DOMAIN_GET_HOSTNAME_AGENT 0x2
#endif
/* enum virDomainGetJobStatsFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_JOB_STATS_COMPLETED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
#  define VIR_DOMAIN_JOB_STATS_KEEP_COMPLETED 0x2
#endif
/* enum virDomainGuestInfoTypes */
#if !LIBVIR_CHECK_VERSION(5, 7, 0)
#  define VIR_DOMAIN_GUEST_INFO_USERS 0x1
#endif
#if !LIBVIR_CHECK_VERSION(5, 7, 0)
#  define VIR_DOMAIN_GUEST_INFO_FILESYSTEM 0x10
#endif
#if !LIBVIR_CHECK_VERSION(5, 7, 0)
#  define VIR_DOMAIN_GUEST_INFO_OS 0x2
#endif
#if !LIBVIR_CHECK_VERSION(7, 0, 0)
#  define VIR_DOMAIN_GUEST_INFO_DISKS 0x20
#endif
#if !LIBVIR_CHECK_VERSION(5, 7, 0)
#  define VIR_DOMAIN_GUEST_INFO_TIMEZONE 0x4
#endif
#if !LIBVIR_CHECK_VERSION(7, 10, 0)
#  define VIR_DOMAIN_GUEST_INFO_INTERFACES 0x40
#endif
#if !LIBVIR_CHECK_VERSION(5, 7, 0)
#  define VIR_DOMAIN_GUEST_INFO_HOSTNAME 0x8
#endif
/* enum virDomainInterfaceAddressesSource */
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(4, 2, 0)
#  define VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LAST 0x3
#endif
/* enum virDomainJobOperation */
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_START 0x1
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_SAVE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_RESTORE 0x3
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_MIGRATION_IN 0x4
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_MIGRATION_OUT 0x5
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_SNAPSHOT 0x6
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_SNAPSHOT_REVERT 0x7
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_DUMP 0x8
#endif
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
#  define VIR_DOMAIN_JOB_OPERATION_BACKUP 0x9
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION_LAST 0xa
#endif
/* enum virDomainJobType */
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
#  define VIR_DOMAIN_JOB_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
#  define VIR_DOMAIN_JOB_BOUNDED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
#  define VIR_DOMAIN_JOB_UNBOUNDED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
#  define VIR_DOMAIN_JOB_COMPLETED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
#  define VIR_DOMAIN_JOB_FAILED 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
#  define VIR_DOMAIN_JOB_CANCELLED 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_JOB_LAST 0x6
#endif
/* enum virDomainLifecycle */
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_POWEROFF 0x0
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_REBOOT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_CRASH 0x2
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_LAST 0x3
#endif
/* enum virDomainLifecycleAction */
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_ACTION_DESTROY 0x0
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_ACTION_RESTART 0x1
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_ACTION_RESTART_RENAME 0x2
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_ACTION_PRESERVE 0x3
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_DESTROY 0x4
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_RESTART 0x5
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_LIFECYCLE_ACTION_LAST 0x6
#endif
/* enum virDomainMemoryFailureActionType */
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_IGNORE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_INJECT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_FATAL 0x2
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_RESET 0x3
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_LAST 0x4
#endif
/* enum virDomainMemoryFailureFlags */
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_MEMORY_FAILURE_ACTION_REQUIRED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_MEMORY_FAILURE_RECURSIVE 0x2
#endif
/* enum virDomainMemoryFailureRecipientType */
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_HYPERVISOR 0x0
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_GUEST 0x1
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
#  define VIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_LAST 0x2
#endif
/* enum virDomainMemoryFlags */
#if !LIBVIR_CHECK_VERSION(0, 4, 4)
#  define VIR_MEMORY_VIRTUAL 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 0)
#  define VIR_MEMORY_PHYSICAL 0x2
#endif
/* enum virDomainMemoryModFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 1)
#  define VIR_DOMAIN_MEM_CURRENT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_MEM_LIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_MEM_CONFIG 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 1)
#  define VIR_DOMAIN_MEM_MAXIMUM 0x4
#endif
/* enum virDomainMemoryStatTags */
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_DOMAIN_MEMORY_STAT_SWAP_IN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_DOMAIN_MEMORY_STAT_SWAP_OUT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_DOMAIN_MEMORY_STAT_UNUSED 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_DOMAIN_MEMORY_STAT_AVAILABLE 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_MEMORY_STAT_RSS 0x7
#endif
#if !LIBVIR_CHECK_VERSION(2, 1, 0)
#  define VIR_DOMAIN_MEMORY_STAT_USABLE 0x8
#endif
#if !LIBVIR_CHECK_VERSION(2, 1, 0)
#  define VIR_DOMAIN_MEMORY_STAT_LAST_UPDATE 0x9
#endif
#if !LIBVIR_CHECK_VERSION(4, 6, 0)
#  define VIR_DOMAIN_MEMORY_STAT_DISK_CACHES 0xa
#endif
#if !LIBVIR_CHECK_VERSION(5, 4, 0)
#  define VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGALLOC 0xb
#endif
#if !LIBVIR_CHECK_VERSION(5, 4, 0)
#  define VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGFAIL 0xc
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_MEMORY_STAT_LAST 0xd
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_DOMAIN_MEMORY_STAT_NR 0xd
#endif
/* enum virDomainMessageType */
#if !LIBVIR_CHECK_VERSION(7, 1, 0)
#  define VIR_DOMAIN_MESSAGE_DEPRECATION 0x1
#endif
#if !LIBVIR_CHECK_VERSION(7, 1, 0)
#  define VIR_DOMAIN_MESSAGE_TAINTING 0x2
#endif
/* enum virDomainMetadataType */
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_METADATA_DESCRIPTION 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_METADATA_TITLE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_METADATA_ELEMENT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_METADATA_LAST 0x3
#endif
/* enum virDomainMigrateFlags */
#if !LIBVIR_CHECK_VERSION(0, 3, 2)
#  define VIR_MIGRATE_LIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 3)
#  define VIR_MIGRATE_UNDEFINE_SOURCE 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_MIGRATE_CHANGE_PROTECTION 0x100
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_MIGRATE_ABORT_ON_ERROR 0x1000
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_MIGRATE_TLS 0x10000
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
#  define VIR_MIGRATE_PEER2PEER 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_MIGRATE_PAUSED 0x20
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_MIGRATE_UNSAFE 0x200
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
#  define VIR_MIGRATE_AUTO_CONVERGE 0x2000
#endif
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
#  define VIR_MIGRATE_PARALLEL 0x20000
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
#  define VIR_MIGRATE_TUNNELLED 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 2)
#  define VIR_MIGRATE_NON_SHARED_DISK 0x40
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_MIGRATE_OFFLINE 0x400
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_MIGRATE_RDMA_PIN_ALL 0x4000
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_MIGRATE_NON_SHARED_SYNCHRONOUS_WRITES 0x40000
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 3)
#  define VIR_MIGRATE_PERSIST_DEST 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 2)
#  define VIR_MIGRATE_NON_SHARED_INC 0x80
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_MIGRATE_COMPRESSED 0x800
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_MIGRATE_POSTCOPY 0x8000
#endif
/* enum virDomainMigrateMaxSpeedFlags */
#if !LIBVIR_CHECK_VERSION(5, 1, 0)
#  define VIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY 0x1
#endif
/* enum virDomainModificationImpact */
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_AFFECT_CURRENT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_AFFECT_LIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_AFFECT_CONFIG 0x2
#endif
/* enum virDomainNostateReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_NOSTATE_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_NOSTATE_LAST 0x1
#endif
/* enum virDomainNumatuneMemMode */
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_NUMATUNE_MEM_STRICT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_NUMATUNE_MEM_PREFERRED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_NUMATUNE_MEM_INTERLEAVE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(7, 3, 0)
#  define VIR_DOMAIN_NUMATUNE_MEM_RESTRICTIVE 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_NUMATUNE_MEM_LAST 0x4
#endif
/* enum virDomainOpenGraphicsFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH 0x1
#endif
/* enum virDomainPMSuspendedDiskReason */
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#  define VIR_DOMAIN_PMSUSPENDED_DISK_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#  define VIR_DOMAIN_PMSUSPENDED_DISK_LAST 0x1
#endif
/* enum virDomainPMSuspendedReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_PMSUSPENDED_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_PMSUSPENDED_LAST 0x1
#endif
/* enum virDomainPausedReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_PAUSED_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_PAUSED_USER 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_PAUSED_MIGRATION 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_PAUSED_SAVE 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_PAUSED_DUMP 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_PAUSED_IOERROR 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_PAUSED_WATCHDOG 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_PAUSED_FROM_SNAPSHOT 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_PAUSED_SHUTTING_DOWN 0x8
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PAUSED_SNAPSHOT 0x9
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
#  define VIR_DOMAIN_PAUSED_CRASHED 0xa
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_PAUSED_STARTING_UP 0xb
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_PAUSED_POSTCOPY 0xc
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_PAUSED_POSTCOPY_FAILED 0xd
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_PAUSED_LAST 0xe
#endif
/* enum virDomainProcessSignal */
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_NOP 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_HUP 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_STKFLT 0x10
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_CHLD 0x11
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_CONT 0x12
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_STOP 0x13
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_TSTP 0x14
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_TTIN 0x15
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_TTOU 0x16
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_URG 0x17
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_XCPU 0x18
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_XFSZ 0x19
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_VTALRM 0x1a
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_PROF 0x1b
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_WINCH 0x1c
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_POLL 0x1d
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_PWR 0x1e
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_SYS 0x1f
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_INT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT0 0x20
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT1 0x21
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT2 0x22
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT3 0x23
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT4 0x24
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT5 0x25
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT6 0x26
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT7 0x27
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT8 0x28
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT9 0x29
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT10 0x2a
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT11 0x2b
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT12 0x2c
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT13 0x2d
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT14 0x2e
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT15 0x2f
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_QUIT 0x3
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT16 0x30
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT17 0x31
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT18 0x32
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT19 0x33
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT20 0x34
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT21 0x35
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT22 0x36
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT23 0x37
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT24 0x38
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT25 0x39
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT26 0x3a
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT27 0x3b
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT28 0x3c
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT29 0x3d
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT30 0x3e
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT31 0x3f
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_ILL 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_RT32 0x40
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_LAST 0x41
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_TRAP 0x5
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_ABRT 0x6
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_BUS 0x7
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_FPE 0x8
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_KILL 0x9
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_USR1 0xa
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_SEGV 0xb
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_USR2 0xc
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_PIPE 0xd
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_ALRM 0xe
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_PROCESS_SIGNAL_TERM 0xf
#endif
/* enum virDomainQemuAgentCommandTimeoutValues */
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_DOMAIN_QEMU_AGENT_COMMAND_DEFAULT -0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_DOMAIN_QEMU_AGENT_COMMAND_BLOCK -0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_DOMAIN_QEMU_AGENT_COMMAND_MIN -0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_DOMAIN_QEMU_AGENT_COMMAND_NOWAIT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 15)
#  define VIR_DOMAIN_QEMU_AGENT_COMMAND_SHUTDOWN 0x3c
#endif
/* enum virDomainQemuMonitorCommandFlags */
#if !LIBVIR_CHECK_VERSION(0, 8, 8)
#  define VIR_DOMAIN_QEMU_MONITOR_COMMAND_DEFAULT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 8)
#  define VIR_DOMAIN_QEMU_MONITOR_COMMAND_HMP 0x1
#endif
/* enum virDomainRebootFlagValues */
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_REBOOT_DEFAULT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_REBOOT_ACPI_POWER_BTN 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 5)
#  define VIR_DOMAIN_REBOOT_PARAVIRT 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_REBOOT_GUEST_AGENT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_REBOOT_INITCTL 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_REBOOT_SIGNAL 0x8
#endif
/* enum virDomainRunningReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_RUNNING_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_RUNNING_BOOTED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_RUNNING_MIGRATED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_RUNNING_RESTORED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_RUNNING_FROM_SNAPSHOT 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_RUNNING_UNPAUSED 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_RUNNING_MIGRATION_CANCELED 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_RUNNING_SAVE_CANCELED 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_RUNNING_WAKEUP 0x8
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
#  define VIR_DOMAIN_RUNNING_CRASHED 0x9
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_RUNNING_POSTCOPY 0xa
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_RUNNING_LAST 0xb
#endif
/* enum virDomainSaveImageXMLFlags */
#if !LIBVIR_CHECK_VERSION(5, 1, 0)
#  define VIR_DOMAIN_SAVE_IMAGE_XML_SECURE 0x1
#endif
/* enum virDomainSaveRestoreFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DOMAIN_SAVE_BYPASS_CACHE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SAVE_RUNNING 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SAVE_PAUSED 0x4
#endif
#if !LIBVIR_CHECK_VERSION(8, 1, 0)
#  define VIR_DOMAIN_SAVE_RESET_NVRAM 0x8
#endif
/* enum virDomainSetTimeFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 5)
#  define VIR_DOMAIN_TIME_SYNC 0x1
#endif
/* enum virDomainSetUserPasswordFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 16)
#  define VIR_DOMAIN_PASSWORD_ENCRYPTED 0x1
#endif
/* enum virDomainShutdownFlagValues */
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_SHUTDOWN_DEFAULT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 5)
#  define VIR_DOMAIN_SHUTDOWN_PARAVIRT 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_SHUTDOWN_GUEST_AGENT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_SHUTDOWN_INITCTL 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_SHUTDOWN_SIGNAL 0x8
#endif
/* enum virDomainShutdownReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTDOWN_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTDOWN_USER 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_SHUTDOWN_LAST 0x2
#endif
/* enum virDomainShutoffReason */
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTOFF_UNKNOWN 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTOFF_SHUTDOWN 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTOFF_DESTROYED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTOFF_CRASHED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTOFF_MIGRATED 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTOFF_SAVED 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTOFF_FAILED 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_DOMAIN_SHUTOFF_FROM_SNAPSHOT 0x7
#endif
#if !LIBVIR_CHECK_VERSION(4, 10, 0)
#  define VIR_DOMAIN_SHUTOFF_DAEMON 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_SHUTOFF_LAST 0x9
#endif
/* enum virDomainSnapshotCreateFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY 0x10
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_LIVE 0x100
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT 0x20
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_VALIDATE 0x200
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE 0x40
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_HALT 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC 0x80
#endif
/* enum virDomainSnapshotDeleteFlags */
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY 0x4
#endif
/* enum virDomainSnapshotListFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_LIST_ROOTS 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA 0x10
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL 0x100
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_LIST_METADATA 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE 0x20
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL 0x200
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SNAPSHOT_LIST_LEAVES 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE 0x40
#endif
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
#  define VIR_DOMAIN_SNAPSHOT_LIST_TOPOLOGICAL 0x400
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES 0x8
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY 0x80
#endif
/* enum virDomainSnapshotRevertFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_REVERT_RUNNING 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_SNAPSHOT_REVERT_PAUSED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SNAPSHOT_REVERT_FORCE 0x4
#endif
#if !LIBVIR_CHECK_VERSION(8, 1, 0)
#  define VIR_DOMAIN_SNAPSHOT_REVERT_RESET_NVRAM 0x8
#endif
/* enum virDomainSnapshotXMLFlags */
#if !LIBVIR_CHECK_VERSION(5, 1, 0)
#  define VIR_DOMAIN_SNAPSHOT_XML_SECURE 0x1
#endif
/* enum virDomainState */
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
#  define VIR_DOMAIN_NOSTATE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
#  define VIR_DOMAIN_RUNNING 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
#  define VIR_DOMAIN_BLOCKED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
#  define VIR_DOMAIN_PAUSED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
#  define VIR_DOMAIN_SHUTDOWN 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
#  define VIR_DOMAIN_SHUTOFF 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 2)
#  define VIR_DOMAIN_CRASHED 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_PMSUSPENDED 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_LAST 0x8
#endif
/* enum virDomainStatsTypes */
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_DOMAIN_STATS_STATE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_STATS_INTERFACE 0x10
#endif
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
#  define VIR_DOMAIN_STATS_MEMORY 0x100
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_STATS_CPU_TOTAL 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_STATS_BLOCK 0x20
#endif
#if !LIBVIR_CHECK_VERSION(7, 2, 0)
#  define VIR_DOMAIN_STATS_DIRTYRATE 0x200
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_STATS_BALLOON 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_STATS_PERF 0x40
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_STATS_VCPU 0x8
#endif
#if !LIBVIR_CHECK_VERSION(4, 10, 0)
#  define VIR_DOMAIN_STATS_IOTHREAD 0x80
#endif
/* enum virDomainUndefineFlagsValues */
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DOMAIN_UNDEFINE_MANAGED_SAVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_DOMAIN_UNDEFINE_CHECKPOINTS_METADATA 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_UNDEFINE_NVRAM 0x4
#endif
#if !LIBVIR_CHECK_VERSION(2, 3, 0)
#  define VIR_DOMAIN_UNDEFINE_KEEP_NVRAM 0x8
#endif
/* enum virDomainVcpuFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_DOMAIN_VCPU_CURRENT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_VCPU_LIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_VCPU_HOTPLUGGABLE 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_VCPU_CONFIG 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_VCPU_MAXIMUM 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_DOMAIN_VCPU_GUEST 0x8
#endif
/* enum virDomainXMLFlags */
#if !LIBVIR_CHECK_VERSION(0, 3, 3)
#  define VIR_DOMAIN_XML_SECURE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 3)
#  define VIR_DOMAIN_XML_INACTIVE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_DOMAIN_XML_UPDATE_CPU 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#  define VIR_DOMAIN_XML_MIGRATABLE 0x8
#endif
/* enum virErrorDomain */
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_FROM_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_FROM_XEN 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_FROM_STATS_LINUX 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 2)
#  define VIR_FROM_LXC 0x11
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_FROM_STORAGE 0x12
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 6)
#  define VIR_FROM_NETWORK 0x13
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 6)
#  define VIR_FROM_DOMAIN 0x14
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_FROM_UML 0x15
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_FROM_NODEDEV 0x16
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_FROM_XEN_INOTIFY 0x17
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
#  define VIR_FROM_SECURITY 0x18
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 3)
#  define VIR_FROM_VBOX 0x19
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 4)
#  define VIR_FROM_INTERFACE 0x1a
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 4)
#  define VIR_FROM_ONE 0x1b
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 0)
#  define VIR_FROM_ESX 0x1c
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 0)
#  define VIR_FROM_PHYP 0x1d
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
#  define VIR_FROM_SECRET 0x1e
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
#  define VIR_FROM_CPU 0x1f
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_FROM_XEND 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_FROM_XENAPI 0x20
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_FROM_NWFILTER 0x21
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_FROM_HOOK 0x22
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_FROM_DOMAIN_SNAPSHOT 0x23
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_FROM_AUDIT 0x24
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 6)
#  define VIR_FROM_SYSINFO 0x25
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 6)
#  define VIR_FROM_STREAMS 0x26
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 7)
#  define VIR_FROM_VMWARE 0x27
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_FROM_EVENT 0x28
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_FROM_LIBXL 0x29
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_FROM_LOCKING 0x2a
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_FROM_HYPERV 0x2b
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_FROM_CAPABILITIES 0x2c
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_FROM_URI 0x2d
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_FROM_AUTH 0x2e
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_FROM_DBUS 0x2f
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_FROM_XENSTORE 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_FROM_PARALLELS 0x30
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_FROM_DEVICE 0x31
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_FROM_SSH 0x32
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#  define VIR_FROM_LOCKSPACE 0x33
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_FROM_INITCTL 0x34
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 4)
#  define VIR_FROM_IDENTITY 0x35
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 5)
#  define VIR_FROM_CGROUP 0x36
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_FROM_ACCESS 0x37
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
#  define VIR_FROM_SYSTEMD 0x38
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 2)
#  define VIR_FROM_BHYVE 0x39
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
#  define VIR_FROM_CRYPTO 0x3a
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 4)
#  define VIR_FROM_FIREWALL 0x3b
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_FROM_POLKIT 0x3c
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_FROM_THREAD 0x3d
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 17)
#  define VIR_FROM_ADMIN 0x3e
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 0)
#  define VIR_FROM_LOGGING 0x3f
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_FROM_SEXPR 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 2)
#  define VIR_FROM_XENXL 0x40
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_FROM_PERF 0x41
#endif
#if !LIBVIR_CHECK_VERSION(2, 5, 0)
#  define VIR_FROM_LIBSSH 0x42
#endif
#if !LIBVIR_CHECK_VERSION(3, 7, 0)
#  define VIR_FROM_RESCTRL 0x43
#endif
#if !LIBVIR_CHECK_VERSION(5, 1, 0)
#  define VIR_FROM_FIREWALLD 0x44
#endif
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
#  define VIR_FROM_DOMAIN_CHECKPOINT 0x45
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_FROM_TPM 0x46
#endif
#if !LIBVIR_CHECK_VERSION(5, 10, 0)
#  define VIR_FROM_BPF 0x47
#endif
#if !LIBVIR_CHECK_VERSION(7, 5, 0)
#  define VIR_FROM_CH 0x48
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_ERR_DOMAIN_LAST 0x49
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_FROM_XML 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_FROM_DOM 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 1)
#  define VIR_FROM_RPC 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 3)
#  define VIR_FROM_PROXY 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 6)
#  define VIR_FROM_CONF 0x9
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 0)
#  define VIR_FROM_QEMU 0xa
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 0)
#  define VIR_FROM_NET 0xb
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_FROM_TEST 0xc
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_FROM_REMOTE 0xd
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 1)
#  define VIR_FROM_OPENVZ 0xe
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_FROM_XENXM 0xf
#endif
/* enum virErrorLevel */
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_WARNING 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_ERROR 0x2
#endif
/* enum virErrorNumber */
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_OK 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_INTERNAL_ERROR 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_OS_TYPE 0x10
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_KERNEL 0x11
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_ROOT 0x12
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_SOURCE 0x13
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_TARGET 0x14
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_NAME 0x15
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_OS 0x16
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_DEVICE 0x17
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_XENSTORE 0x18
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_DRIVER_FULL 0x19
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_CALL_FAILED 0x1a
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 1)
#  define VIR_ERR_XML_ERROR 0x1b
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 1)
#  define VIR_ERR_DOM_EXIST 0x1c
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#  define VIR_ERR_OPERATION_DENIED 0x1d
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 6)
#  define VIR_ERR_OPEN_FAILED 0x1e
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 6)
#  define VIR_ERR_READ_FAILED 0x1f
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_MEMORY 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 6)
#  define VIR_ERR_PARSE_FAILED 0x20
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 6)
#  define VIR_ERR_CONF_SYNTAX 0x21
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 6)
#  define VIR_ERR_WRITE_FAILED 0x22
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 9)
#  define VIR_ERR_XML_DETAIL 0x23
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 0)
#  define VIR_ERR_INVALID_NETWORK 0x24
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 0)
#  define VIR_ERR_NETWORK_EXIST 0x25
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 1)
#  define VIR_ERR_SYSTEM_ERROR 0x26
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_ERR_RPC 0x27
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_ERR_GNUTLS_ERROR 0x28
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_WAR_NO_NETWORK 0x29
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 0)
#  define VIR_ERR_NO_DOMAIN 0x2a
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 0)
#  define VIR_ERR_NO_NETWORK 0x2b
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 1)
#  define VIR_ERR_INVALID_MAC 0x2c
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_ERR_AUTH_FAILED 0x2d
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_ERR_INVALID_STORAGE_POOL 0x2e
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_ERR_INVALID_STORAGE_VOL 0x2f
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_SUPPORT 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_WAR_NO_STORAGE 0x30
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_ERR_NO_STORAGE_POOL 0x31
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_ERR_NO_STORAGE_VOL 0x32
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_WAR_NO_NODE 0x33
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_ERR_INVALID_NODE_DEVICE 0x34
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_ERR_NO_NODE_DEVICE 0x35
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
#  define VIR_ERR_NO_SECURITY_MODEL 0x36
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 4)
#  define VIR_ERR_OPERATION_INVALID 0x37
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 4)
#  define VIR_WAR_NO_INTERFACE 0x38
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 4)
#  define VIR_ERR_NO_INTERFACE 0x39
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 4)
#  define VIR_ERR_INVALID_INTERFACE 0x3a
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 0)
#  define VIR_ERR_MULTIPLE_INTERFACES 0x3b
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_WAR_NO_NWFILTER 0x3c
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_ERR_INVALID_NWFILTER 0x3d
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_ERR_NO_NWFILTER 0x3e
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_ERR_BUILD_FIREWALL 0x3f
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_UNKNOWN_HOST 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
#  define VIR_WAR_NO_SECRET 0x40
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
#  define VIR_ERR_INVALID_SECRET 0x41
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
#  define VIR_ERR_NO_SECRET 0x42
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 3)
#  define VIR_ERR_CONFIG_UNSUPPORTED 0x43
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 3)
#  define VIR_ERR_OPERATION_TIMEOUT 0x44
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 3)
#  define VIR_ERR_MIGRATE_PERSIST_FAILED 0x45
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_ERR_HOOK_SCRIPT_FAILED 0x46
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_ERR_INVALID_DOMAIN_SNAPSHOT 0x47
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#  define VIR_ERR_NO_DOMAIN_SNAPSHOT 0x48
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_ERR_INVALID_STREAM 0x49
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_ERR_ARGUMENT_UNSUPPORTED 0x4a
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_ERR_STORAGE_PROBE_FAILED 0x4b
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_ERR_STORAGE_POOL_BUILT 0x4c
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_ERR_SNAPSHOT_REVERT_RISKY 0x4d
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_ERR_OPERATION_ABORTED 0x4e
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_ERR_AUTH_CANCELLED 0x4f
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_CONNECT 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_ERR_NO_DOMAIN_METADATA 0x50
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_ERR_MIGRATE_UNSAFE 0x51
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_ERR_OVERFLOW 0x52
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
#  define VIR_ERR_BLOCK_COPY_ACTIVE 0x53
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_ERR_OPERATION_UNSUPPORTED 0x54
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_ERR_SSH 0x55
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_ERR_AGENT_UNRESPONSIVE 0x56
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#  define VIR_ERR_RESOURCE_BUSY 0x57
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_ERR_ACCESS_DENIED 0x58
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
#  define VIR_ERR_DBUS_SERVICE 0x59
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 4)
#  define VIR_ERR_STORAGE_VOL_EXIST 0x5a
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
#  define VIR_ERR_CPU_INCOMPATIBLE 0x5b
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 12)
#  define VIR_ERR_XML_INVALID_SCHEMA 0x5c
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 18)
#  define VIR_ERR_MIGRATE_FINISH_OK 0x5d
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_ERR_AUTH_UNAVAILABLE 0x5e
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_ERR_NO_SERVER 0x5f
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_INVALID_CONN 0x6
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 5)
#  define VIR_ERR_NO_CLIENT 0x60
#endif
#if !LIBVIR_CHECK_VERSION(2, 3, 0)
#  define VIR_ERR_AGENT_UNSYNCED 0x61
#endif
#if !LIBVIR_CHECK_VERSION(2, 5, 0)
#  define VIR_ERR_LIBSSH 0x62
#endif
#if !LIBVIR_CHECK_VERSION(4, 1, 0)
#  define VIR_ERR_DEVICE_MISSING 0x63
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
#  define VIR_ERR_INVALID_NWFILTER_BINDING 0x64
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
#  define VIR_ERR_NO_NWFILTER_BINDING 0x65
#endif
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
#  define VIR_ERR_INVALID_DOMAIN_CHECKPOINT 0x66
#endif
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
#  define VIR_ERR_NO_DOMAIN_CHECKPOINT 0x67
#endif
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
#  define VIR_ERR_NO_DOMAIN_BACKUP 0x68
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_ERR_INVALID_NETWORK_PORT 0x69
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_ERR_NETWORK_PORT_EXIST 0x6a
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_ERR_NO_NETWORK_PORT 0x6b
#endif
#if !LIBVIR_CHECK_VERSION(6, 1, 0)
#  define VIR_ERR_NO_HOSTNAME 0x6c
#endif
#if !LIBVIR_CHECK_VERSION(6, 10, 0)
#  define VIR_ERR_CHECKPOINT_INCONSISTENT 0x6d
#endif
#if !LIBVIR_CHECK_VERSION(7, 1, 0)
#  define VIR_ERR_MULTIPLE_DOMAINS 0x6e
#endif
#if !LIBVIR_CHECK_VERSION(5, 0, 0)
#  define VIR_ERR_NUMBER_LAST 0x6f
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_INVALID_DOMAIN 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_INVALID_ARG 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_OPERATION_FAILED 0x9
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_GET_FAILED 0xa
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_POST_FAILED 0xb
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_HTTP_ERROR 0xc
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_SEXPR_SERIAL 0xd
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_NO_XEN 0xe
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
#  define VIR_ERR_XEN_CALL 0xf
#endif
/* enum virEventHandleType */
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_EVENT_HANDLE_READABLE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_EVENT_HANDLE_WRITABLE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_EVENT_HANDLE_ERROR 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
#  define VIR_EVENT_HANDLE_HANGUP 0x8
#endif
/* enum virIPAddrType */
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
#  define VIR_IP_ADDR_TYPE_IPV4 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
#  define VIR_IP_ADDR_TYPE_IPV6 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
#  define VIR_IP_ADDR_TYPE_LAST 0x2
#endif
/* enum virInterfaceDefineFlags */
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
#  define VIR_INTERFACE_DEFINE_VALIDATE 0x1
#endif
/* enum virInterfaceXMLFlags */
#if !LIBVIR_CHECK_VERSION(0, 7, 3)
#  define VIR_INTERFACE_XML_INACTIVE 0x1
#endif
/* enum virKeycodeSet */
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_KEYCODE_SET_LINUX 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_KEYCODE_SET_XT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_KEYCODE_SET_ATSET1 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_KEYCODE_SET_ATSET2 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_KEYCODE_SET_ATSET3 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_KEYCODE_SET_OSX 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_KEYCODE_SET_XT_KBD 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_KEYCODE_SET_USB 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_KEYCODE_SET_WIN32 0x8
#endif
#if !LIBVIR_CHECK_VERSION(4, 2, 0)
#  define VIR_KEYCODE_SET_QNUM 0x9
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
#  define VIR_KEYCODE_SET_LAST 0xa
#endif
/* enum virMemoryParameterType */
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_PARAM_INT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_PARAM_UINT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_PARAM_LLONG 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_PARAM_ULLONG 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_PARAM_DOUBLE 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_PARAM_BOOLEAN 0x6
#endif
/* enum virNWFilterBindingCreateFlags */
#if !LIBVIR_CHECK_VERSION(7, 8, 0)
#  define VIR_NWFILTER_BINDING_CREATE_VALIDATE 0x1
#endif
/* enum virNWFilterDefineFlags */
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
#  define VIR_NWFILTER_DEFINE_VALIDATE 0x1
#endif
/* enum virNetworkCreateFlags */
#if !LIBVIR_CHECK_VERSION(7, 8, 0)
#  define VIR_NETWORK_CREATE_VALIDATE 0x1
#endif
/* enum virNetworkDefineFlags */
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
#  define VIR_NETWORK_DEFINE_VALIDATE 0x1
#endif
/* enum virNetworkEventID */
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
#  define VIR_NETWORK_EVENT_ID_LIFECYCLE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
#  define VIR_NETWORK_EVENT_ID_LAST 0x1
#endif
/* enum virNetworkEventLifecycleType */
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
#  define VIR_NETWORK_EVENT_DEFINED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
#  define VIR_NETWORK_EVENT_UNDEFINED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
#  define VIR_NETWORK_EVENT_STARTED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
#  define VIR_NETWORK_EVENT_STOPPED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
#  define VIR_NETWORK_EVENT_LAST 0x4
#endif
/* enum virNetworkPortCreateFlags */
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_NETWORK_PORT_CREATE_RECLAIM 0x1
#endif
#if !LIBVIR_CHECK_VERSION(7, 8, 0)
#  define VIR_NETWORK_PORT_CREATE_VALIDATE 0x2
#endif
/* enum virNetworkUpdateCommand */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_UPDATE_COMMAND_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_UPDATE_COMMAND_MODIFY 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_UPDATE_COMMAND_DELETE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_UPDATE_COMMAND_ADD_LAST 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_UPDATE_COMMAND_ADD_FIRST 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_UPDATE_COMMAND_LAST 0x5
#endif
/* enum virNetworkUpdateFlags */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_UPDATE_AFFECT_CURRENT 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_UPDATE_AFFECT_LIVE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_UPDATE_AFFECT_CONFIG 0x2
#endif
/* enum virNetworkUpdateSection */
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_BRIDGE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_DOMAIN 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_IP 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_IP_DHCP_HOST 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_IP_DHCP_RANGE 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_FORWARD 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_FORWARD_INTERFACE 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_FORWARD_PF 0x8
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_PORTGROUP 0x9
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_DNS_HOST 0xa
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_DNS_TXT 0xb
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_DNS_SRV 0xc
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NETWORK_SECTION_LAST 0xd
#endif
/* enum virNetworkXMLFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_NETWORK_XML_INACTIVE 0x1
#endif
/* enum virNodeAllocPagesFlags */
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_NODE_ALLOC_PAGES_ADD 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_NODE_ALLOC_PAGES_SET 0x1
#endif
/* enum virNodeDeviceEventID */
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_NODE_DEVICE_EVENT_ID_LIFECYCLE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_NODE_DEVICE_EVENT_ID_UPDATE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_NODE_DEVICE_EVENT_ID_LAST 0x2
#endif
/* enum virNodeDeviceEventLifecycleType */
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_NODE_DEVICE_EVENT_CREATED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_NODE_DEVICE_EVENT_DELETED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(7, 3, 0)
#  define VIR_NODE_DEVICE_EVENT_DEFINED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(7, 3, 0)
#  define VIR_NODE_DEVICE_EVENT_UNDEFINED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_NODE_DEVICE_EVENT_LAST 0x4
#endif
/* enum virNodeGetCPUStatsAllCPUs */
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_CPU_STATS_ALL_CPUS -0x1
#endif
/* enum virNodeGetMemoryStatsAllCells */
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_MEMORY_STATS_ALL_CELLS -0x1
#endif
/* enum virNodeSuspendTarget */
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_NODE_SUSPEND_TARGET_MEM 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_NODE_SUSPEND_TARGET_DISK 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_NODE_SUSPEND_TARGET_HYBRID 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_NODE_SUSPEND_TARGET_LAST 0x3
#endif
/* enum virSchedParameterType */
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_DOMAIN_SCHED_FIELD_INT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_DOMAIN_SCHED_FIELD_UINT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_DOMAIN_SCHED_FIELD_LLONG 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_DOMAIN_SCHED_FIELD_ULLONG 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_DOMAIN_SCHED_FIELD_DOUBLE 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_DOMAIN_SCHED_FIELD_BOOLEAN 0x6
#endif
/* enum virSecretDefineFlags */
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
#  define VIR_SECRET_DEFINE_VALIDATE 0x1
#endif
/* enum virSecretEventID */
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_SECRET_EVENT_ID_LIFECYCLE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_SECRET_EVENT_ID_VALUE_CHANGED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_SECRET_EVENT_ID_LAST 0x2
#endif
/* enum virSecretEventLifecycleType */
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_SECRET_EVENT_DEFINED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_SECRET_EVENT_UNDEFINED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_SECRET_EVENT_LAST 0x2
#endif
/* enum virSecretUsageType */
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
#  define VIR_SECRET_USAGE_TYPE_NONE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
#  define VIR_SECRET_USAGE_TYPE_VOLUME 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_SECRET_USAGE_TYPE_CEPH 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 4)
#  define VIR_SECRET_USAGE_TYPE_ISCSI 0x3
#endif
#if !LIBVIR_CHECK_VERSION(2, 3, 0)
#  define VIR_SECRET_USAGE_TYPE_TLS 0x4
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
#  define VIR_SECRET_USAGE_TYPE_VTPM 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_SECRET_USAGE_TYPE_LAST 0x6
#endif
/* enum virStoragePoolBuildFlags */
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_POOL_BUILD_NEW 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_POOL_BUILD_REPAIR 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_POOL_BUILD_RESIZE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_STORAGE_POOL_BUILD_NO_OVERWRITE 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_STORAGE_POOL_BUILD_OVERWRITE 0x8
#endif
/* enum virStoragePoolCreateFlags */
#if !LIBVIR_CHECK_VERSION(1, 3, 1)
#  define VIR_STORAGE_POOL_CREATE_NORMAL 0x0
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 1)
#  define VIR_STORAGE_POOL_CREATE_WITH_BUILD 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 1)
#  define VIR_STORAGE_POOL_CREATE_WITH_BUILD_OVERWRITE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 1)
#  define VIR_STORAGE_POOL_CREATE_WITH_BUILD_NO_OVERWRITE 0x4
#endif
/* enum virStoragePoolDefineFlags */
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
#  define VIR_STORAGE_POOL_DEFINE_VALIDATE 0x1
#endif
/* enum virStoragePoolDeleteFlags */
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_POOL_DELETE_NORMAL 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_POOL_DELETE_ZEROED 0x1
#endif
/* enum virStoragePoolEventID */
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_STORAGE_POOL_EVENT_ID_LIFECYCLE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_STORAGE_POOL_EVENT_ID_REFRESH 0x1
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_STORAGE_POOL_EVENT_ID_LAST 0x2
#endif
/* enum virStoragePoolEventLifecycleType */
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_STORAGE_POOL_EVENT_DEFINED 0x0
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_STORAGE_POOL_EVENT_UNDEFINED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_STORAGE_POOL_EVENT_STARTED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_STORAGE_POOL_EVENT_STOPPED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(3, 8, 0)
#  define VIR_STORAGE_POOL_EVENT_CREATED 0x4
#endif
#if !LIBVIR_CHECK_VERSION(3, 8, 0)
#  define VIR_STORAGE_POOL_EVENT_DELETED 0x5
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_STORAGE_POOL_EVENT_LAST 0x6
#endif
/* enum virStoragePoolState */
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_POOL_INACTIVE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_POOL_BUILDING 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_POOL_RUNNING 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_POOL_DEGRADED 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 2)
#  define VIR_STORAGE_POOL_INACCESSIBLE 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_POOL_STATE_LAST 0x5
#endif
/* enum virStorageVolCreateFlags */
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
#  define VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 13)
#  define VIR_STORAGE_VOL_CREATE_REFLINK 0x2
#endif
/* enum virStorageVolDeleteFlags */
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_VOL_DELETE_NORMAL 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_VOL_DELETE_ZEROED 0x1
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 21)
#  define VIR_STORAGE_VOL_DELETE_WITH_SNAPSHOTS 0x2
#endif
/* enum virStorageVolDownloadFlags */
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
#  define VIR_STORAGE_VOL_DOWNLOAD_SPARSE_STREAM 0x1
#endif
/* enum virStorageVolInfoFlags */
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_STORAGE_VOL_USE_ALLOCATION 0x0
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_STORAGE_VOL_GET_PHYSICAL 0x1
#endif
/* enum virStorageVolResizeFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_RESIZE_ALLOCATE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_RESIZE_DELTA 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_RESIZE_SHRINK 0x4
#endif
/* enum virStorageVolType */
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_VOL_FILE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
#  define VIR_STORAGE_VOL_BLOCK 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_STORAGE_VOL_DIR 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_STORAGE_VOL_NETWORK 0x3
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 0)
#  define VIR_STORAGE_VOL_NETDIR 0x4
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 4)
#  define VIR_STORAGE_VOL_PLOOP 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_LAST 0x6
#endif
/* enum virStorageVolUploadFlags */
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
#  define VIR_STORAGE_VOL_UPLOAD_SPARSE_STREAM 0x1
#endif
/* enum virStorageVolWipeAlgorithm */
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_ZERO 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_NNSA 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_DOD 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_BSI 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_GUTMANN 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_SCHNEIER 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_PFITZNER7 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_PFITZNER33 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_RANDOM 0x8
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 2)
#  define VIR_STORAGE_VOL_WIPE_ALG_TRIM 0x9
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_STORAGE_VOL_WIPE_ALG_LAST 0xa
#endif
/* enum virStorageXMLFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_STORAGE_XML_INACTIVE 0x1
#endif
/* enum virStreamEventType */
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
#  define VIR_STREAM_EVENT_READABLE 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
#  define VIR_STREAM_EVENT_WRITABLE 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
#  define VIR_STREAM_EVENT_ERROR 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
#  define VIR_STREAM_EVENT_HANGUP 0x8
#endif
/* enum virStreamFlags */
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
#  define VIR_STREAM_NONBLOCK 0x1
#endif
/* enum virStreamRecvFlagsValues */
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
#  define VIR_STREAM_RECV_STOP_AT_HOLE 0x1
#endif
/* enum virTypedParameterFlags */
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_TYPED_PARAM_STRING_OKAY 0x4
#endif
/* enum virTypedParameterType */
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_TYPED_PARAM_INT 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_TYPED_PARAM_UINT 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_TYPED_PARAM_LLONG 0x3
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_TYPED_PARAM_ULLONG 0x4
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_TYPED_PARAM_DOUBLE 0x5
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_TYPED_PARAM_BOOLEAN 0x6
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_TYPED_PARAM_STRING 0x7
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_TYPED_PARAM_LAST 0x8
#endif
/* enum virVcpuHostCpuState */
#if !LIBVIR_CHECK_VERSION(6, 10, 0)
#  define VIR_VCPU_INFO_CPU_OFFLINE -0x1
#endif
#if !LIBVIR_CHECK_VERSION(6, 10, 0)
#  define VIR_VCPU_INFO_CPU_UNAVAILABLE -0x2
#endif
/* enum virVcpuState */
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#  define VIR_VCPU_OFFLINE 0x0
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#  define VIR_VCPU_RUNNING 0x1
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#  define VIR_VCPU_BLOCKED 0x2
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_VCPU_LAST 0x3
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 0)
#endif
/* Generated from LIBVIR_VERSION_NUMBER 8004000 */
#if !LIBVIR_CHECK_VERSION(5, 8, 0)
#  define VIR_CONNECT_IDENTITY_GROUP_NAME "group-name"
#endif
#if !LIBVIR_CHECK_VERSION(5, 8, 0)
#  define VIR_CONNECT_IDENTITY_PROCESS_ID "process-id"
#endif
#if !LIBVIR_CHECK_VERSION(5, 8, 0)
#  define VIR_CONNECT_IDENTITY_PROCESS_TIME "process-time"
#endif
#if !LIBVIR_CHECK_VERSION(5, 8, 0)
#  define VIR_CONNECT_IDENTITY_SASL_USER_NAME "sasl-user-name"
#endif
#if !LIBVIR_CHECK_VERSION(5, 8, 0)
#  define VIR_CONNECT_IDENTITY_SELINUX_CONTEXT "selinux-context"
#endif
#if !LIBVIR_CHECK_VERSION(5, 8, 0)
#  define VIR_CONNECT_IDENTITY_UNIX_GROUP_ID "unix-group-id"
#endif
#if !LIBVIR_CHECK_VERSION(5, 8, 0)
#  define VIR_CONNECT_IDENTITY_UNIX_USER_ID "unix-user-id"
#endif
#if !LIBVIR_CHECK_VERSION(5, 8, 0)
#  define VIR_CONNECT_IDENTITY_USER_NAME "user-name"
#endif
#if !LIBVIR_CHECK_VERSION(5, 8, 0)
#  define VIR_CONNECT_IDENTITY_X509_DISTINGUISHED_NAME "x509-distinguished-name"
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_BANDWIDTH_IN_AVERAGE "inbound.average"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_BANDWIDTH_IN_BURST "inbound.burst"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 19)
#  define VIR_DOMAIN_BANDWIDTH_IN_FLOOR "inbound.floor"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_BANDWIDTH_IN_PEAK "inbound.peak"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE "outbound.average"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_BANDWIDTH_OUT_BURST "outbound.burst"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_BANDWIDTH_OUT_PEAK "outbound.peak"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 2)
#  define VIR_DOMAIN_BLKIO_DEVICE_READ_BPS "device_read_bytes_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 2)
#  define VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS "device_read_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_DOMAIN_BLKIO_DEVICE_WEIGHT "device_weight"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 2)
#  define VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS "device_write_bytes_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 2)
#  define VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS "device_write_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_BLKIO_FIELD_LENGTH VIR_TYPED_PARAM_FIELD_LENGTH
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define VIR_DOMAIN_BLKIO_WEIGHT "weight"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_DOMAIN_BLOCK_COPY_BANDWIDTH "bandwidth"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_DOMAIN_BLOCK_COPY_BUF_SIZE "buf-size"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
#  define VIR_DOMAIN_BLOCK_COPY_GRANULARITY "granularity"
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_DOMAIN_BLOCK_IOTUNE_GROUP_NAME "group_name"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC "read_bytes_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX "read_bytes_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX_LENGTH "read_bytes_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC "read_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX "read_iops_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX_LENGTH "read_iops_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_BLOCK_IOTUNE_SIZE_IOPS_SEC "size_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC "total_bytes_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX "total_bytes_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX_LENGTH "total_bytes_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC "total_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX "total_iops_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX_LENGTH "total_iops_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC "write_bytes_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX "write_bytes_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX_LENGTH "write_bytes_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
#  define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC "write_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX "write_iops_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX_LENGTH "write_iops_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_ERRS "errs"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_FIELD_LENGTH VIR_TYPED_PARAM_FIELD_LENGTH
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ "flush_operations"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES "flush_total_times"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_READ_BYTES "rd_bytes"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_READ_REQ "rd_operations"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES "rd_total_times"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES "wr_bytes"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_WRITE_REQ "wr_operations"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES "wr_total_times"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
#  define VIR_DOMAIN_CPU_STATS_CPUTIME "cpu_time"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_CPU_STATS_SYSTEMTIME "system_time"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
#  define VIR_DOMAIN_CPU_STATS_USERTIME "user_time"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
#  define VIR_DOMAIN_CPU_STATS_VCPUTIME "vcpu_time"
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
#endif
#if !LIBVIR_CHECK_VERSION(4, 10, 0)
#  define VIR_DOMAIN_IOTHREAD_POLL_GROW "poll_grow"
#endif
#if !LIBVIR_CHECK_VERSION(4, 10, 0)
#  define VIR_DOMAIN_IOTHREAD_POLL_MAX_NS "poll_max_ns"
#endif
#if !LIBVIR_CHECK_VERSION(4, 10, 0)
#  define VIR_DOMAIN_IOTHREAD_POLL_SHRINK "poll_shrink"
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_DOMAIN_JOB_AUTO_CONVERGE_THROTTLE "auto_converge_throttle"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_COMPRESSION_BYTES "compression_bytes"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_COMPRESSION_CACHE "compression_cache"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES "compression_cache_misses"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW "compression_overflow"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_COMPRESSION_PAGES "compression_pages"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_DATA_PROCESSED "data_processed"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_DATA_REMAINING "data_remaining"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_DATA_TOTAL "data_total"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_JOB_DISK_BPS "disk_bps"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_DISK_PROCESSED "disk_processed"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_DISK_REMAINING "disk_remaining"
#endif
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
#  define VIR_DOMAIN_JOB_DISK_TEMP_TOTAL "disk_temp_total"
#endif
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
#  define VIR_DOMAIN_JOB_DISK_TEMP_USED "disk_temp_used"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_DISK_TOTAL "disk_total"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_DOWNTIME "downtime"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 15)
#  define VIR_DOMAIN_JOB_DOWNTIME_NET "downtime_net"
#endif
#if !LIBVIR_CHECK_VERSION(6, 3, 0)
#  define VIR_DOMAIN_JOB_ERRMSG "errmsg"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_JOB_MEMORY_BPS "memory_bps"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_MEMORY_CONSTANT "memory_constant"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 1)
#  define VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE "memory_dirty_rate"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 1)
#  define VIR_DOMAIN_JOB_MEMORY_ITERATION "memory_iteration"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_MEMORY_NORMAL "memory_normal"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES "memory_normal_bytes"
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
#  define VIR_DOMAIN_JOB_MEMORY_PAGE_SIZE "memory_page_size"
#endif
#if !LIBVIR_CHECK_VERSION(5, 0, 0)
#  define VIR_DOMAIN_JOB_MEMORY_POSTCOPY_REQS "memory_postcopy_requests"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_MEMORY_PROCESSED "memory_processed"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_MEMORY_REMAINING "memory_remaining"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_MEMORY_TOTAL "memory_total"
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
#  define VIR_DOMAIN_JOB_OPERATION "operation"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_JOB_SETUP_TIME "setup_time"
#endif
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
#  define VIR_DOMAIN_JOB_SUCCESS "success"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_TIME_ELAPSED "time_elapsed"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 15)
#  define VIR_DOMAIN_JOB_TIME_ELAPSED_NET "time_elapsed_net"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 3)
#  define VIR_DOMAIN_JOB_TIME_REMAINING "time_remaining"
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MAJOR "sev-api-major"
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MINOR "sev-api-minor"
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_DOMAIN_LAUNCH_SECURITY_SEV_BUILD_ID "sev-build-id"
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
#  define VIR_DOMAIN_LAUNCH_SECURITY_SEV_MEASUREMENT "sev-measurement"
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_DOMAIN_LAUNCH_SECURITY_SEV_POLICY "sev-policy"
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET "sev-secret"
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_HEADER "sev-secret-header"
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_SET_ADDRESS "sev-secret-set-address"
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_FIELD_LENGTH VIR_TYPED_PARAM_FIELD_LENGTH
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_HARD_LIMIT "hard_limit"
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_MIN_GUARANTEE "min_guarantee"
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 8)
#  define VIR_DOMAIN_MEMORY_PARAM_UNLIMITED 9007199254740991LL /* = INT64_MAX >> 10 */
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_SOFT_LIMIT "soft_limit"
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT "swap_hard_limit"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_NUMA_MODE "numa_mode"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
#  define VIR_DOMAIN_NUMA_NODESET "numa_nodeset"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SCHEDULER_CAP "cap"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SCHEDULER_CPU_SHARES "cpu_shares"
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD "emulator_period"
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
#  define VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA "emulator_quota"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_SCHEDULER_GLOBAL_PERIOD "global_period"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_SCHEDULER_GLOBAL_QUOTA "global_quota"
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_DOMAIN_SCHEDULER_IOTHREAD_PERIOD "iothread_period"
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_DOMAIN_SCHEDULER_IOTHREAD_QUOTA "iothread_quota"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SCHEDULER_LIMIT "limit"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SCHEDULER_RESERVATION "reservation"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SCHEDULER_SHARES "shares"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SCHEDULER_VCPU_PERIOD "vcpu_period"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SCHEDULER_VCPU_QUOTA "vcpu_quota"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
#  define VIR_DOMAIN_SCHEDULER_WEIGHT "weight"
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define VIR_DOMAIN_SCHED_FIELD_LENGTH VIR_TYPED_PARAM_FIELD_LENGTH
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_DOMAIN_SEND_KEY_MAX_KEYS 16
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_DISK "blkdeviotune.disk"
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_GROUP_NAME "blkdeviotune.group_name"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC "blkdeviotune.read_bytes_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX "blkdeviotune.read_bytes_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX_LENGTH "blkdeviotune.read_bytes_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC "blkdeviotune.read_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX "blkdeviotune.read_iops_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX_LENGTH "blkdeviotune.read_iops_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_SIZE_IOPS_SEC "blkdeviotune.size_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC "blkdeviotune.total_bytes_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX "blkdeviotune.total_bytes_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX_LENGTH "blkdeviotune.total_bytes_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC "blkdeviotune.total_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX "blkdeviotune.total_iops_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX_LENGTH "blkdeviotune.total_iops_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC "blkdeviotune.write_bytes_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX "blkdeviotune.write_bytes_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX_LENGTH "blkdeviotune.write_bytes_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC "blkdeviotune.write_iops_sec"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX "blkdeviotune.write_iops_sec_max"
#endif
#if !LIBVIR_CHECK_VERSION(2, 4, 0)
#  define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX_LENGTH "blkdeviotune.write_iops_sec_max_length"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_CPU_CPU_SHARES "cputune.cpu_shares"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_CPU_EMULATORPIN "cputune.emulatorpin"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_CPU_EMULATOR_PERIOD "cputune.emulator_period"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_CPU_EMULATOR_QUOTA "cputune.emulator_quota"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_TUNABLE_CPU_GLOBAL_PERIOD "cputune.global_period"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_DOMAIN_TUNABLE_CPU_GLOBAL_QUOTA "cputune.global_quota"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
#  define VIR_DOMAIN_TUNABLE_CPU_IOTHREADSPIN "cputune.iothreadpin%u"
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_PERIOD "cputune.iothread_period"
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#  define VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_QUOTA "cputune.iothread_quota"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_CPU_VCPUPIN "cputune.vcpupin%u"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_CPU_VCPU_PERIOD "cputune.vcpu_period"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
#  define VIR_DOMAIN_TUNABLE_CPU_VCPU_QUOTA "cputune.vcpu_quota"
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
#  define VIR_KEYCODE_SET_RFB VIR_KEYCODE_SET_QNUM
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_MIGRATE_PARAM_AUTO_CONVERGE_INCREMENT "auto_converge.increment"
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#  define VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL "auto_converge.initial"
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_MIGRATE_PARAM_BANDWIDTH "bandwidth"
#endif
#if !LIBVIR_CHECK_VERSION(5, 1, 0)
#  define VIR_MIGRATE_PARAM_BANDWIDTH_POSTCOPY "bandwidth.postcopy"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 4)
#  define VIR_MIGRATE_PARAM_COMPRESSION "compression"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 4)
#  define VIR_MIGRATE_PARAM_COMPRESSION_MT_DTHREADS "compression.mt.dthreads"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 4)
#  define VIR_MIGRATE_PARAM_COMPRESSION_MT_LEVEL "compression.mt.level"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 4)
#  define VIR_MIGRATE_PARAM_COMPRESSION_MT_THREADS "compression.mt.threads"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 4)
#  define VIR_MIGRATE_PARAM_COMPRESSION_XBZRLE_CACHE "compression.xbzrle.cache"
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_MIGRATE_PARAM_DEST_NAME "destination_name"
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_MIGRATE_PARAM_DEST_XML "destination_xml"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_MIGRATE_PARAM_DISKS_PORT "disks_port"
#endif
#if !LIBVIR_CHECK_VERSION(6, 8, 0)
#  define VIR_MIGRATE_PARAM_DISKS_URI "disks_uri"
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_MIGRATE_PARAM_GRAPHICS_URI "graphics_uri"
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 4)
#  define VIR_MIGRATE_PARAM_LISTEN_ADDRESS "listen_address"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 17)
#  define VIR_MIGRATE_PARAM_MIGRATE_DISKS "migrate_disks"
#endif
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
#  define VIR_MIGRATE_PARAM_PARALLEL_CONNECTIONS "parallel.connections"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 4)
#  define VIR_MIGRATE_PARAM_PERSIST_XML "persistent_xml"
#endif
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
#  define VIR_MIGRATE_PARAM_TLS_DESTINATION "tls.destination"
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 0)
#  define VIR_MIGRATE_PARAM_URI "migrate_uri"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_NETWORK_PORT_BANDWIDTH_IN_AVERAGE "inbound.average"
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_NETWORK_PORT_BANDWIDTH_IN_BURST "inbound.burst"
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_NETWORK_PORT_BANDWIDTH_IN_FLOOR "inbound.floor"
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_NETWORK_PORT_BANDWIDTH_IN_PEAK "inbound.peak"
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_NETWORK_PORT_BANDWIDTH_OUT_AVERAGE "outbound.average"
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_NETWORK_PORT_BANDWIDTH_OUT_BURST "outbound.burst"
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
#  define VIR_NETWORK_PORT_BANDWIDTH_OUT_PEAK "outbound.peak"
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_CPU_STATS_FIELD_LENGTH 80
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_CPU_STATS_IDLE "idle"
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 2)
#  define VIR_NODE_CPU_STATS_INTR "intr"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_CPU_STATS_IOWAIT "iowait"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_CPU_STATS_KERNEL "kernel"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_CPU_STATS_USER "user"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_CPU_STATS_UTILIZATION "utilization"
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NODE_MEMORY_SHARED_FULL_SCANS "shm_full_scans"
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
#  define VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES "shm_merge_across_nodes"
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NODE_MEMORY_SHARED_PAGES_SHARED "shm_pages_shared"
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NODE_MEMORY_SHARED_PAGES_SHARING "shm_pages_sharing"
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN "shm_pages_to_scan"
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED "shm_pages_unshared"
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE "shm_pages_volatile"
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
#  define VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS "shm_sleep_millisecs"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_MEMORY_STATS_BUFFERS "buffers"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_MEMORY_STATS_CACHED "cached"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_MEMORY_STATS_FIELD_LENGTH 80
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_MEMORY_STATS_FREE "free"
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
#  define VIR_NODE_MEMORY_STATS_TOTAL "total"
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
#  define VIR_NODE_SEV_CBITPOS "cbitpos"
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
#  define VIR_NODE_SEV_CERT_CHAIN "cert-chain"
#endif
#if !LIBVIR_CHECK_VERSION(8, 4, 0)
#  define VIR_NODE_SEV_CPU0_ID "cpu0-id"
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_NODE_SEV_MAX_ES_GUESTS "max-es-guests"
#endif
#if !LIBVIR_CHECK_VERSION(8, 0, 0)
#  define VIR_NODE_SEV_MAX_GUESTS "max-guests"
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
#  define VIR_NODE_SEV_PDH "pdh"
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
#  define VIR_NODE_SEV_REDUCED_PHYS_BITS "reduced-phys-bits"
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_PERF_PARAM_ALIGNMENT_FAULTS "alignment_faults"
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_PERF_PARAM_BRANCH_INSTRUCTIONS "branch_instructions"
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_PERF_PARAM_BRANCH_MISSES "branch_misses"
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_PERF_PARAM_BUS_CYCLES "bus_cycles"
#endif
#if !LIBVIR_CHECK_VERSION(2, 3, 0)
#  define VIR_PERF_PARAM_CACHE_MISSES "cache_misses"
#endif
#if !LIBVIR_CHECK_VERSION(2, 3, 0)
#  define VIR_PERF_PARAM_CACHE_REFERENCES "cache_references"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
#  define VIR_PERF_PARAM_CMT "cmt"
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_PERF_PARAM_CONTEXT_SWITCHES "context_switches"
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_PERF_PARAM_CPU_CLOCK "cpu_clock"
#endif
#if !LIBVIR_CHECK_VERSION(2, 3, 0)
#  define VIR_PERF_PARAM_CPU_CYCLES "cpu_cycles"
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_PERF_PARAM_CPU_MIGRATIONS "cpu_migrations"
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_PERF_PARAM_EMULATION_FAULTS "emulation_faults"
#endif
#if !LIBVIR_CHECK_VERSION(2, 3, 0)
#  define VIR_PERF_PARAM_INSTRUCTIONS "instructions"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 5)
#  define VIR_PERF_PARAM_MBML "mbml"
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 5)
#  define VIR_PERF_PARAM_MBMT "mbmt"
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_PERF_PARAM_PAGE_FAULTS "page_faults"
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_PERF_PARAM_PAGE_FAULTS_MAJ "page_faults_maj"
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_PERF_PARAM_PAGE_FAULTS_MIN "page_faults_min"
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_PERF_PARAM_REF_CPU_CYCLES "ref_cpu_cycles"
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_PERF_PARAM_STALLED_CYCLES_BACKEND "stalled_cycles_backend"
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#  define VIR_PERF_PARAM_STALLED_CYCLES_FRONTEND "stalled_cycles_frontend"
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
#  define VIR_PERF_PARAM_TASK_CLOCK "task_clock"
#endif
#if !LIBVIR_CHECK_VERSION(8, 4, 0)
#  define VIR_SAVE_PARAM_DXML "dxml"
#endif
#if !LIBVIR_CHECK_VERSION(8, 4, 0)
#  define VIR_SAVE_PARAM_FILE "file"
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
#  define VIR_SECURITY_DOI_BUFLEN (256 + 1)
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
#  define VIR_SECURITY_LABEL_BUFLEN (4096 + 1)
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
#  define VIR_SECURITY_MODEL_BUFLEN (256 + 1)
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
#  define VIR_TYPED_PARAM_FIELD_LENGTH 80
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 0)
#  define VIR_UUID_BUFLEN (16)
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 0)
#  define VIR_UUID_STRING_BUFLEN (36+1)
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
#  define _virBlkioParameter _virTypedParameter
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
#  define _virMemoryParameter _virTypedParameter
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
#  define _virSchedParameter _virTypedParameter
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
typedef struct _virConnect virConnect;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef struct _virConnectAuth virConnectAuth;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef struct _virConnectCredential virConnectCredential;
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
typedef struct _virDomain virDomain;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 1)
typedef struct _virDomainBlockInfo virDomainBlockInfo;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
typedef struct _virDomainBlockJobInfo virDomainBlockJobInfo;
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 3)
typedef struct _virDomainBlockStats virDomainBlockStatsStruct;
#endif
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
typedef struct _virDomainCheckpoint virDomainCheckpoint;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
typedef struct _virDomainControlInfo virDomainControlInfo;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
typedef struct _virDomainDiskError virDomainDiskError;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef struct _virDomainEventGraphicsAddress virDomainEventGraphicsAddress;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef struct _virDomainEventGraphicsSubject virDomainEventGraphicsSubject;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef struct _virDomainEventGraphicsSubjectIdentity virDomainEventGraphicsSubjectIdentity;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
typedef struct _virDomainFSInfo virDomainFSInfo;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
typedef struct _virDomainIOThreadInfo virDomainIOThreadInfo;
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
typedef struct _virDomainInfo virDomainInfo;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
typedef struct _virDomainInterface virDomainInterface;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
typedef struct _virDomainInterfaceIPAddress virDomainIPAddress;
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 3)
typedef struct _virDomainInterfaceStats virDomainInterfaceStatsStruct;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
typedef struct _virDomainJobInfo virDomainJobInfo;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
typedef struct _virDomainMemoryStat virDomainMemoryStatStruct;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef struct _virDomainSnapshot virDomainSnapshot;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
typedef struct _virDomainStatsRecord virDomainStatsRecord;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
typedef struct _virError virError;
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 4)
typedef struct _virInterface virInterface;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef struct _virNWFilter virNWFilter;
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
typedef struct _virNWFilterBinding virNWFilterBinding;
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 0)
typedef struct _virNetwork virNetwork;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
typedef struct _virNetworkDHCPLease virNetworkDHCPLease;
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
typedef struct _virNetworkPort virNetworkPort;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
typedef struct _virNodeCPUStats virNodeCPUStats;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef struct _virNodeDevice virNodeDevice;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
typedef struct _virNodeInfo virNodeInfo;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
typedef struct _virNodeMemoryStats virNodeMemoryStats;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
typedef struct _virSecret virSecret;
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
typedef struct _virSecurityLabel virSecurityLabel;
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
typedef struct _virSecurityModel virSecurityModel;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef struct _virStoragePool virStoragePool;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef struct _virStoragePoolInfo virStoragePoolInfo;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef struct _virStorageVol virStorageVol;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef struct _virStorageVolInfo virStorageVolInfo;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
typedef struct _virStream virStream;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
typedef struct _virTypedParameter virBlkioParameter;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef struct _virTypedParameter virTypedParameter;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
typedef struct _virTypedParameter virMemoryParameter;
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
typedef struct _virTypedParameter virSchedParameter;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
typedef struct _virVcpuInfo virVcpuInfo;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
typedef virBlkioParameter * virBlkioParameterPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
typedef enum virBlkioParameterType virBlkioParameterType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
typedef enum virCPUCompareResult virCPUCompareResult;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef virConnectAuth * virConnectAuthPtr;
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 2)
typedef enum virConnectBaselineCPUFlags virConnectBaselineCPUFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
typedef enum virConnectCloseReason virConnectCloseReason;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
typedef enum virConnectCompareCPUFlags virConnectCompareCPUFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef virConnectCredential * virConnectCredentialPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef enum virConnectCredentialType virConnectCredentialType;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
typedef enum virConnectDomainEventAgentLifecycleReason virConnectDomainEventAgentLifecycleReason;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
typedef enum virConnectDomainEventAgentLifecycleState virConnectDomainEventAgentLifecycleState;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
typedef enum virConnectDomainEventBlockJobStatus virConnectDomainEventBlockJobStatus;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
typedef enum virConnectDomainEventDiskChangeReason virConnectDomainEventDiskChangeReason;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef enum virConnectFlags virConnectFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
typedef enum virConnectGetAllDomainStatsFlags virConnectGetAllDomainStatsFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
typedef enum virConnectListAllDomainsFlags virConnectListAllDomainsFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virConnectListAllInterfacesFlags virConnectListAllInterfacesFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virConnectListAllNetworksFlags virConnectListAllNetworksFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virConnectListAllNodeDeviceFlags virConnectListAllNodeDeviceFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virConnectListAllSecretsFlags virConnectListAllSecretsFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virConnectListAllStoragePoolsFlags virConnectListAllStoragePoolsFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
typedef virConnect * virConnectPtr;
#endif
#if !LIBVIR_CHECK_VERSION(5, 10, 0)
typedef enum virDomainAgentResponseTimeoutValues virDomainAgentResponseTimeoutValues;
#endif
#if !LIBVIR_CHECK_VERSION(6, 10, 0)
typedef enum virDomainAuthorizedSSHKeysSetFlags virDomainAuthorizedSSHKeysSetFlags;
#endif
#if !LIBVIR_CHECK_VERSION(6, 0, 0)
typedef enum virDomainBackupBeginFlags virDomainBackupBeginFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virDomainBlockCommitFlags virDomainBlockCommitFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
typedef enum virDomainBlockCopyFlags virDomainBlockCopyFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 1)
typedef virDomainBlockInfo * virDomainBlockInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
typedef enum virDomainBlockJobAbortFlags virDomainBlockJobAbortFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
typedef unsigned long long virDomainBlockJobCursor;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
typedef enum virDomainBlockJobInfoFlags virDomainBlockJobInfoFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
typedef virDomainBlockJobInfo * virDomainBlockJobInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
typedef enum virDomainBlockJobSetSpeedFlags virDomainBlockJobSetSpeedFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
typedef enum virDomainBlockJobType virDomainBlockJobType;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
typedef enum virDomainBlockPullFlags virDomainBlockPullFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 12)
typedef enum virDomainBlockRebaseFlags virDomainBlockRebaseFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
typedef enum virDomainBlockResizeFlags virDomainBlockResizeFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 2)
typedef virDomainBlockStatsStruct * virDomainBlockStatsPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef enum virDomainBlockedReason virDomainBlockedReason;
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 2)
typedef enum virDomainChannelFlags virDomainChannelFlags;
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
typedef enum virDomainCheckpointCreateFlags virDomainCheckpointCreateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
typedef enum virDomainCheckpointDeleteFlags virDomainCheckpointDeleteFlags;
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
typedef enum virDomainCheckpointListFlags virDomainCheckpointListFlags;
#endif
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
typedef virDomainCheckpoint * virDomainCheckpointPtr;
#endif
#if !LIBVIR_CHECK_VERSION(5, 6, 0)
typedef enum virDomainCheckpointXMLFlags virDomainCheckpointXMLFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
typedef enum virDomainConsoleFlags virDomainConsoleFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
typedef enum virDomainControlErrorReason virDomainControlErrorReason;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
typedef virDomainControlInfo * virDomainControlInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
typedef enum virDomainControlState virDomainControlState;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
typedef enum virDomainCoreDumpFlags virDomainCoreDumpFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
typedef enum virDomainCoreDumpFormat virDomainCoreDumpFormat;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef enum virDomainCrashedReason virDomainCrashedReason;
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
typedef enum virDomainCreateFlags virDomainCreateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 12)
typedef enum virDomainDefineFlags virDomainDefineFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
typedef enum virDomainDestroyFlagsValues virDomainDestroyFlagsValues;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
typedef enum virDomainDeviceModifyFlags virDomainDeviceModifyFlags;
#endif
#if !LIBVIR_CHECK_VERSION(8, 1, 0)
typedef enum virDomainDirtyRateCalcFlags virDomainDirtyRateCalcFlags;
#endif
#if !LIBVIR_CHECK_VERSION(7, 2, 0)
typedef enum virDomainDirtyRateStatus virDomainDirtyRateStatus;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
typedef enum virDomainDiskErrorCode virDomainDiskErrorCode;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
typedef virDomainDiskError * virDomainDiskErrorPtr;
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
typedef enum virDomainEventCrashedDetailType virDomainEventCrashedDetailType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef enum virDomainEventDefinedDetailType virDomainEventDefinedDetailType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef virDomainEventGraphicsAddress * virDomainEventGraphicsAddressPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef enum virDomainEventGraphicsAddressType virDomainEventGraphicsAddressType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef enum virDomainEventGraphicsPhase virDomainEventGraphicsPhase;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef virDomainEventGraphicsSubjectIdentity * virDomainEventGraphicsSubjectIdentityPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef virDomainEventGraphicsSubject * virDomainEventGraphicsSubjectPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef enum virDomainEventID virDomainEventID;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef enum virDomainEventIOErrorAction virDomainEventIOErrorAction;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virDomainEventPMSuspendedDetailType virDomainEventPMSuspendedDetailType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef enum virDomainEventResumedDetailType virDomainEventResumedDetailType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
typedef enum virDomainEventShutdownDetailType virDomainEventShutdownDetailType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef enum virDomainEventStartedDetailType virDomainEventStartedDetailType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef enum virDomainEventStoppedDetailType virDomainEventStoppedDetailType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef enum virDomainEventSuspendedDetailType virDomainEventSuspendedDetailType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
typedef enum virDomainEventTrayChangeReason virDomainEventTrayChangeReason;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef enum virDomainEventType virDomainEventType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef enum virDomainEventUndefinedDetailType virDomainEventUndefinedDetailType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef enum virDomainEventWatchdogAction virDomainEventWatchdogAction;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
typedef virDomainFSInfo * virDomainFSInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(6, 1, 0)
typedef enum virDomainGetHostnameFlags virDomainGetHostnameFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
typedef enum virDomainGetJobStatsFlags virDomainGetJobStatsFlags;
#endif
#if !LIBVIR_CHECK_VERSION(5, 7, 0)
typedef enum virDomainGuestInfoTypes virDomainGuestInfoTypes;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
typedef virDomainIOThreadInfo * virDomainIOThreadInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
typedef virDomainIPAddress * virDomainIPAddressPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
typedef virDomainInfo * virDomainInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
typedef enum virDomainInterfaceAddressesSource virDomainInterfaceAddressesSource;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
typedef virDomainInterface * virDomainInterfacePtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 2)
typedef virDomainInterfaceStatsStruct * virDomainInterfaceStatsPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
typedef virDomainJobInfo * virDomainJobInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(3, 3, 0)
typedef enum virDomainJobOperation virDomainJobOperation;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
typedef enum virDomainJobType virDomainJobType;
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
typedef enum virDomainLifecycle virDomainLifecycle;
#endif
#if !LIBVIR_CHECK_VERSION(3, 9, 0)
typedef enum virDomainLifecycleAction virDomainLifecycleAction;
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
typedef enum virDomainMemoryFailureActionType virDomainMemoryFailureActionType;
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
typedef enum virDomainMemoryFailureFlags virDomainMemoryFailureFlags;
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
typedef enum virDomainMemoryFailureRecipientType virDomainMemoryFailureRecipientType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 4)
typedef enum virDomainMemoryFlags virDomainMemoryFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
typedef enum virDomainMemoryModFlags virDomainMemoryModFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
typedef virDomainMemoryStatStruct * virDomainMemoryStatPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
typedef enum virDomainMemoryStatTags virDomainMemoryStatTags;
#endif
#if !LIBVIR_CHECK_VERSION(7, 1, 0)
typedef enum virDomainMessageType virDomainMessageType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
typedef enum virDomainMetadataType virDomainMetadataType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 2)
typedef enum virDomainMigrateFlags virDomainMigrateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(5, 1, 0)
typedef enum virDomainMigrateMaxSpeedFlags virDomainMigrateMaxSpeedFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef enum virDomainModificationImpact virDomainModificationImpact;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef enum virDomainNostateReason virDomainNostateReason;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 9)
typedef enum virDomainNumatuneMemMode virDomainNumatuneMemMode;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
typedef enum virDomainOpenGraphicsFlags virDomainOpenGraphicsFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
typedef enum virDomainPMSuspendedDiskReason virDomainPMSuspendedDiskReason;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
typedef enum virDomainPMSuspendedReason virDomainPMSuspendedReason;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef enum virDomainPausedReason virDomainPausedReason;
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
typedef enum virDomainProcessSignal virDomainProcessSignal;
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
typedef virDomain * virDomainPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
typedef enum virDomainRebootFlagValues virDomainRebootFlagValues;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef enum virDomainRunningReason virDomainRunningReason;
#endif
#if !LIBVIR_CHECK_VERSION(5, 1, 0)
typedef enum virDomainSaveImageXMLFlags virDomainSaveImageXMLFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
typedef enum virDomainSaveRestoreFlags virDomainSaveRestoreFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 5)
typedef enum virDomainSetTimeFlags virDomainSetTimeFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 16)
typedef enum virDomainSetUserPasswordFlags virDomainSetUserPasswordFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
typedef enum virDomainShutdownFlagValues virDomainShutdownFlagValues;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef enum virDomainShutdownReason virDomainShutdownReason;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef enum virDomainShutoffReason virDomainShutoffReason;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
typedef enum virDomainSnapshotCreateFlags virDomainSnapshotCreateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef enum virDomainSnapshotDeleteFlags virDomainSnapshotDeleteFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
typedef enum virDomainSnapshotListFlags virDomainSnapshotListFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef virDomainSnapshot * virDomainSnapshotPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 5)
typedef enum virDomainSnapshotRevertFlags virDomainSnapshotRevertFlags;
#endif
#if !LIBVIR_CHECK_VERSION(5, 1, 0)
typedef enum virDomainSnapshotXMLFlags virDomainSnapshotXMLFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
typedef enum virDomainState virDomainState;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
typedef virDomainStatsRecord * virDomainStatsRecordPtr;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
typedef enum virDomainStatsTypes virDomainStatsTypes;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
typedef enum virDomainUndefineFlagsValues virDomainUndefineFlagsValues;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
typedef enum virDomainVcpuFlags virDomainVcpuFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 3, 3)
typedef enum virDomainXMLFlags virDomainXMLFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
typedef enum virErrorDomain virErrorDomain;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
typedef enum virErrorLevel virErrorLevel;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
typedef enum virErrorNumber virErrorNumber;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
typedef virError * virErrorPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef enum virEventHandleType virEventHandleType;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
typedef enum virIPAddrType virIPAddrType;
#endif
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
typedef enum virInterfaceDefineFlags virInterfaceDefineFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 4)
typedef virInterface * virInterfacePtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 3)
typedef enum virInterfaceXMLFlags virInterfaceXMLFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
typedef enum virKeycodeSet virKeycodeSet;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
typedef virMemoryParameter * virMemoryParameterPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 5)
typedef enum virMemoryParameterType virMemoryParameterType;
#endif
#if !LIBVIR_CHECK_VERSION(7, 8, 0)
typedef enum virNWFilterBindingCreateFlags virNWFilterBindingCreateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
typedef virNWFilterBinding * virNWFilterBindingPtr;
#endif
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
typedef enum virNWFilterDefineFlags virNWFilterDefineFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef virNWFilter * virNWFilterPtr;
#endif
#if !LIBVIR_CHECK_VERSION(7, 8, 0)
typedef enum virNetworkCreateFlags virNetworkCreateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
typedef virNetworkDHCPLease * virNetworkDHCPLeasePtr;
#endif
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
typedef enum virNetworkDefineFlags virNetworkDefineFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
typedef enum virNetworkEventID virNetworkEventID;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
typedef enum virNetworkEventLifecycleType virNetworkEventLifecycleType;
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
typedef enum virNetworkPortCreateFlags virNetworkPortCreateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
typedef virNetworkPort * virNetworkPortPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 0)
typedef virNetwork * virNetworkPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virNetworkUpdateCommand virNetworkUpdateCommand;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virNetworkUpdateFlags virNetworkUpdateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 2)
typedef enum virNetworkUpdateSection virNetworkUpdateSection;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
typedef enum virNetworkXMLFlags virNetworkXMLFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
typedef enum virNodeAllocPagesFlags virNodeAllocPagesFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
typedef virNodeCPUStats * virNodeCPUStatsPtr;
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
typedef enum virNodeDeviceEventID virNodeDeviceEventID;
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
typedef enum virNodeDeviceEventLifecycleType virNodeDeviceEventLifecycleType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef virNodeDevice * virNodeDevicePtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
typedef enum virNodeGetCPUStatsAllCPUs virNodeGetCPUStatsAllCPUs;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
typedef enum virNodeGetMemoryStatsAllCells virNodeGetMemoryStatsAllCells;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
typedef virNodeInfo * virNodeInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
typedef virNodeMemoryStats * virNodeMemoryStatsPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
typedef enum virNodeSuspendTarget virNodeSuspendTarget;
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
typedef virSchedParameter * virSchedParameterPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 2, 3)
typedef enum virSchedParameterType virSchedParameterType;
#endif
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
typedef enum virSecretDefineFlags virSecretDefineFlags;
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
typedef enum virSecretEventID virSecretEventID;
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
typedef enum virSecretEventLifecycleType virSecretEventLifecycleType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
typedef virSecret * virSecretPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
typedef enum virSecretUsageType virSecretUsageType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
typedef virSecurityLabel * virSecurityLabelPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
typedef virSecurityModel * virSecurityModelPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef enum virStoragePoolBuildFlags virStoragePoolBuildFlags;
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 1)
typedef enum virStoragePoolCreateFlags virStoragePoolCreateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(7, 7, 0)
typedef enum virStoragePoolDefineFlags virStoragePoolDefineFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef enum virStoragePoolDeleteFlags virStoragePoolDeleteFlags;
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
typedef enum virStoragePoolEventID virStoragePoolEventID;
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
typedef enum virStoragePoolEventLifecycleType virStoragePoolEventLifecycleType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef virStoragePoolInfo * virStoragePoolInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef virStoragePool * virStoragePoolPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef enum virStoragePoolState virStoragePoolState;
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 1)
typedef enum virStorageVolCreateFlags virStorageVolCreateFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef enum virStorageVolDeleteFlags virStorageVolDeleteFlags;
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
typedef enum virStorageVolDownloadFlags virStorageVolDownloadFlags;
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
typedef enum virStorageVolInfoFlags virStorageVolInfoFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef virStorageVolInfo * virStorageVolInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef virStorageVol * virStorageVolPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
typedef enum virStorageVolResizeFlags virStorageVolResizeFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef enum virStorageVolType virStorageVolType;
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
typedef enum virStorageVolUploadFlags virStorageVolUploadFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
typedef enum virStorageVolWipeAlgorithm virStorageVolWipeAlgorithm;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 13)
typedef enum virStorageXMLFlags virStorageXMLFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
typedef enum virStreamEventType virStreamEventType;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
typedef enum virStreamFlags virStreamFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
typedef virStream * virStreamPtr;
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
typedef enum virStreamRecvFlagsValues virStreamRecvFlagsValues;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 8)
typedef enum virTypedParameterFlags virTypedParameterFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef virTypedParameter * virTypedParameterPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 2)
typedef enum virTypedParameterType virTypedParameterType;
#endif
#if !LIBVIR_CHECK_VERSION(6, 10, 0)
typedef enum virVcpuHostCpuState virVcpuHostCpuState;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
typedef virVcpuInfo * virVcpuInfoPtr;
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
typedef enum virVcpuState virVcpuState;
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
typedef enum virConnectDomainQemuMonitorEventRegisterFlags virConnectDomainQemuMonitorEventRegisterFlags;
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
typedef enum virDomainQemuAgentCommandTimeoutValues virDomainQemuAgentCommandTimeoutValues;
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 8)
typedef enum virDomainQemuMonitorCommandFlags virDomainQemuMonitorCommandFlags;
#endif
typedef void (*virFreeCallback)(void * opaque);
typedef void (*virEventTimeoutCallback)(int timer,
                                        void * opaque);
typedef void (*virEventHandleCallback)(int watch,
                                       int fd,
                                       int events,
                                       void * opaque);
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
typedef int (*virConnectAuthCallbackPtr)(virConnectCredentialPtr cred,
                                         unsigned int ncred,
                                         void * cbdata);
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
typedef void (*virConnectCloseFunc)(virConnectPtr conn,
                                    int reason,
                                    void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
typedef void (*virConnectDomainEventAgentLifecycleCallback)(virConnectPtr conn,
                                                            virDomainPtr dom,
                                                            int state,
                                                            int reason,
                                                            void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 10, 0)
typedef void (*virConnectDomainEventBalloonChangeCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           unsigned long long actual,
                                                           void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
typedef void (*virConnectDomainEventBlockJobCallback)(virConnectPtr conn,
                                                      virDomainPtr dom,
                                                      const char * disk,
                                                      int type,
                                                      int status,
                                                      void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(3, 2, 0)
typedef void (*virConnectDomainEventBlockThresholdCallback)(virConnectPtr conn,
                                                            virDomainPtr dom,
                                                            const char * dev,
                                                            const char * path,
                                                            unsigned long long threshold,
                                                            unsigned long long excess,
                                                            void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef int (*virConnectDomainEventCallback)(virConnectPtr conn,
                                             virDomainPtr dom,
                                             int event,
                                             int detail,
                                             void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 15)
typedef void (*virConnectDomainEventDeviceAddedCallback)(virConnectPtr conn,
                                                         virDomainPtr dom,
                                                         const char * devAlias,
                                                         void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 4)
typedef void (*virConnectDomainEventDeviceRemovalFailedCallback)(virConnectPtr conn,
                                                                 virDomainPtr dom,
                                                                 const char * devAlias,
                                                                 void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 1, 1)
typedef void (*virConnectDomainEventDeviceRemovedCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           const char * devAlias,
                                                           void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 7)
typedef void (*virConnectDomainEventDiskChangeCallback)(virConnectPtr conn,
                                                        virDomainPtr dom,
                                                        const char * oldSrcPath,
                                                        const char * newSrcPath,
                                                        const char * devAlias,
                                                        int reason,
                                                        void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef void (*virConnectDomainEventGenericCallback)(virConnectPtr conn,
                                                     virDomainPtr dom,
                                                     void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef void (*virConnectDomainEventGraphicsCallback)(virConnectPtr conn,
                                                      virDomainPtr dom,
                                                      int phase,
                                                      const virDomainEventGraphicsAddress * local,
                                                      const virDomainEventGraphicsAddress * remote,
                                                      const char * authScheme,
                                                      const virDomainEventGraphicsSubject * subject,
                                                      void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef void (*virConnectDomainEventIOErrorCallback)(virConnectPtr conn,
                                                     virDomainPtr dom,
                                                     const char * srcPath,
                                                     const char * devAlias,
                                                     int action,
                                                     void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 1)
typedef void (*virConnectDomainEventIOErrorReasonCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           const char * srcPath,
                                                           const char * devAlias,
                                                           int action,
                                                           const char * reason,
                                                           void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 3)
typedef void (*virConnectDomainEventJobCompletedCallback)(virConnectPtr conn,
                                                          virDomainPtr dom,
                                                          virTypedParameterPtr params,
                                                          int nparams,
                                                          void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(7, 9, 0)
typedef void (*virConnectDomainEventMemoryDeviceSizeChangeCallback)(virConnectPtr conn,
                                                                    virDomainPtr dom,
                                                                    const char * alias,
                                                                    unsigned long long size,
                                                                    void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(6, 9, 0)
typedef void (*virConnectDomainEventMemoryFailureCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           int recipient,
                                                           int action,
                                                           unsigned int flags,
                                                           void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
typedef void (*virConnectDomainEventMetadataChangeCallback)(virConnectPtr conn,
                                                            virDomainPtr dom,
                                                            int type,
                                                            const char * nsuri,
                                                            void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 3, 2)
typedef void (*virConnectDomainEventMigrationIterationCallback)(virConnectPtr conn,
                                                                virDomainPtr dom,
                                                                int iteration,
                                                                void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
typedef void (*virConnectDomainEventPMSuspendCallback)(virConnectPtr conn,
                                                       virDomainPtr dom,
                                                       int reason,
                                                       void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 0, 0)
typedef void (*virConnectDomainEventPMSuspendDiskCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           int reason,
                                                           void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
typedef void (*virConnectDomainEventPMWakeupCallback)(virConnectPtr conn,
                                                      virDomainPtr dom,
                                                      int reason,
                                                      void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef void (*virConnectDomainEventRTCChangeCallback)(virConnectPtr conn,
                                                       virDomainPtr dom,
                                                       long long utcoffset,
                                                       void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 9, 11)
typedef void (*virConnectDomainEventTrayChangeCallback)(virConnectPtr conn,
                                                        virDomainPtr dom,
                                                        const char * devAlias,
                                                        int reason,
                                                        void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 9)
typedef void (*virConnectDomainEventTunableCallback)(virConnectPtr conn,
                                                     virDomainPtr dom,
                                                     virTypedParameterPtr params,
                                                     int nparams,
                                                     void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
typedef void (*virConnectDomainEventWatchdogCallback)(virConnectPtr conn,
                                                      virDomainPtr dom,
                                                      int action,
                                                      void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
typedef void (*virConnectNetworkEventGenericCallback)(virConnectPtr conn,
                                                      virNetworkPtr net,
                                                      void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 1)
typedef void (*virConnectNetworkEventLifecycleCallback)(virConnectPtr conn,
                                                        virNetworkPtr net,
                                                        int event,
                                                        int detail,
                                                        void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
typedef void (*virConnectNodeDeviceEventGenericCallback)(virConnectPtr conn,
                                                         virNodeDevicePtr dev,
                                                         void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(2, 2, 0)
typedef void (*virConnectNodeDeviceEventLifecycleCallback)(virConnectPtr conn,
                                                           virNodeDevicePtr dev,
                                                           int event,
                                                           int detail,
                                                           void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
typedef void (*virConnectSecretEventGenericCallback)(virConnectPtr conn,
                                                     virSecretPtr secret,
                                                     void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(3, 0, 0)
typedef void (*virConnectSecretEventLifecycleCallback)(virConnectPtr conn,
                                                       virSecretPtr secret,
                                                       int event,
                                                       int detail,
                                                       void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
typedef void (*virConnectStoragePoolEventGenericCallback)(virConnectPtr conn,
                                                          virStoragePoolPtr pool,
                                                          void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(2, 0, 0)
typedef void (*virConnectStoragePoolEventLifecycleCallback)(virConnectPtr conn,
                                                            virStoragePoolPtr pool,
                                                            int event,
                                                            int detail,
                                                            void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
typedef void (*virErrorFunc)(void * userData,
                             virErrorPtr error);
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef int (*virEventAddHandleFunc)(int fd,
                                     int event,
                                     virEventHandleCallback cb,
                                     void * opaque,
                                     virFreeCallback ff);
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef int (*virEventAddTimeoutFunc)(int timeout,
                                      virEventTimeoutCallback cb,
                                      void * opaque,
                                      virFreeCallback ff);
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef int (*virEventRemoveHandleFunc)(int watch);
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef int (*virEventRemoveTimeoutFunc)(int timer);
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef void (*virEventUpdateHandleFunc)(int watch,
                                         int event);
#endif
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
typedef void (*virEventUpdateTimeoutFunc)(int timer,
                                          int timeout);
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
typedef void (*virStreamEventCallback)(virStreamPtr stream,
                                       int events,
                                       void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
typedef int (*virStreamSinkFunc)(virStreamPtr st,
                                 const char * data,
                                 size_t nbytes,
                                 void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
typedef int (*virStreamSinkHoleFunc)(virStreamPtr st,
                                     long long length,
                                     void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
typedef int (*virStreamSourceFunc)(virStreamPtr st,
                                   char * data,
                                   size_t nbytes,
                                   void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
typedef int (*virStreamSourceHoleFunc)(virStreamPtr st,
                                       int * inData,
                                       long long * length,
                                       void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(3, 4, 0)
typedef int (*virStreamSourceSkipFunc)(virStreamPtr st,
                                       long long length,
                                       void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(1, 2, 3)
typedef void (*virConnectDomainQemuMonitorEventCallback)(virConnectPtr conn,
                                                         virDomainPtr dom,
                                                         const char * event,
                                                         long long seconds,
                                                         unsigned int micros,
                                                         const char * details,
                                                         void * opaque);
#endif
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
struct _virConnect {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
struct _virConnectAuth {
  int * credtype;
  unsigned int ncredtype;
  virConnectAuthCallbackPtr cb;
  void * cbdata;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
struct _virConnectCredential {
  int type;
  const char * prompt;
  const char * challenge;
  const char * defresult;
  char * result;
  unsigned int resultlen;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
struct _virDomain {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 8, 1)
struct _virDomainBlockInfo {
  unsigned long long capacity;
  unsigned long long allocation;
  unsigned long long physical;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 9, 4)
struct _virDomainBlockJobInfo {
  int type;
  unsigned long bandwidth;
  virDomainBlockJobCursor cur;
  virDomainBlockJobCursor end;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 3, 3)
struct _virDomainBlockStats {
  long long rd_req;
  long long rd_bytes;
  long long wr_req;
  long long wr_bytes;
  long long errs;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(5, 2, 0)
struct _virDomainCheckpoint {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
struct _virDomainControlInfo {
  unsigned int state;
  unsigned int details;
  unsigned long long stateTime;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 9, 10)
struct _virDomainDiskError {
  char * disk;
  int error;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
struct _virDomainEventGraphicsAddress {
  int family;
  char * node;
  char * service;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
struct _virDomainEventGraphicsSubject {
  int nidentity;
  virDomainEventGraphicsSubjectIdentityPtr identities;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
struct _virDomainEventGraphicsSubjectIdentity {
  char * type;
  char * name;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(1, 2, 11)
struct _virDomainFSInfo {
  char * mountpoint;
  char * name;
  char * fstype;
  size_t ndevAlias;
  char ** devAlias;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
struct _virDomainIOThreadInfo {
  unsigned int iothread_id;
  unsigned char * cpumap;
  int cpumaplen;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 0, 1)
struct _virDomainInfo {
  unsigned char state;
  unsigned long maxMem;
  unsigned long memory;
  unsigned short nrVirtCpu;
  unsigned long long cpuTime;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
struct _virDomainInterface {
  char * name;
  char * hwaddr;
  unsigned int naddrs;
  virDomainIPAddressPtr addrs;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(1, 2, 14)
struct _virDomainInterfaceIPAddress {
  int type;
  char * addr;
  unsigned int prefix;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 3, 3)
struct _virDomainInterfaceStats {
  long long rx_bytes;
  long long rx_packets;
  long long rx_errs;
  long long rx_drop;
  long long tx_bytes;
  long long tx_packets;
  long long tx_errs;
  long long tx_drop;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 7, 7)
struct _virDomainJobInfo {
  int type;
  unsigned long long timeElapsed;
  unsigned long long timeRemaining;
  unsigned long long dataTotal;
  unsigned long long dataProcessed;
  unsigned long long dataRemaining;
  unsigned long long memTotal;
  unsigned long long memProcessed;
  unsigned long long memRemaining;
  unsigned long long fileTotal;
  unsigned long long fileProcessed;
  unsigned long long fileRemaining;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 7, 5)
struct _virDomainMemoryStat {
  int tag;
  unsigned long long val;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
struct _virDomainSnapshot {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(1, 2, 8)
struct _virDomainStatsRecord {
  virDomainPtr dom;
  virTypedParameterPtr params;
  int nparams;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
struct _virError {
  int code;
  int domain;
  char * message;
  virErrorLevel level;
  virConnectPtr conn;
  virDomainPtr dom;
  char * str1;
  char * str2;
  char * str3;
  int int1;
  int int2;
  virNetworkPtr net;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 6, 4)
struct _virInterface {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 8, 0)
struct _virNWFilter {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(4, 5, 0)
struct _virNWFilterBinding {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 2, 0)
struct _virNetwork {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(1, 2, 6)
struct _virNetworkDHCPLease {
  char * iface;
  long long expirytime;
  int type;
  char * mac;
  char * iaid;
  char * ipaddr;
  unsigned int prefix;
  char * hostname;
  char * clientid;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(5, 5, 0)
struct _virNetworkPort {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
struct _virNodeCPUStats {
  char field[VIR_NODE_CPU_STATS_FIELD_LENGTH];
  unsigned long long value;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 5, 0)
struct _virNodeDevice {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 1, 0)
struct _virNodeInfo {
  char model[32];
  unsigned long memory;
  unsigned int cpus;
  unsigned int mhz;
  unsigned int nodes;
  unsigned int sockets;
  unsigned int cores;
  unsigned int threads;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 9, 3)
struct _virNodeMemoryStats {
  char field[VIR_NODE_MEMORY_STATS_FIELD_LENGTH];
  unsigned long long value;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 7, 1)
struct _virSecret {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
struct _virSecurityLabel {
  char label[VIR_SECURITY_LABEL_BUFLEN];
  int enforcing;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 6, 1)
struct _virSecurityModel {
  char model[VIR_SECURITY_MODEL_BUFLEN];
  char doi[VIR_SECURITY_DOI_BUFLEN];
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
struct _virStoragePool {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
struct _virStoragePoolInfo {
  int state;
  unsigned long long capacity;
  unsigned long long allocation;
  unsigned long long available;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
struct _virStorageVol {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 4, 1)
struct _virStorageVolInfo {
  int type;
  unsigned long long capacity;
  unsigned long long allocation;
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 7, 2)
struct _virStream {
};
#endif
    
#if !LIBVIR_CHECK_VERSION(0, 9, 0)
struct _virTypedParameter {
  char field[VIR_TYPED_PARAM_FIELD_LENGTH];
  int type;
  union {
    int i;
    unsigned int ui;
    long long int l;
    unsigned long long int ul;
    double d;
    char b;
    char * s;
  } value;
};
#endif
    
    
    
    
#if !LIBVIR_CHECK_VERSION(0, 1, 4)
struct _virVcpuInfo {
  unsigned int number;
  int state;
  unsigned long long cpuTime;
  int cpu;
};
#endif
    

