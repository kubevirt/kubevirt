/*
 * This file is part of the libvirt-go-module project
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * Copyright (C) 2021 Red Hat, Inc.
 *
 */


#include <stddef.h>
#pragma once
enum virBlkioParameterType {
  VIR_DOMAIN_BLKIO_PARAM_INT = 0x1,
  VIR_DOMAIN_BLKIO_PARAM_UINT = 0x2,
  VIR_DOMAIN_BLKIO_PARAM_LLONG = 0x3,
  VIR_DOMAIN_BLKIO_PARAM_ULLONG = 0x4,
  VIR_DOMAIN_BLKIO_PARAM_DOUBLE = 0x5,
  VIR_DOMAIN_BLKIO_PARAM_BOOLEAN = 0x6,
};
enum virCPUCompareResult {
  VIR_CPU_COMPARE_ERROR = -0x1,
  VIR_CPU_COMPARE_INCOMPATIBLE = 0x0,
  VIR_CPU_COMPARE_IDENTICAL = 0x1,
  VIR_CPU_COMPARE_SUPERSET = 0x2,
  VIR_CPU_COMPARE_LAST = 0x3,
};
enum virConnectBaselineCPUFlags {
  VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES = 0x1,
  VIR_CONNECT_BASELINE_CPU_MIGRATABLE = 0x2,
};
enum virConnectCloseReason {
  VIR_CONNECT_CLOSE_REASON_ERROR = 0x0,
  VIR_CONNECT_CLOSE_REASON_EOF = 0x1,
  VIR_CONNECT_CLOSE_REASON_KEEPALIVE = 0x2,
  VIR_CONNECT_CLOSE_REASON_CLIENT = 0x3,
  VIR_CONNECT_CLOSE_REASON_LAST = 0x4,
};
enum virConnectCompareCPUFlags {
  VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE = 0x1,
  VIR_CONNECT_COMPARE_CPU_VALIDATE_XML = 0x2,
};
enum virConnectCredentialType {
  VIR_CRED_USERNAME = 0x1,
  VIR_CRED_AUTHNAME = 0x2,
  VIR_CRED_LANGUAGE = 0x3,
  VIR_CRED_CNONCE = 0x4,
  VIR_CRED_PASSPHRASE = 0x5,
  VIR_CRED_ECHOPROMPT = 0x6,
  VIR_CRED_NOECHOPROMPT = 0x7,
  VIR_CRED_REALM = 0x8,
  VIR_CRED_EXTERNAL = 0x9,
  VIR_CRED_LAST = 0xa,
};
enum virConnectDomainEventAgentLifecycleReason {
  VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_UNKNOWN = 0x0,
  VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_DOMAIN_STARTED = 0x1,
  VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_CHANNEL = 0x2,
  VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_LAST = 0x3,
};
enum virConnectDomainEventAgentLifecycleState {
  VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_CONNECTED = 0x1,
  VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_DISCONNECTED = 0x2,
  VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_LAST = 0x3,
};
enum virConnectDomainEventBlockJobStatus {
  VIR_DOMAIN_BLOCK_JOB_COMPLETED = 0x0,
  VIR_DOMAIN_BLOCK_JOB_FAILED = 0x1,
  VIR_DOMAIN_BLOCK_JOB_CANCELED = 0x2,
  VIR_DOMAIN_BLOCK_JOB_READY = 0x3,
  VIR_DOMAIN_BLOCK_JOB_LAST = 0x4,
};
enum virConnectDomainEventDiskChangeReason {
  VIR_DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START = 0x0,
  VIR_DOMAIN_EVENT_DISK_DROP_MISSING_ON_START = 0x1,
  VIR_DOMAIN_EVENT_DISK_CHANGE_LAST = 0x2,
};
enum virConnectDomainQemuMonitorEventRegisterFlags {
  VIR_CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_REGEX = 0x1,
  VIR_CONNECT_DOMAIN_QEMU_MONITOR_EVENT_REGISTER_NOCASE = 0x2,
};
enum virConnectFlags {
  VIR_CONNECT_RO = 0x1,
  VIR_CONNECT_NO_ALIASES = 0x2,
};
enum virConnectGetAllDomainStatsFlags {
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE = 0x1,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING = 0x10,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE = 0x2,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED = 0x20,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT = 0x20000000,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT = 0x4,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF = 0x40,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_BACKING = 0x40000000,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT = 0x8,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER = 0x80,
  VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS = 0x80000000,
};
enum virConnectListAllDomainsFlags {
  VIR_CONNECT_LIST_DOMAINS_ACTIVE = 0x1,
  VIR_CONNECT_LIST_DOMAINS_RUNNING = 0x10,
  VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE = 0x100,
  VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT = 0x1000,
  VIR_CONNECT_LIST_DOMAINS_INACTIVE = 0x2,
  VIR_CONNECT_LIST_DOMAINS_PAUSED = 0x20,
  VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE = 0x200,
  VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT = 0x2000,
  VIR_CONNECT_LIST_DOMAINS_PERSISTENT = 0x4,
  VIR_CONNECT_LIST_DOMAINS_SHUTOFF = 0x40,
  VIR_CONNECT_LIST_DOMAINS_AUTOSTART = 0x400,
  VIR_CONNECT_LIST_DOMAINS_HAS_CHECKPOINT = 0x4000,
  VIR_CONNECT_LIST_DOMAINS_TRANSIENT = 0x8,
  VIR_CONNECT_LIST_DOMAINS_OTHER = 0x80,
  VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART = 0x800,
  VIR_CONNECT_LIST_DOMAINS_NO_CHECKPOINT = 0x8000,
};
enum virConnectListAllInterfacesFlags {
  VIR_CONNECT_LIST_INTERFACES_INACTIVE = 0x1,
  VIR_CONNECT_LIST_INTERFACES_ACTIVE = 0x2,
};
enum virConnectListAllNetworksFlags {
  VIR_CONNECT_LIST_NETWORKS_INACTIVE = 0x1,
  VIR_CONNECT_LIST_NETWORKS_AUTOSTART = 0x10,
  VIR_CONNECT_LIST_NETWORKS_ACTIVE = 0x2,
  VIR_CONNECT_LIST_NETWORKS_NO_AUTOSTART = 0x20,
  VIR_CONNECT_LIST_NETWORKS_PERSISTENT = 0x4,
  VIR_CONNECT_LIST_NETWORKS_TRANSIENT = 0x8,
};
enum virConnectListAllNodeDeviceFlags {
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM = 0x1,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET = 0x10,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_STORAGE = 0x100,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_DRM = 0x1000,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_CSS_DEV = 0x10000,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_AP_MATRIX = 0x100000,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV = 0x2,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST = 0x20,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST = 0x200,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV_TYPES = 0x2000,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_VDPA = 0x20000,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPD = 0x200000,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV = 0x4,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET = 0x40,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPORTS = 0x400,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV = 0x4000,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_AP_CARD = 0x40000,
  VIR_CONNECT_LIST_NODE_DEVICES_INACTIVE = 0x40000000,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE = 0x8,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI = 0x80,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC = 0x800,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_CCW_DEV = 0x8000,
  VIR_CONNECT_LIST_NODE_DEVICES_CAP_AP_QUEUE = 0x80000,
  VIR_CONNECT_LIST_NODE_DEVICES_ACTIVE = 0x80000000,
};
enum virConnectListAllSecretsFlags {
  VIR_CONNECT_LIST_SECRETS_EPHEMERAL = 0x1,
  VIR_CONNECT_LIST_SECRETS_NO_EPHEMERAL = 0x2,
  VIR_CONNECT_LIST_SECRETS_PRIVATE = 0x4,
  VIR_CONNECT_LIST_SECRETS_NO_PRIVATE = 0x8,
};
enum virConnectListAllStoragePoolsFlags {
  VIR_CONNECT_LIST_STORAGE_POOLS_INACTIVE = 0x1,
  VIR_CONNECT_LIST_STORAGE_POOLS_AUTOSTART = 0x10,
  VIR_CONNECT_LIST_STORAGE_POOLS_NETFS = 0x100,
  VIR_CONNECT_LIST_STORAGE_POOLS_SCSI = 0x1000,
  VIR_CONNECT_LIST_STORAGE_POOLS_GLUSTER = 0x10000,
  VIR_CONNECT_LIST_STORAGE_POOLS_ACTIVE = 0x2,
  VIR_CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART = 0x20,
  VIR_CONNECT_LIST_STORAGE_POOLS_LOGICAL = 0x200,
  VIR_CONNECT_LIST_STORAGE_POOLS_MPATH = 0x2000,
  VIR_CONNECT_LIST_STORAGE_POOLS_ZFS = 0x20000,
  VIR_CONNECT_LIST_STORAGE_POOLS_PERSISTENT = 0x4,
  VIR_CONNECT_LIST_STORAGE_POOLS_DIR = 0x40,
  VIR_CONNECT_LIST_STORAGE_POOLS_DISK = 0x400,
  VIR_CONNECT_LIST_STORAGE_POOLS_RBD = 0x4000,
  VIR_CONNECT_LIST_STORAGE_POOLS_VSTORAGE = 0x40000,
  VIR_CONNECT_LIST_STORAGE_POOLS_TRANSIENT = 0x8,
  VIR_CONNECT_LIST_STORAGE_POOLS_FS = 0x80,
  VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI = 0x800,
  VIR_CONNECT_LIST_STORAGE_POOLS_SHEEPDOG = 0x8000,
  VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI_DIRECT = 0x80000,
};
enum virDomainAgentResponseTimeoutValues {
  VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_DEFAULT = -0x1,
  VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_BLOCK = -0x2,
  VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_NOWAIT = 0x0,
};
enum virDomainAuthorizedSSHKeysSetFlags {
  VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_APPEND = 0x1,
  VIR_DOMAIN_AUTHORIZED_SSH_KEYS_SET_REMOVE = 0x2,
};
enum virDomainBackupBeginFlags {
  VIR_DOMAIN_BACKUP_BEGIN_REUSE_EXTERNAL = 0x1,
};
enum virDomainBlockCommitFlags {
  VIR_DOMAIN_BLOCK_COMMIT_SHALLOW = 0x1,
  VIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES = 0x10,
  VIR_DOMAIN_BLOCK_COMMIT_DELETE = 0x2,
  VIR_DOMAIN_BLOCK_COMMIT_ACTIVE = 0x4,
  VIR_DOMAIN_BLOCK_COMMIT_RELATIVE = 0x8,
};
enum virDomainBlockCopyFlags {
  VIR_DOMAIN_BLOCK_COPY_SHALLOW = 0x1,
  VIR_DOMAIN_BLOCK_COPY_REUSE_EXT = 0x2,
  VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB = 0x4,
  VIR_DOMAIN_BLOCK_COPY_SYNCHRONOUS_WRITES = 0x8,
};
enum virDomainBlockJobAbortFlags {
  VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC = 0x1,
  VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT = 0x2,
};
enum virDomainBlockJobInfoFlags {
  VIR_DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES = 0x1,
};
enum virDomainBlockJobSetSpeedFlags {
  VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES = 0x1,
};
enum virDomainBlockJobType {
  VIR_DOMAIN_BLOCK_JOB_TYPE_UNKNOWN = 0x0,
  VIR_DOMAIN_BLOCK_JOB_TYPE_PULL = 0x1,
  VIR_DOMAIN_BLOCK_JOB_TYPE_COPY = 0x2,
  VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT = 0x3,
  VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT = 0x4,
  VIR_DOMAIN_BLOCK_JOB_TYPE_BACKUP = 0x5,
  VIR_DOMAIN_BLOCK_JOB_TYPE_LAST = 0x6,
};
enum virDomainBlockPullFlags {
  VIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES = 0x40,
};
enum virDomainBlockRebaseFlags {
  VIR_DOMAIN_BLOCK_REBASE_SHALLOW = 0x1,
  VIR_DOMAIN_BLOCK_REBASE_RELATIVE = 0x10,
  VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT = 0x2,
  VIR_DOMAIN_BLOCK_REBASE_COPY_DEV = 0x20,
  VIR_DOMAIN_BLOCK_REBASE_COPY_RAW = 0x4,
  VIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES = 0x40,
  VIR_DOMAIN_BLOCK_REBASE_COPY = 0x8,
};
enum virDomainBlockResizeFlags {
  VIR_DOMAIN_BLOCK_RESIZE_BYTES = 0x1,
};
enum virDomainBlockedReason {
  VIR_DOMAIN_BLOCKED_UNKNOWN = 0x0,
  VIR_DOMAIN_BLOCKED_LAST = 0x1,
};
enum virDomainChannelFlags {
  VIR_DOMAIN_CHANNEL_FORCE = 0x1,
};
enum virDomainCheckpointCreateFlags {
  VIR_DOMAIN_CHECKPOINT_CREATE_REDEFINE = 0x1,
  VIR_DOMAIN_CHECKPOINT_CREATE_QUIESCE = 0x2,
  VIR_DOMAIN_CHECKPOINT_CREATE_REDEFINE_VALIDATE = 0x4,
};
enum virDomainCheckpointDeleteFlags {
  VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN = 0x1,
  VIR_DOMAIN_CHECKPOINT_DELETE_METADATA_ONLY = 0x2,
  VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN_ONLY = 0x4,
};
enum virDomainCheckpointListFlags {
  VIR_DOMAIN_CHECKPOINT_LIST_DESCENDANTS = 0x1,
  VIR_DOMAIN_CHECKPOINT_LIST_ROOTS = 0x1,
  VIR_DOMAIN_CHECKPOINT_LIST_TOPOLOGICAL = 0x2,
  VIR_DOMAIN_CHECKPOINT_LIST_LEAVES = 0x4,
  VIR_DOMAIN_CHECKPOINT_LIST_NO_LEAVES = 0x8,
};
enum virDomainCheckpointXMLFlags {
  VIR_DOMAIN_CHECKPOINT_XML_SECURE = 0x1,
  VIR_DOMAIN_CHECKPOINT_XML_NO_DOMAIN = 0x2,
  VIR_DOMAIN_CHECKPOINT_XML_SIZE = 0x4,
};
enum virDomainConsoleFlags {
  VIR_DOMAIN_CONSOLE_FORCE = 0x1,
  VIR_DOMAIN_CONSOLE_SAFE = 0x2,
};
enum virDomainControlErrorReason {
  VIR_DOMAIN_CONTROL_ERROR_REASON_NONE = 0x0,
  VIR_DOMAIN_CONTROL_ERROR_REASON_UNKNOWN = 0x1,
  VIR_DOMAIN_CONTROL_ERROR_REASON_MONITOR = 0x2,
  VIR_DOMAIN_CONTROL_ERROR_REASON_INTERNAL = 0x3,
  VIR_DOMAIN_CONTROL_ERROR_REASON_LAST = 0x4,
};
enum virDomainControlState {
  VIR_DOMAIN_CONTROL_OK = 0x0,
  VIR_DOMAIN_CONTROL_JOB = 0x1,
  VIR_DOMAIN_CONTROL_OCCUPIED = 0x2,
  VIR_DOMAIN_CONTROL_ERROR = 0x3,
  VIR_DOMAIN_CONTROL_LAST = 0x4,
};
enum virDomainCoreDumpFlags {
  VIR_DUMP_CRASH = 0x1,
  VIR_DUMP_MEMORY_ONLY = 0x10,
  VIR_DUMP_LIVE = 0x2,
  VIR_DUMP_BYPASS_CACHE = 0x4,
  VIR_DUMP_RESET = 0x8,
};
enum virDomainCoreDumpFormat {
  VIR_DOMAIN_CORE_DUMP_FORMAT_RAW = 0x0,
  VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB = 0x1,
  VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO = 0x2,
  VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY = 0x3,
  VIR_DOMAIN_CORE_DUMP_FORMAT_WIN_DMP = 0x4,
  VIR_DOMAIN_CORE_DUMP_FORMAT_LAST = 0x5,
};
enum virDomainCrashedReason {
  VIR_DOMAIN_CRASHED_UNKNOWN = 0x0,
  VIR_DOMAIN_CRASHED_PANICKED = 0x1,
  VIR_DOMAIN_CRASHED_LAST = 0x2,
};
enum virDomainCreateFlags {
  VIR_DOMAIN_NONE = 0x0,
  VIR_DOMAIN_START_PAUSED = 0x1,
  VIR_DOMAIN_START_VALIDATE = 0x10,
  VIR_DOMAIN_START_AUTODESTROY = 0x2,
  VIR_DOMAIN_START_RESET_NVRAM = 0x20,
  VIR_DOMAIN_START_BYPASS_CACHE = 0x4,
  VIR_DOMAIN_START_FORCE_BOOT = 0x8,
};
enum virDomainDefineFlags {
  VIR_DOMAIN_DEFINE_VALIDATE = 0x1,
};
enum virDomainDestroyFlagsValues {
  VIR_DOMAIN_DESTROY_DEFAULT = 0x0,
  VIR_DOMAIN_DESTROY_GRACEFUL = 0x1,
  VIR_DOMAIN_DESTROY_REMOVE_LOGS = 0x2,
};
enum virDomainDeviceModifyFlags {
  VIR_DOMAIN_DEVICE_MODIFY_CURRENT = 0x0,
  VIR_DOMAIN_DEVICE_MODIFY_LIVE = 0x1,
  VIR_DOMAIN_DEVICE_MODIFY_CONFIG = 0x2,
  VIR_DOMAIN_DEVICE_MODIFY_FORCE = 0x4,
};
enum virDomainDirtyRateCalcFlags {
  VIR_DOMAIN_DIRTYRATE_MODE_PAGE_SAMPLING = 0x0,
  VIR_DOMAIN_DIRTYRATE_MODE_DIRTY_BITMAP = 0x1,
  VIR_DOMAIN_DIRTYRATE_MODE_DIRTY_RING = 0x2,
};
enum virDomainDirtyRateStatus {
  VIR_DOMAIN_DIRTYRATE_UNSTARTED = 0x0,
  VIR_DOMAIN_DIRTYRATE_MEASURING = 0x1,
  VIR_DOMAIN_DIRTYRATE_MEASURED = 0x2,
  VIR_DOMAIN_DIRTYRATE_LAST = 0x3,
};
enum virDomainDiskErrorCode {
  VIR_DOMAIN_DISK_ERROR_NONE = 0x0,
  VIR_DOMAIN_DISK_ERROR_UNSPEC = 0x1,
  VIR_DOMAIN_DISK_ERROR_NO_SPACE = 0x2,
  VIR_DOMAIN_DISK_ERROR_LAST = 0x3,
};
enum virDomainEventCrashedDetailType {
  VIR_DOMAIN_EVENT_CRASHED_PANICKED = 0x0,
  VIR_DOMAIN_EVENT_CRASHED_CRASHLOADED = 0x1,
  VIR_DOMAIN_EVENT_CRASHED_LAST = 0x2,
};
enum virDomainEventDefinedDetailType {
  VIR_DOMAIN_EVENT_DEFINED_ADDED = 0x0,
  VIR_DOMAIN_EVENT_DEFINED_UPDATED = 0x1,
  VIR_DOMAIN_EVENT_DEFINED_RENAMED = 0x2,
  VIR_DOMAIN_EVENT_DEFINED_FROM_SNAPSHOT = 0x3,
  VIR_DOMAIN_EVENT_DEFINED_LAST = 0x4,
};
enum virDomainEventGraphicsAddressType {
  VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4 = 0x0,
  VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6 = 0x1,
  VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX = 0x2,
  VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_LAST = 0x3,
};
enum virDomainEventGraphicsPhase {
  VIR_DOMAIN_EVENT_GRAPHICS_CONNECT = 0x0,
  VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE = 0x1,
  VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT = 0x2,
  VIR_DOMAIN_EVENT_GRAPHICS_LAST = 0x3,
};
enum virDomainEventID {
  VIR_DOMAIN_EVENT_ID_LIFECYCLE = 0x0,
  VIR_DOMAIN_EVENT_ID_REBOOT = 0x1,
  VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2 = 0x10,
  VIR_DOMAIN_EVENT_ID_TUNABLE = 0x11,
  VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE = 0x12,
  VIR_DOMAIN_EVENT_ID_DEVICE_ADDED = 0x13,
  VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION = 0x14,
  VIR_DOMAIN_EVENT_ID_JOB_COMPLETED = 0x15,
  VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED = 0x16,
  VIR_DOMAIN_EVENT_ID_METADATA_CHANGE = 0x17,
  VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD = 0x18,
  VIR_DOMAIN_EVENT_ID_MEMORY_FAILURE = 0x19,
  VIR_DOMAIN_EVENT_ID_MEMORY_DEVICE_SIZE_CHANGE = 0x1a,
  VIR_DOMAIN_EVENT_ID_LAST = 0x1b,
  VIR_DOMAIN_EVENT_ID_RTC_CHANGE = 0x2,
  VIR_DOMAIN_EVENT_ID_WATCHDOG = 0x3,
  VIR_DOMAIN_EVENT_ID_IO_ERROR = 0x4,
  VIR_DOMAIN_EVENT_ID_GRAPHICS = 0x5,
  VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON = 0x6,
  VIR_DOMAIN_EVENT_ID_CONTROL_ERROR = 0x7,
  VIR_DOMAIN_EVENT_ID_BLOCK_JOB = 0x8,
  VIR_DOMAIN_EVENT_ID_DISK_CHANGE = 0x9,
  VIR_DOMAIN_EVENT_ID_TRAY_CHANGE = 0xa,
  VIR_DOMAIN_EVENT_ID_PMWAKEUP = 0xb,
  VIR_DOMAIN_EVENT_ID_PMSUSPEND = 0xc,
  VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE = 0xd,
  VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK = 0xe,
  VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED = 0xf,
};
enum virDomainEventIOErrorAction {
  VIR_DOMAIN_EVENT_IO_ERROR_NONE = 0x0,
  VIR_DOMAIN_EVENT_IO_ERROR_PAUSE = 0x1,
  VIR_DOMAIN_EVENT_IO_ERROR_REPORT = 0x2,
  VIR_DOMAIN_EVENT_IO_ERROR_LAST = 0x3,
};
enum virDomainEventPMSuspendedDetailType {
  VIR_DOMAIN_EVENT_PMSUSPENDED_MEMORY = 0x0,
  VIR_DOMAIN_EVENT_PMSUSPENDED_DISK = 0x1,
  VIR_DOMAIN_EVENT_PMSUSPENDED_LAST = 0x2,
};
enum virDomainEventResumedDetailType {
  VIR_DOMAIN_EVENT_RESUMED_UNPAUSED = 0x0,
  VIR_DOMAIN_EVENT_RESUMED_MIGRATED = 0x1,
  VIR_DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT = 0x2,
  VIR_DOMAIN_EVENT_RESUMED_POSTCOPY = 0x3,
  VIR_DOMAIN_EVENT_RESUMED_LAST = 0x4,
};
enum virDomainEventShutdownDetailType {
  VIR_DOMAIN_EVENT_SHUTDOWN_FINISHED = 0x0,
  VIR_DOMAIN_EVENT_SHUTDOWN_GUEST = 0x1,
  VIR_DOMAIN_EVENT_SHUTDOWN_HOST = 0x2,
  VIR_DOMAIN_EVENT_SHUTDOWN_LAST = 0x3,
};
enum virDomainEventStartedDetailType {
  VIR_DOMAIN_EVENT_STARTED_BOOTED = 0x0,
  VIR_DOMAIN_EVENT_STARTED_MIGRATED = 0x1,
  VIR_DOMAIN_EVENT_STARTED_RESTORED = 0x2,
  VIR_DOMAIN_EVENT_STARTED_FROM_SNAPSHOT = 0x3,
  VIR_DOMAIN_EVENT_STARTED_WAKEUP = 0x4,
  VIR_DOMAIN_EVENT_STARTED_LAST = 0x5,
};
enum virDomainEventStoppedDetailType {
  VIR_DOMAIN_EVENT_STOPPED_SHUTDOWN = 0x0,
  VIR_DOMAIN_EVENT_STOPPED_DESTROYED = 0x1,
  VIR_DOMAIN_EVENT_STOPPED_CRASHED = 0x2,
  VIR_DOMAIN_EVENT_STOPPED_MIGRATED = 0x3,
  VIR_DOMAIN_EVENT_STOPPED_SAVED = 0x4,
  VIR_DOMAIN_EVENT_STOPPED_FAILED = 0x5,
  VIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT = 0x6,
  VIR_DOMAIN_EVENT_STOPPED_LAST = 0x7,
};
enum virDomainEventSuspendedDetailType {
  VIR_DOMAIN_EVENT_SUSPENDED_PAUSED = 0x0,
  VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED = 0x1,
  VIR_DOMAIN_EVENT_SUSPENDED_IOERROR = 0x2,
  VIR_DOMAIN_EVENT_SUSPENDED_WATCHDOG = 0x3,
  VIR_DOMAIN_EVENT_SUSPENDED_RESTORED = 0x4,
  VIR_DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT = 0x5,
  VIR_DOMAIN_EVENT_SUSPENDED_API_ERROR = 0x6,
  VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY = 0x7,
  VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED = 0x8,
  VIR_DOMAIN_EVENT_SUSPENDED_LAST = 0x9,
};
enum virDomainEventTrayChangeReason {
  VIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN = 0x0,
  VIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE = 0x1,
  VIR_DOMAIN_EVENT_TRAY_CHANGE_LAST = 0x2,
};
enum virDomainEventType {
  VIR_DOMAIN_EVENT_DEFINED = 0x0,
  VIR_DOMAIN_EVENT_UNDEFINED = 0x1,
  VIR_DOMAIN_EVENT_STARTED = 0x2,
  VIR_DOMAIN_EVENT_SUSPENDED = 0x3,
  VIR_DOMAIN_EVENT_RESUMED = 0x4,
  VIR_DOMAIN_EVENT_STOPPED = 0x5,
  VIR_DOMAIN_EVENT_SHUTDOWN = 0x6,
  VIR_DOMAIN_EVENT_PMSUSPENDED = 0x7,
  VIR_DOMAIN_EVENT_CRASHED = 0x8,
  VIR_DOMAIN_EVENT_LAST = 0x9,
};
enum virDomainEventUndefinedDetailType {
  VIR_DOMAIN_EVENT_UNDEFINED_REMOVED = 0x0,
  VIR_DOMAIN_EVENT_UNDEFINED_RENAMED = 0x1,
  VIR_DOMAIN_EVENT_UNDEFINED_LAST = 0x2,
};
enum virDomainEventWatchdogAction {
  VIR_DOMAIN_EVENT_WATCHDOG_NONE = 0x0,
  VIR_DOMAIN_EVENT_WATCHDOG_PAUSE = 0x1,
  VIR_DOMAIN_EVENT_WATCHDOG_RESET = 0x2,
  VIR_DOMAIN_EVENT_WATCHDOG_POWEROFF = 0x3,
  VIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN = 0x4,
  VIR_DOMAIN_EVENT_WATCHDOG_DEBUG = 0x5,
  VIR_DOMAIN_EVENT_WATCHDOG_INJECTNMI = 0x6,
  VIR_DOMAIN_EVENT_WATCHDOG_LAST = 0x7,
};
enum virDomainGetHostnameFlags {
  VIR_DOMAIN_GET_HOSTNAME_LEASE = 0x1,
  VIR_DOMAIN_GET_HOSTNAME_AGENT = 0x2,
};
enum virDomainGetJobStatsFlags {
  VIR_DOMAIN_JOB_STATS_COMPLETED = 0x1,
  VIR_DOMAIN_JOB_STATS_KEEP_COMPLETED = 0x2,
};
enum virDomainGuestInfoTypes {
  VIR_DOMAIN_GUEST_INFO_USERS = 0x1,
  VIR_DOMAIN_GUEST_INFO_FILESYSTEM = 0x10,
  VIR_DOMAIN_GUEST_INFO_OS = 0x2,
  VIR_DOMAIN_GUEST_INFO_DISKS = 0x20,
  VIR_DOMAIN_GUEST_INFO_TIMEZONE = 0x4,
  VIR_DOMAIN_GUEST_INFO_INTERFACES = 0x40,
  VIR_DOMAIN_GUEST_INFO_HOSTNAME = 0x8,
};
enum virDomainInterfaceAddressesSource {
  VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE = 0x0,
  VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT = 0x1,
  VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP = 0x2,
  VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LAST = 0x3,
};
enum virDomainJobOperation {
  VIR_DOMAIN_JOB_OPERATION_UNKNOWN = 0x0,
  VIR_DOMAIN_JOB_OPERATION_START = 0x1,
  VIR_DOMAIN_JOB_OPERATION_SAVE = 0x2,
  VIR_DOMAIN_JOB_OPERATION_RESTORE = 0x3,
  VIR_DOMAIN_JOB_OPERATION_MIGRATION_IN = 0x4,
  VIR_DOMAIN_JOB_OPERATION_MIGRATION_OUT = 0x5,
  VIR_DOMAIN_JOB_OPERATION_SNAPSHOT = 0x6,
  VIR_DOMAIN_JOB_OPERATION_SNAPSHOT_REVERT = 0x7,
  VIR_DOMAIN_JOB_OPERATION_DUMP = 0x8,
  VIR_DOMAIN_JOB_OPERATION_BACKUP = 0x9,
  VIR_DOMAIN_JOB_OPERATION_LAST = 0xa,
};
enum virDomainJobType {
  VIR_DOMAIN_JOB_NONE = 0x0,
  VIR_DOMAIN_JOB_BOUNDED = 0x1,
  VIR_DOMAIN_JOB_UNBOUNDED = 0x2,
  VIR_DOMAIN_JOB_COMPLETED = 0x3,
  VIR_DOMAIN_JOB_FAILED = 0x4,
  VIR_DOMAIN_JOB_CANCELLED = 0x5,
  VIR_DOMAIN_JOB_LAST = 0x6,
};
enum virDomainLifecycle {
  VIR_DOMAIN_LIFECYCLE_POWEROFF = 0x0,
  VIR_DOMAIN_LIFECYCLE_REBOOT = 0x1,
  VIR_DOMAIN_LIFECYCLE_CRASH = 0x2,
  VIR_DOMAIN_LIFECYCLE_LAST = 0x3,
};
enum virDomainLifecycleAction {
  VIR_DOMAIN_LIFECYCLE_ACTION_DESTROY = 0x0,
  VIR_DOMAIN_LIFECYCLE_ACTION_RESTART = 0x1,
  VIR_DOMAIN_LIFECYCLE_ACTION_RESTART_RENAME = 0x2,
  VIR_DOMAIN_LIFECYCLE_ACTION_PRESERVE = 0x3,
  VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_DESTROY = 0x4,
  VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_RESTART = 0x5,
  VIR_DOMAIN_LIFECYCLE_ACTION_LAST = 0x6,
};
enum virDomainMemoryFailureActionType {
  VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_IGNORE = 0x0,
  VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_INJECT = 0x1,
  VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_FATAL = 0x2,
  VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_RESET = 0x3,
  VIR_DOMAIN_EVENT_MEMORY_FAILURE_ACTION_LAST = 0x4,
};
enum virDomainMemoryFailureFlags {
  VIR_DOMAIN_MEMORY_FAILURE_ACTION_REQUIRED = 0x1,
  VIR_DOMAIN_MEMORY_FAILURE_RECURSIVE = 0x2,
};
enum virDomainMemoryFailureRecipientType {
  VIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_HYPERVISOR = 0x0,
  VIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_GUEST = 0x1,
  VIR_DOMAIN_EVENT_MEMORY_FAILURE_RECIPIENT_LAST = 0x2,
};
enum virDomainMemoryFlags {
  VIR_MEMORY_VIRTUAL = 0x1,
  VIR_MEMORY_PHYSICAL = 0x2,
};
enum virDomainMemoryModFlags {
  VIR_DOMAIN_MEM_CURRENT = 0x0,
  VIR_DOMAIN_MEM_LIVE = 0x1,
  VIR_DOMAIN_MEM_CONFIG = 0x2,
  VIR_DOMAIN_MEM_MAXIMUM = 0x4,
};
enum virDomainMemoryStatTags {
  VIR_DOMAIN_MEMORY_STAT_SWAP_IN = 0x0,
  VIR_DOMAIN_MEMORY_STAT_SWAP_OUT = 0x1,
  VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT = 0x2,
  VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT = 0x3,
  VIR_DOMAIN_MEMORY_STAT_UNUSED = 0x4,
  VIR_DOMAIN_MEMORY_STAT_AVAILABLE = 0x5,
  VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON = 0x6,
  VIR_DOMAIN_MEMORY_STAT_RSS = 0x7,
  VIR_DOMAIN_MEMORY_STAT_USABLE = 0x8,
  VIR_DOMAIN_MEMORY_STAT_LAST_UPDATE = 0x9,
  VIR_DOMAIN_MEMORY_STAT_DISK_CACHES = 0xa,
  VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGALLOC = 0xb,
  VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGFAIL = 0xc,
  VIR_DOMAIN_MEMORY_STAT_LAST = 0xd,
  VIR_DOMAIN_MEMORY_STAT_NR = 0xd,
};
enum virDomainMessageType {
  VIR_DOMAIN_MESSAGE_DEPRECATION = 0x1,
  VIR_DOMAIN_MESSAGE_TAINTING = 0x2,
};
enum virDomainMetadataType {
  VIR_DOMAIN_METADATA_DESCRIPTION = 0x0,
  VIR_DOMAIN_METADATA_TITLE = 0x1,
  VIR_DOMAIN_METADATA_ELEMENT = 0x2,
  VIR_DOMAIN_METADATA_LAST = 0x3,
};
enum virDomainMigrateFlags {
  VIR_MIGRATE_LIVE = 0x1,
  VIR_MIGRATE_UNDEFINE_SOURCE = 0x10,
  VIR_MIGRATE_CHANGE_PROTECTION = 0x100,
  VIR_MIGRATE_ABORT_ON_ERROR = 0x1000,
  VIR_MIGRATE_TLS = 0x10000,
  VIR_MIGRATE_PEER2PEER = 0x2,
  VIR_MIGRATE_PAUSED = 0x20,
  VIR_MIGRATE_UNSAFE = 0x200,
  VIR_MIGRATE_AUTO_CONVERGE = 0x2000,
  VIR_MIGRATE_PARALLEL = 0x20000,
  VIR_MIGRATE_TUNNELLED = 0x4,
  VIR_MIGRATE_NON_SHARED_DISK = 0x40,
  VIR_MIGRATE_OFFLINE = 0x400,
  VIR_MIGRATE_RDMA_PIN_ALL = 0x4000,
  VIR_MIGRATE_NON_SHARED_SYNCHRONOUS_WRITES = 0x40000,
  VIR_MIGRATE_PERSIST_DEST = 0x8,
  VIR_MIGRATE_NON_SHARED_INC = 0x80,
  VIR_MIGRATE_COMPRESSED = 0x800,
  VIR_MIGRATE_POSTCOPY = 0x8000,
};
enum virDomainMigrateMaxSpeedFlags {
  VIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY = 0x1,
};
enum virDomainModificationImpact {
  VIR_DOMAIN_AFFECT_CURRENT = 0x0,
  VIR_DOMAIN_AFFECT_LIVE = 0x1,
  VIR_DOMAIN_AFFECT_CONFIG = 0x2,
};
enum virDomainNostateReason {
  VIR_DOMAIN_NOSTATE_UNKNOWN = 0x0,
  VIR_DOMAIN_NOSTATE_LAST = 0x1,
};
enum virDomainNumatuneMemMode {
  VIR_DOMAIN_NUMATUNE_MEM_STRICT = 0x0,
  VIR_DOMAIN_NUMATUNE_MEM_PREFERRED = 0x1,
  VIR_DOMAIN_NUMATUNE_MEM_INTERLEAVE = 0x2,
  VIR_DOMAIN_NUMATUNE_MEM_RESTRICTIVE = 0x3,
  VIR_DOMAIN_NUMATUNE_MEM_LAST = 0x4,
};
enum virDomainOpenGraphicsFlags {
  VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH = 0x1,
};
enum virDomainPMSuspendedDiskReason {
  VIR_DOMAIN_PMSUSPENDED_DISK_UNKNOWN = 0x0,
  VIR_DOMAIN_PMSUSPENDED_DISK_LAST = 0x1,
};
enum virDomainPMSuspendedReason {
  VIR_DOMAIN_PMSUSPENDED_UNKNOWN = 0x0,
  VIR_DOMAIN_PMSUSPENDED_LAST = 0x1,
};
enum virDomainPausedReason {
  VIR_DOMAIN_PAUSED_UNKNOWN = 0x0,
  VIR_DOMAIN_PAUSED_USER = 0x1,
  VIR_DOMAIN_PAUSED_MIGRATION = 0x2,
  VIR_DOMAIN_PAUSED_SAVE = 0x3,
  VIR_DOMAIN_PAUSED_DUMP = 0x4,
  VIR_DOMAIN_PAUSED_IOERROR = 0x5,
  VIR_DOMAIN_PAUSED_WATCHDOG = 0x6,
  VIR_DOMAIN_PAUSED_FROM_SNAPSHOT = 0x7,
  VIR_DOMAIN_PAUSED_SHUTTING_DOWN = 0x8,
  VIR_DOMAIN_PAUSED_SNAPSHOT = 0x9,
  VIR_DOMAIN_PAUSED_CRASHED = 0xa,
  VIR_DOMAIN_PAUSED_STARTING_UP = 0xb,
  VIR_DOMAIN_PAUSED_POSTCOPY = 0xc,
  VIR_DOMAIN_PAUSED_POSTCOPY_FAILED = 0xd,
  VIR_DOMAIN_PAUSED_LAST = 0xe,
};
enum virDomainProcessSignal {
  VIR_DOMAIN_PROCESS_SIGNAL_NOP = 0x0,
  VIR_DOMAIN_PROCESS_SIGNAL_HUP = 0x1,
  VIR_DOMAIN_PROCESS_SIGNAL_STKFLT = 0x10,
  VIR_DOMAIN_PROCESS_SIGNAL_CHLD = 0x11,
  VIR_DOMAIN_PROCESS_SIGNAL_CONT = 0x12,
  VIR_DOMAIN_PROCESS_SIGNAL_STOP = 0x13,
  VIR_DOMAIN_PROCESS_SIGNAL_TSTP = 0x14,
  VIR_DOMAIN_PROCESS_SIGNAL_TTIN = 0x15,
  VIR_DOMAIN_PROCESS_SIGNAL_TTOU = 0x16,
  VIR_DOMAIN_PROCESS_SIGNAL_URG = 0x17,
  VIR_DOMAIN_PROCESS_SIGNAL_XCPU = 0x18,
  VIR_DOMAIN_PROCESS_SIGNAL_XFSZ = 0x19,
  VIR_DOMAIN_PROCESS_SIGNAL_VTALRM = 0x1a,
  VIR_DOMAIN_PROCESS_SIGNAL_PROF = 0x1b,
  VIR_DOMAIN_PROCESS_SIGNAL_WINCH = 0x1c,
  VIR_DOMAIN_PROCESS_SIGNAL_POLL = 0x1d,
  VIR_DOMAIN_PROCESS_SIGNAL_PWR = 0x1e,
  VIR_DOMAIN_PROCESS_SIGNAL_SYS = 0x1f,
  VIR_DOMAIN_PROCESS_SIGNAL_INT = 0x2,
  VIR_DOMAIN_PROCESS_SIGNAL_RT0 = 0x20,
  VIR_DOMAIN_PROCESS_SIGNAL_RT1 = 0x21,
  VIR_DOMAIN_PROCESS_SIGNAL_RT2 = 0x22,
  VIR_DOMAIN_PROCESS_SIGNAL_RT3 = 0x23,
  VIR_DOMAIN_PROCESS_SIGNAL_RT4 = 0x24,
  VIR_DOMAIN_PROCESS_SIGNAL_RT5 = 0x25,
  VIR_DOMAIN_PROCESS_SIGNAL_RT6 = 0x26,
  VIR_DOMAIN_PROCESS_SIGNAL_RT7 = 0x27,
  VIR_DOMAIN_PROCESS_SIGNAL_RT8 = 0x28,
  VIR_DOMAIN_PROCESS_SIGNAL_RT9 = 0x29,
  VIR_DOMAIN_PROCESS_SIGNAL_RT10 = 0x2a,
  VIR_DOMAIN_PROCESS_SIGNAL_RT11 = 0x2b,
  VIR_DOMAIN_PROCESS_SIGNAL_RT12 = 0x2c,
  VIR_DOMAIN_PROCESS_SIGNAL_RT13 = 0x2d,
  VIR_DOMAIN_PROCESS_SIGNAL_RT14 = 0x2e,
  VIR_DOMAIN_PROCESS_SIGNAL_RT15 = 0x2f,
  VIR_DOMAIN_PROCESS_SIGNAL_QUIT = 0x3,
  VIR_DOMAIN_PROCESS_SIGNAL_RT16 = 0x30,
  VIR_DOMAIN_PROCESS_SIGNAL_RT17 = 0x31,
  VIR_DOMAIN_PROCESS_SIGNAL_RT18 = 0x32,
  VIR_DOMAIN_PROCESS_SIGNAL_RT19 = 0x33,
  VIR_DOMAIN_PROCESS_SIGNAL_RT20 = 0x34,
  VIR_DOMAIN_PROCESS_SIGNAL_RT21 = 0x35,
  VIR_DOMAIN_PROCESS_SIGNAL_RT22 = 0x36,
  VIR_DOMAIN_PROCESS_SIGNAL_RT23 = 0x37,
  VIR_DOMAIN_PROCESS_SIGNAL_RT24 = 0x38,
  VIR_DOMAIN_PROCESS_SIGNAL_RT25 = 0x39,
  VIR_DOMAIN_PROCESS_SIGNAL_RT26 = 0x3a,
  VIR_DOMAIN_PROCESS_SIGNAL_RT27 = 0x3b,
  VIR_DOMAIN_PROCESS_SIGNAL_RT28 = 0x3c,
  VIR_DOMAIN_PROCESS_SIGNAL_RT29 = 0x3d,
  VIR_DOMAIN_PROCESS_SIGNAL_RT30 = 0x3e,
  VIR_DOMAIN_PROCESS_SIGNAL_RT31 = 0x3f,
  VIR_DOMAIN_PROCESS_SIGNAL_ILL = 0x4,
  VIR_DOMAIN_PROCESS_SIGNAL_RT32 = 0x40,
  VIR_DOMAIN_PROCESS_SIGNAL_LAST = 0x41,
  VIR_DOMAIN_PROCESS_SIGNAL_TRAP = 0x5,
  VIR_DOMAIN_PROCESS_SIGNAL_ABRT = 0x6,
  VIR_DOMAIN_PROCESS_SIGNAL_BUS = 0x7,
  VIR_DOMAIN_PROCESS_SIGNAL_FPE = 0x8,
  VIR_DOMAIN_PROCESS_SIGNAL_KILL = 0x9,
  VIR_DOMAIN_PROCESS_SIGNAL_USR1 = 0xa,
  VIR_DOMAIN_PROCESS_SIGNAL_SEGV = 0xb,
  VIR_DOMAIN_PROCESS_SIGNAL_USR2 = 0xc,
  VIR_DOMAIN_PROCESS_SIGNAL_PIPE = 0xd,
  VIR_DOMAIN_PROCESS_SIGNAL_ALRM = 0xe,
  VIR_DOMAIN_PROCESS_SIGNAL_TERM = 0xf,
};
enum virDomainQemuAgentCommandTimeoutValues {
  VIR_DOMAIN_QEMU_AGENT_COMMAND_DEFAULT = -0x1,
  VIR_DOMAIN_QEMU_AGENT_COMMAND_BLOCK = -0x2,
  VIR_DOMAIN_QEMU_AGENT_COMMAND_MIN = -0x2,
  VIR_DOMAIN_QEMU_AGENT_COMMAND_NOWAIT = 0x0,
  VIR_DOMAIN_QEMU_AGENT_COMMAND_SHUTDOWN = 0x3c,
};
enum virDomainQemuMonitorCommandFlags {
  VIR_DOMAIN_QEMU_MONITOR_COMMAND_DEFAULT = 0x0,
  VIR_DOMAIN_QEMU_MONITOR_COMMAND_HMP = 0x1,
};
enum virDomainRebootFlagValues {
  VIR_DOMAIN_REBOOT_DEFAULT = 0x0,
  VIR_DOMAIN_REBOOT_ACPI_POWER_BTN = 0x1,
  VIR_DOMAIN_REBOOT_PARAVIRT = 0x10,
  VIR_DOMAIN_REBOOT_GUEST_AGENT = 0x2,
  VIR_DOMAIN_REBOOT_INITCTL = 0x4,
  VIR_DOMAIN_REBOOT_SIGNAL = 0x8,
};
enum virDomainRunningReason {
  VIR_DOMAIN_RUNNING_UNKNOWN = 0x0,
  VIR_DOMAIN_RUNNING_BOOTED = 0x1,
  VIR_DOMAIN_RUNNING_MIGRATED = 0x2,
  VIR_DOMAIN_RUNNING_RESTORED = 0x3,
  VIR_DOMAIN_RUNNING_FROM_SNAPSHOT = 0x4,
  VIR_DOMAIN_RUNNING_UNPAUSED = 0x5,
  VIR_DOMAIN_RUNNING_MIGRATION_CANCELED = 0x6,
  VIR_DOMAIN_RUNNING_SAVE_CANCELED = 0x7,
  VIR_DOMAIN_RUNNING_WAKEUP = 0x8,
  VIR_DOMAIN_RUNNING_CRASHED = 0x9,
  VIR_DOMAIN_RUNNING_POSTCOPY = 0xa,
  VIR_DOMAIN_RUNNING_LAST = 0xb,
};
enum virDomainSaveImageXMLFlags {
  VIR_DOMAIN_SAVE_IMAGE_XML_SECURE = 0x1,
};
enum virDomainSaveRestoreFlags {
  VIR_DOMAIN_SAVE_BYPASS_CACHE = 0x1,
  VIR_DOMAIN_SAVE_RUNNING = 0x2,
  VIR_DOMAIN_SAVE_PAUSED = 0x4,
  VIR_DOMAIN_SAVE_RESET_NVRAM = 0x8,
};
enum virDomainSetTimeFlags {
  VIR_DOMAIN_TIME_SYNC = 0x1,
};
enum virDomainSetUserPasswordFlags {
  VIR_DOMAIN_PASSWORD_ENCRYPTED = 0x1,
};
enum virDomainShutdownFlagValues {
  VIR_DOMAIN_SHUTDOWN_DEFAULT = 0x0,
  VIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN = 0x1,
  VIR_DOMAIN_SHUTDOWN_PARAVIRT = 0x10,
  VIR_DOMAIN_SHUTDOWN_GUEST_AGENT = 0x2,
  VIR_DOMAIN_SHUTDOWN_INITCTL = 0x4,
  VIR_DOMAIN_SHUTDOWN_SIGNAL = 0x8,
};
enum virDomainShutdownReason {
  VIR_DOMAIN_SHUTDOWN_UNKNOWN = 0x0,
  VIR_DOMAIN_SHUTDOWN_USER = 0x1,
  VIR_DOMAIN_SHUTDOWN_LAST = 0x2,
};
enum virDomainShutoffReason {
  VIR_DOMAIN_SHUTOFF_UNKNOWN = 0x0,
  VIR_DOMAIN_SHUTOFF_SHUTDOWN = 0x1,
  VIR_DOMAIN_SHUTOFF_DESTROYED = 0x2,
  VIR_DOMAIN_SHUTOFF_CRASHED = 0x3,
  VIR_DOMAIN_SHUTOFF_MIGRATED = 0x4,
  VIR_DOMAIN_SHUTOFF_SAVED = 0x5,
  VIR_DOMAIN_SHUTOFF_FAILED = 0x6,
  VIR_DOMAIN_SHUTOFF_FROM_SNAPSHOT = 0x7,
  VIR_DOMAIN_SHUTOFF_DAEMON = 0x8,
  VIR_DOMAIN_SHUTOFF_LAST = 0x9,
};
enum virDomainSnapshotCreateFlags {
  VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE = 0x1,
  VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY = 0x10,
  VIR_DOMAIN_SNAPSHOT_CREATE_LIVE = 0x100,
  VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT = 0x2,
  VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT = 0x20,
  VIR_DOMAIN_SNAPSHOT_CREATE_VALIDATE = 0x200,
  VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA = 0x4,
  VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE = 0x40,
  VIR_DOMAIN_SNAPSHOT_CREATE_HALT = 0x8,
  VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC = 0x80,
};
enum virDomainSnapshotDeleteFlags {
  VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN = 0x1,
  VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY = 0x2,
  VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY = 0x4,
};
enum virDomainSnapshotListFlags {
  VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS = 0x1,
  VIR_DOMAIN_SNAPSHOT_LIST_ROOTS = 0x1,
  VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA = 0x10,
  VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL = 0x100,
  VIR_DOMAIN_SNAPSHOT_LIST_METADATA = 0x2,
  VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE = 0x20,
  VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL = 0x200,
  VIR_DOMAIN_SNAPSHOT_LIST_LEAVES = 0x4,
  VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE = 0x40,
  VIR_DOMAIN_SNAPSHOT_LIST_TOPOLOGICAL = 0x400,
  VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES = 0x8,
  VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY = 0x80,
};
enum virDomainSnapshotRevertFlags {
  VIR_DOMAIN_SNAPSHOT_REVERT_RUNNING = 0x1,
  VIR_DOMAIN_SNAPSHOT_REVERT_PAUSED = 0x2,
  VIR_DOMAIN_SNAPSHOT_REVERT_FORCE = 0x4,
  VIR_DOMAIN_SNAPSHOT_REVERT_RESET_NVRAM = 0x8,
};
enum virDomainSnapshotXMLFlags {
  VIR_DOMAIN_SNAPSHOT_XML_SECURE = 0x1,
};
enum virDomainState {
  VIR_DOMAIN_NOSTATE = 0x0,
  VIR_DOMAIN_RUNNING = 0x1,
  VIR_DOMAIN_BLOCKED = 0x2,
  VIR_DOMAIN_PAUSED = 0x3,
  VIR_DOMAIN_SHUTDOWN = 0x4,
  VIR_DOMAIN_SHUTOFF = 0x5,
  VIR_DOMAIN_CRASHED = 0x6,
  VIR_DOMAIN_PMSUSPENDED = 0x7,
  VIR_DOMAIN_LAST = 0x8,
};
enum virDomainStatsTypes {
  VIR_DOMAIN_STATS_STATE = 0x1,
  VIR_DOMAIN_STATS_INTERFACE = 0x10,
  VIR_DOMAIN_STATS_MEMORY = 0x100,
  VIR_DOMAIN_STATS_CPU_TOTAL = 0x2,
  VIR_DOMAIN_STATS_BLOCK = 0x20,
  VIR_DOMAIN_STATS_DIRTYRATE = 0x200,
  VIR_DOMAIN_STATS_BALLOON = 0x4,
  VIR_DOMAIN_STATS_PERF = 0x40,
  VIR_DOMAIN_STATS_VCPU = 0x8,
  VIR_DOMAIN_STATS_IOTHREAD = 0x80,
};
enum virDomainUndefineFlagsValues {
  VIR_DOMAIN_UNDEFINE_MANAGED_SAVE = 0x1,
  VIR_DOMAIN_UNDEFINE_CHECKPOINTS_METADATA = 0x10,
  VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA = 0x2,
  VIR_DOMAIN_UNDEFINE_NVRAM = 0x4,
  VIR_DOMAIN_UNDEFINE_KEEP_NVRAM = 0x8,
};
enum virDomainVcpuFlags {
  VIR_DOMAIN_VCPU_CURRENT = 0x0,
  VIR_DOMAIN_VCPU_LIVE = 0x1,
  VIR_DOMAIN_VCPU_HOTPLUGGABLE = 0x10,
  VIR_DOMAIN_VCPU_CONFIG = 0x2,
  VIR_DOMAIN_VCPU_MAXIMUM = 0x4,
  VIR_DOMAIN_VCPU_GUEST = 0x8,
};
enum virDomainXMLFlags {
  VIR_DOMAIN_XML_SECURE = 0x1,
  VIR_DOMAIN_XML_INACTIVE = 0x2,
  VIR_DOMAIN_XML_UPDATE_CPU = 0x4,
  VIR_DOMAIN_XML_MIGRATABLE = 0x8,
};
enum virErrorDomain {
  VIR_FROM_NONE = 0x0,
  VIR_FROM_XEN = 0x1,
  VIR_FROM_STATS_LINUX = 0x10,
  VIR_FROM_LXC = 0x11,
  VIR_FROM_STORAGE = 0x12,
  VIR_FROM_NETWORK = 0x13,
  VIR_FROM_DOMAIN = 0x14,
  VIR_FROM_UML = 0x15,
  VIR_FROM_NODEDEV = 0x16,
  VIR_FROM_XEN_INOTIFY = 0x17,
  VIR_FROM_SECURITY = 0x18,
  VIR_FROM_VBOX = 0x19,
  VIR_FROM_INTERFACE = 0x1a,
  VIR_FROM_ONE = 0x1b,
  VIR_FROM_ESX = 0x1c,
  VIR_FROM_PHYP = 0x1d,
  VIR_FROM_SECRET = 0x1e,
  VIR_FROM_CPU = 0x1f,
  VIR_FROM_XEND = 0x2,
  VIR_FROM_XENAPI = 0x20,
  VIR_FROM_NWFILTER = 0x21,
  VIR_FROM_HOOK = 0x22,
  VIR_FROM_DOMAIN_SNAPSHOT = 0x23,
  VIR_FROM_AUDIT = 0x24,
  VIR_FROM_SYSINFO = 0x25,
  VIR_FROM_STREAMS = 0x26,
  VIR_FROM_VMWARE = 0x27,
  VIR_FROM_EVENT = 0x28,
  VIR_FROM_LIBXL = 0x29,
  VIR_FROM_LOCKING = 0x2a,
  VIR_FROM_HYPERV = 0x2b,
  VIR_FROM_CAPABILITIES = 0x2c,
  VIR_FROM_URI = 0x2d,
  VIR_FROM_AUTH = 0x2e,
  VIR_FROM_DBUS = 0x2f,
  VIR_FROM_XENSTORE = 0x3,
  VIR_FROM_PARALLELS = 0x30,
  VIR_FROM_DEVICE = 0x31,
  VIR_FROM_SSH = 0x32,
  VIR_FROM_LOCKSPACE = 0x33,
  VIR_FROM_INITCTL = 0x34,
  VIR_FROM_IDENTITY = 0x35,
  VIR_FROM_CGROUP = 0x36,
  VIR_FROM_ACCESS = 0x37,
  VIR_FROM_SYSTEMD = 0x38,
  VIR_FROM_BHYVE = 0x39,
  VIR_FROM_CRYPTO = 0x3a,
  VIR_FROM_FIREWALL = 0x3b,
  VIR_FROM_POLKIT = 0x3c,
  VIR_FROM_THREAD = 0x3d,
  VIR_FROM_ADMIN = 0x3e,
  VIR_FROM_LOGGING = 0x3f,
  VIR_FROM_SEXPR = 0x4,
  VIR_FROM_XENXL = 0x40,
  VIR_FROM_PERF = 0x41,
  VIR_FROM_LIBSSH = 0x42,
  VIR_FROM_RESCTRL = 0x43,
  VIR_FROM_FIREWALLD = 0x44,
  VIR_FROM_DOMAIN_CHECKPOINT = 0x45,
  VIR_FROM_TPM = 0x46,
  VIR_FROM_BPF = 0x47,
  VIR_FROM_CH = 0x48,
  VIR_ERR_DOMAIN_LAST = 0x49,
  VIR_FROM_XML = 0x5,
  VIR_FROM_DOM = 0x6,
  VIR_FROM_RPC = 0x7,
  VIR_FROM_PROXY = 0x8,
  VIR_FROM_CONF = 0x9,
  VIR_FROM_QEMU = 0xa,
  VIR_FROM_NET = 0xb,
  VIR_FROM_TEST = 0xc,
  VIR_FROM_REMOTE = 0xd,
  VIR_FROM_OPENVZ = 0xe,
  VIR_FROM_XENXM = 0xf,
};
enum virErrorLevel {
  VIR_ERR_NONE = 0x0,
  VIR_ERR_WARNING = 0x1,
  VIR_ERR_ERROR = 0x2,
};
enum virErrorNumber {
  VIR_ERR_OK = 0x0,
  VIR_ERR_INTERNAL_ERROR = 0x1,
  VIR_ERR_OS_TYPE = 0x10,
  VIR_ERR_NO_KERNEL = 0x11,
  VIR_ERR_NO_ROOT = 0x12,
  VIR_ERR_NO_SOURCE = 0x13,
  VIR_ERR_NO_TARGET = 0x14,
  VIR_ERR_NO_NAME = 0x15,
  VIR_ERR_NO_OS = 0x16,
  VIR_ERR_NO_DEVICE = 0x17,
  VIR_ERR_NO_XENSTORE = 0x18,
  VIR_ERR_DRIVER_FULL = 0x19,
  VIR_ERR_CALL_FAILED = 0x1a,
  VIR_ERR_XML_ERROR = 0x1b,
  VIR_ERR_DOM_EXIST = 0x1c,
  VIR_ERR_OPERATION_DENIED = 0x1d,
  VIR_ERR_OPEN_FAILED = 0x1e,
  VIR_ERR_READ_FAILED = 0x1f,
  VIR_ERR_NO_MEMORY = 0x2,
  VIR_ERR_PARSE_FAILED = 0x20,
  VIR_ERR_CONF_SYNTAX = 0x21,
  VIR_ERR_WRITE_FAILED = 0x22,
  VIR_ERR_XML_DETAIL = 0x23,
  VIR_ERR_INVALID_NETWORK = 0x24,
  VIR_ERR_NETWORK_EXIST = 0x25,
  VIR_ERR_SYSTEM_ERROR = 0x26,
  VIR_ERR_RPC = 0x27,
  VIR_ERR_GNUTLS_ERROR = 0x28,
  VIR_WAR_NO_NETWORK = 0x29,
  VIR_ERR_NO_DOMAIN = 0x2a,
  VIR_ERR_NO_NETWORK = 0x2b,
  VIR_ERR_INVALID_MAC = 0x2c,
  VIR_ERR_AUTH_FAILED = 0x2d,
  VIR_ERR_INVALID_STORAGE_POOL = 0x2e,
  VIR_ERR_INVALID_STORAGE_VOL = 0x2f,
  VIR_ERR_NO_SUPPORT = 0x3,
  VIR_WAR_NO_STORAGE = 0x30,
  VIR_ERR_NO_STORAGE_POOL = 0x31,
  VIR_ERR_NO_STORAGE_VOL = 0x32,
  VIR_WAR_NO_NODE = 0x33,
  VIR_ERR_INVALID_NODE_DEVICE = 0x34,
  VIR_ERR_NO_NODE_DEVICE = 0x35,
  VIR_ERR_NO_SECURITY_MODEL = 0x36,
  VIR_ERR_OPERATION_INVALID = 0x37,
  VIR_WAR_NO_INTERFACE = 0x38,
  VIR_ERR_NO_INTERFACE = 0x39,
  VIR_ERR_INVALID_INTERFACE = 0x3a,
  VIR_ERR_MULTIPLE_INTERFACES = 0x3b,
  VIR_WAR_NO_NWFILTER = 0x3c,
  VIR_ERR_INVALID_NWFILTER = 0x3d,
  VIR_ERR_NO_NWFILTER = 0x3e,
  VIR_ERR_BUILD_FIREWALL = 0x3f,
  VIR_ERR_UNKNOWN_HOST = 0x4,
  VIR_WAR_NO_SECRET = 0x40,
  VIR_ERR_INVALID_SECRET = 0x41,
  VIR_ERR_NO_SECRET = 0x42,
  VIR_ERR_CONFIG_UNSUPPORTED = 0x43,
  VIR_ERR_OPERATION_TIMEOUT = 0x44,
  VIR_ERR_MIGRATE_PERSIST_FAILED = 0x45,
  VIR_ERR_HOOK_SCRIPT_FAILED = 0x46,
  VIR_ERR_INVALID_DOMAIN_SNAPSHOT = 0x47,
  VIR_ERR_NO_DOMAIN_SNAPSHOT = 0x48,
  VIR_ERR_INVALID_STREAM = 0x49,
  VIR_ERR_ARGUMENT_UNSUPPORTED = 0x4a,
  VIR_ERR_STORAGE_PROBE_FAILED = 0x4b,
  VIR_ERR_STORAGE_POOL_BUILT = 0x4c,
  VIR_ERR_SNAPSHOT_REVERT_RISKY = 0x4d,
  VIR_ERR_OPERATION_ABORTED = 0x4e,
  VIR_ERR_AUTH_CANCELLED = 0x4f,
  VIR_ERR_NO_CONNECT = 0x5,
  VIR_ERR_NO_DOMAIN_METADATA = 0x50,
  VIR_ERR_MIGRATE_UNSAFE = 0x51,
  VIR_ERR_OVERFLOW = 0x52,
  VIR_ERR_BLOCK_COPY_ACTIVE = 0x53,
  VIR_ERR_OPERATION_UNSUPPORTED = 0x54,
  VIR_ERR_SSH = 0x55,
  VIR_ERR_AGENT_UNRESPONSIVE = 0x56,
  VIR_ERR_RESOURCE_BUSY = 0x57,
  VIR_ERR_ACCESS_DENIED = 0x58,
  VIR_ERR_DBUS_SERVICE = 0x59,
  VIR_ERR_STORAGE_VOL_EXIST = 0x5a,
  VIR_ERR_CPU_INCOMPATIBLE = 0x5b,
  VIR_ERR_XML_INVALID_SCHEMA = 0x5c,
  VIR_ERR_MIGRATE_FINISH_OK = 0x5d,
  VIR_ERR_AUTH_UNAVAILABLE = 0x5e,
  VIR_ERR_NO_SERVER = 0x5f,
  VIR_ERR_INVALID_CONN = 0x6,
  VIR_ERR_NO_CLIENT = 0x60,
  VIR_ERR_AGENT_UNSYNCED = 0x61,
  VIR_ERR_LIBSSH = 0x62,
  VIR_ERR_DEVICE_MISSING = 0x63,
  VIR_ERR_INVALID_NWFILTER_BINDING = 0x64,
  VIR_ERR_NO_NWFILTER_BINDING = 0x65,
  VIR_ERR_INVALID_DOMAIN_CHECKPOINT = 0x66,
  VIR_ERR_NO_DOMAIN_CHECKPOINT = 0x67,
  VIR_ERR_NO_DOMAIN_BACKUP = 0x68,
  VIR_ERR_INVALID_NETWORK_PORT = 0x69,
  VIR_ERR_NETWORK_PORT_EXIST = 0x6a,
  VIR_ERR_NO_NETWORK_PORT = 0x6b,
  VIR_ERR_NO_HOSTNAME = 0x6c,
  VIR_ERR_CHECKPOINT_INCONSISTENT = 0x6d,
  VIR_ERR_MULTIPLE_DOMAINS = 0x6e,
  VIR_ERR_NUMBER_LAST = 0x6f,
  VIR_ERR_INVALID_DOMAIN = 0x7,
  VIR_ERR_INVALID_ARG = 0x8,
  VIR_ERR_OPERATION_FAILED = 0x9,
  VIR_ERR_GET_FAILED = 0xa,
  VIR_ERR_POST_FAILED = 0xb,
  VIR_ERR_HTTP_ERROR = 0xc,
  VIR_ERR_SEXPR_SERIAL = 0xd,
  VIR_ERR_NO_XEN = 0xe,
  VIR_ERR_XEN_CALL = 0xf,
};
enum virEventHandleType {
  VIR_EVENT_HANDLE_READABLE = 0x1,
  VIR_EVENT_HANDLE_WRITABLE = 0x2,
  VIR_EVENT_HANDLE_ERROR = 0x4,
  VIR_EVENT_HANDLE_HANGUP = 0x8,
};
enum virIPAddrType {
  VIR_IP_ADDR_TYPE_IPV4 = 0x0,
  VIR_IP_ADDR_TYPE_IPV6 = 0x1,
  VIR_IP_ADDR_TYPE_LAST = 0x2,
};
enum virInterfaceDefineFlags {
  VIR_INTERFACE_DEFINE_VALIDATE = 0x1,
};
enum virInterfaceXMLFlags {
  VIR_INTERFACE_XML_INACTIVE = 0x1,
};
enum virKeycodeSet {
  VIR_KEYCODE_SET_LINUX = 0x0,
  VIR_KEYCODE_SET_XT = 0x1,
  VIR_KEYCODE_SET_ATSET1 = 0x2,
  VIR_KEYCODE_SET_ATSET2 = 0x3,
  VIR_KEYCODE_SET_ATSET3 = 0x4,
  VIR_KEYCODE_SET_OSX = 0x5,
  VIR_KEYCODE_SET_XT_KBD = 0x6,
  VIR_KEYCODE_SET_USB = 0x7,
  VIR_KEYCODE_SET_WIN32 = 0x8,
  VIR_KEYCODE_SET_QNUM = 0x9,
  VIR_KEYCODE_SET_LAST = 0xa,
};
enum virMemoryParameterType {
  VIR_DOMAIN_MEMORY_PARAM_INT = 0x1,
  VIR_DOMAIN_MEMORY_PARAM_UINT = 0x2,
  VIR_DOMAIN_MEMORY_PARAM_LLONG = 0x3,
  VIR_DOMAIN_MEMORY_PARAM_ULLONG = 0x4,
  VIR_DOMAIN_MEMORY_PARAM_DOUBLE = 0x5,
  VIR_DOMAIN_MEMORY_PARAM_BOOLEAN = 0x6,
};
enum virNWFilterBindingCreateFlags {
  VIR_NWFILTER_BINDING_CREATE_VALIDATE = 0x1,
};
enum virNWFilterDefineFlags {
  VIR_NWFILTER_DEFINE_VALIDATE = 0x1,
};
enum virNetworkCreateFlags {
  VIR_NETWORK_CREATE_VALIDATE = 0x1,
};
enum virNetworkDefineFlags {
  VIR_NETWORK_DEFINE_VALIDATE = 0x1,
};
enum virNetworkEventID {
  VIR_NETWORK_EVENT_ID_LIFECYCLE = 0x0,
  VIR_NETWORK_EVENT_ID_LAST = 0x1,
};
enum virNetworkEventLifecycleType {
  VIR_NETWORK_EVENT_DEFINED = 0x0,
  VIR_NETWORK_EVENT_UNDEFINED = 0x1,
  VIR_NETWORK_EVENT_STARTED = 0x2,
  VIR_NETWORK_EVENT_STOPPED = 0x3,
  VIR_NETWORK_EVENT_LAST = 0x4,
};
enum virNetworkPortCreateFlags {
  VIR_NETWORK_PORT_CREATE_RECLAIM = 0x1,
  VIR_NETWORK_PORT_CREATE_VALIDATE = 0x2,
};
enum virNetworkUpdateCommand {
  VIR_NETWORK_UPDATE_COMMAND_NONE = 0x0,
  VIR_NETWORK_UPDATE_COMMAND_MODIFY = 0x1,
  VIR_NETWORK_UPDATE_COMMAND_DELETE = 0x2,
  VIR_NETWORK_UPDATE_COMMAND_ADD_LAST = 0x3,
  VIR_NETWORK_UPDATE_COMMAND_ADD_FIRST = 0x4,
  VIR_NETWORK_UPDATE_COMMAND_LAST = 0x5,
};
enum virNetworkUpdateFlags {
  VIR_NETWORK_UPDATE_AFFECT_CURRENT = 0x0,
  VIR_NETWORK_UPDATE_AFFECT_LIVE = 0x1,
  VIR_NETWORK_UPDATE_AFFECT_CONFIG = 0x2,
};
enum virNetworkUpdateSection {
  VIR_NETWORK_SECTION_NONE = 0x0,
  VIR_NETWORK_SECTION_BRIDGE = 0x1,
  VIR_NETWORK_SECTION_DOMAIN = 0x2,
  VIR_NETWORK_SECTION_IP = 0x3,
  VIR_NETWORK_SECTION_IP_DHCP_HOST = 0x4,
  VIR_NETWORK_SECTION_IP_DHCP_RANGE = 0x5,
  VIR_NETWORK_SECTION_FORWARD = 0x6,
  VIR_NETWORK_SECTION_FORWARD_INTERFACE = 0x7,
  VIR_NETWORK_SECTION_FORWARD_PF = 0x8,
  VIR_NETWORK_SECTION_PORTGROUP = 0x9,
  VIR_NETWORK_SECTION_DNS_HOST = 0xa,
  VIR_NETWORK_SECTION_DNS_TXT = 0xb,
  VIR_NETWORK_SECTION_DNS_SRV = 0xc,
  VIR_NETWORK_SECTION_LAST = 0xd,
};
enum virNetworkXMLFlags {
  VIR_NETWORK_XML_INACTIVE = 0x1,
};
enum virNodeAllocPagesFlags {
  VIR_NODE_ALLOC_PAGES_ADD = 0x0,
  VIR_NODE_ALLOC_PAGES_SET = 0x1,
};
enum virNodeDeviceEventID {
  VIR_NODE_DEVICE_EVENT_ID_LIFECYCLE = 0x0,
  VIR_NODE_DEVICE_EVENT_ID_UPDATE = 0x1,
  VIR_NODE_DEVICE_EVENT_ID_LAST = 0x2,
};
enum virNodeDeviceEventLifecycleType {
  VIR_NODE_DEVICE_EVENT_CREATED = 0x0,
  VIR_NODE_DEVICE_EVENT_DELETED = 0x1,
  VIR_NODE_DEVICE_EVENT_DEFINED = 0x2,
  VIR_NODE_DEVICE_EVENT_UNDEFINED = 0x3,
  VIR_NODE_DEVICE_EVENT_LAST = 0x4,
};
enum virNodeGetCPUStatsAllCPUs {
  VIR_NODE_CPU_STATS_ALL_CPUS = -0x1,
};
enum virNodeGetMemoryStatsAllCells {
  VIR_NODE_MEMORY_STATS_ALL_CELLS = -0x1,
};
enum virNodeSuspendTarget {
  VIR_NODE_SUSPEND_TARGET_MEM = 0x0,
  VIR_NODE_SUSPEND_TARGET_DISK = 0x1,
  VIR_NODE_SUSPEND_TARGET_HYBRID = 0x2,
  VIR_NODE_SUSPEND_TARGET_LAST = 0x3,
};
enum virSchedParameterType {
  VIR_DOMAIN_SCHED_FIELD_INT = 0x1,
  VIR_DOMAIN_SCHED_FIELD_UINT = 0x2,
  VIR_DOMAIN_SCHED_FIELD_LLONG = 0x3,
  VIR_DOMAIN_SCHED_FIELD_ULLONG = 0x4,
  VIR_DOMAIN_SCHED_FIELD_DOUBLE = 0x5,
  VIR_DOMAIN_SCHED_FIELD_BOOLEAN = 0x6,
};
enum virSecretDefineFlags {
  VIR_SECRET_DEFINE_VALIDATE = 0x1,
};
enum virSecretEventID {
  VIR_SECRET_EVENT_ID_LIFECYCLE = 0x0,
  VIR_SECRET_EVENT_ID_VALUE_CHANGED = 0x1,
  VIR_SECRET_EVENT_ID_LAST = 0x2,
};
enum virSecretEventLifecycleType {
  VIR_SECRET_EVENT_DEFINED = 0x0,
  VIR_SECRET_EVENT_UNDEFINED = 0x1,
  VIR_SECRET_EVENT_LAST = 0x2,
};
enum virSecretUsageType {
  VIR_SECRET_USAGE_TYPE_NONE = 0x0,
  VIR_SECRET_USAGE_TYPE_VOLUME = 0x1,
  VIR_SECRET_USAGE_TYPE_CEPH = 0x2,
  VIR_SECRET_USAGE_TYPE_ISCSI = 0x3,
  VIR_SECRET_USAGE_TYPE_TLS = 0x4,
  VIR_SECRET_USAGE_TYPE_VTPM = 0x5,
  VIR_SECRET_USAGE_TYPE_LAST = 0x6,
};
enum virStoragePoolBuildFlags {
  VIR_STORAGE_POOL_BUILD_NEW = 0x0,
  VIR_STORAGE_POOL_BUILD_REPAIR = 0x1,
  VIR_STORAGE_POOL_BUILD_RESIZE = 0x2,
  VIR_STORAGE_POOL_BUILD_NO_OVERWRITE = 0x4,
  VIR_STORAGE_POOL_BUILD_OVERWRITE = 0x8,
};
enum virStoragePoolCreateFlags {
  VIR_STORAGE_POOL_CREATE_NORMAL = 0x0,
  VIR_STORAGE_POOL_CREATE_WITH_BUILD = 0x1,
  VIR_STORAGE_POOL_CREATE_WITH_BUILD_OVERWRITE = 0x2,
  VIR_STORAGE_POOL_CREATE_WITH_BUILD_NO_OVERWRITE = 0x4,
};
enum virStoragePoolDefineFlags {
  VIR_STORAGE_POOL_DEFINE_VALIDATE = 0x1,
};
enum virStoragePoolDeleteFlags {
  VIR_STORAGE_POOL_DELETE_NORMAL = 0x0,
  VIR_STORAGE_POOL_DELETE_ZEROED = 0x1,
};
enum virStoragePoolEventID {
  VIR_STORAGE_POOL_EVENT_ID_LIFECYCLE = 0x0,
  VIR_STORAGE_POOL_EVENT_ID_REFRESH = 0x1,
  VIR_STORAGE_POOL_EVENT_ID_LAST = 0x2,
};
enum virStoragePoolEventLifecycleType {
  VIR_STORAGE_POOL_EVENT_DEFINED = 0x0,
  VIR_STORAGE_POOL_EVENT_UNDEFINED = 0x1,
  VIR_STORAGE_POOL_EVENT_STARTED = 0x2,
  VIR_STORAGE_POOL_EVENT_STOPPED = 0x3,
  VIR_STORAGE_POOL_EVENT_CREATED = 0x4,
  VIR_STORAGE_POOL_EVENT_DELETED = 0x5,
  VIR_STORAGE_POOL_EVENT_LAST = 0x6,
};
enum virStoragePoolState {
  VIR_STORAGE_POOL_INACTIVE = 0x0,
  VIR_STORAGE_POOL_BUILDING = 0x1,
  VIR_STORAGE_POOL_RUNNING = 0x2,
  VIR_STORAGE_POOL_DEGRADED = 0x3,
  VIR_STORAGE_POOL_INACCESSIBLE = 0x4,
  VIR_STORAGE_POOL_STATE_LAST = 0x5,
};
enum virStorageVolCreateFlags {
  VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA = 0x1,
  VIR_STORAGE_VOL_CREATE_REFLINK = 0x2,
};
enum virStorageVolDeleteFlags {
  VIR_STORAGE_VOL_DELETE_NORMAL = 0x0,
  VIR_STORAGE_VOL_DELETE_ZEROED = 0x1,
  VIR_STORAGE_VOL_DELETE_WITH_SNAPSHOTS = 0x2,
};
enum virStorageVolDownloadFlags {
  VIR_STORAGE_VOL_DOWNLOAD_SPARSE_STREAM = 0x1,
};
enum virStorageVolInfoFlags {
  VIR_STORAGE_VOL_USE_ALLOCATION = 0x0,
  VIR_STORAGE_VOL_GET_PHYSICAL = 0x1,
};
enum virStorageVolResizeFlags {
  VIR_STORAGE_VOL_RESIZE_ALLOCATE = 0x1,
  VIR_STORAGE_VOL_RESIZE_DELTA = 0x2,
  VIR_STORAGE_VOL_RESIZE_SHRINK = 0x4,
};
enum virStorageVolType {
  VIR_STORAGE_VOL_FILE = 0x0,
  VIR_STORAGE_VOL_BLOCK = 0x1,
  VIR_STORAGE_VOL_DIR = 0x2,
  VIR_STORAGE_VOL_NETWORK = 0x3,
  VIR_STORAGE_VOL_NETDIR = 0x4,
  VIR_STORAGE_VOL_PLOOP = 0x5,
  VIR_STORAGE_VOL_LAST = 0x6,
};
enum virStorageVolUploadFlags {
  VIR_STORAGE_VOL_UPLOAD_SPARSE_STREAM = 0x1,
};
enum virStorageVolWipeAlgorithm {
  VIR_STORAGE_VOL_WIPE_ALG_ZERO = 0x0,
  VIR_STORAGE_VOL_WIPE_ALG_NNSA = 0x1,
  VIR_STORAGE_VOL_WIPE_ALG_DOD = 0x2,
  VIR_STORAGE_VOL_WIPE_ALG_BSI = 0x3,
  VIR_STORAGE_VOL_WIPE_ALG_GUTMANN = 0x4,
  VIR_STORAGE_VOL_WIPE_ALG_SCHNEIER = 0x5,
  VIR_STORAGE_VOL_WIPE_ALG_PFITZNER7 = 0x6,
  VIR_STORAGE_VOL_WIPE_ALG_PFITZNER33 = 0x7,
  VIR_STORAGE_VOL_WIPE_ALG_RANDOM = 0x8,
  VIR_STORAGE_VOL_WIPE_ALG_TRIM = 0x9,
  VIR_STORAGE_VOL_WIPE_ALG_LAST = 0xa,
};
enum virStorageXMLFlags {
  VIR_STORAGE_XML_INACTIVE = 0x1,
};
enum virStreamEventType {
  VIR_STREAM_EVENT_READABLE = 0x1,
  VIR_STREAM_EVENT_WRITABLE = 0x2,
  VIR_STREAM_EVENT_ERROR = 0x4,
  VIR_STREAM_EVENT_HANGUP = 0x8,
};
enum virStreamFlags {
  VIR_STREAM_NONBLOCK = 0x1,
};
enum virStreamRecvFlagsValues {
  VIR_STREAM_RECV_STOP_AT_HOLE = 0x1,
};
enum virTypedParameterFlags {
  VIR_TYPED_PARAM_STRING_OKAY = 0x4,
};
enum virTypedParameterType {
  VIR_TYPED_PARAM_INT = 0x1,
  VIR_TYPED_PARAM_UINT = 0x2,
  VIR_TYPED_PARAM_LLONG = 0x3,
  VIR_TYPED_PARAM_ULLONG = 0x4,
  VIR_TYPED_PARAM_DOUBLE = 0x5,
  VIR_TYPED_PARAM_BOOLEAN = 0x6,
  VIR_TYPED_PARAM_STRING = 0x7,
  VIR_TYPED_PARAM_LAST = 0x8,
};
enum virVcpuHostCpuState {
  VIR_VCPU_INFO_CPU_OFFLINE = -0x1,
  VIR_VCPU_INFO_CPU_UNAVAILABLE = -0x2,
};
enum virVcpuState {
  VIR_VCPU_OFFLINE = 0x0,
  VIR_VCPU_RUNNING = 0x1,
  VIR_VCPU_BLOCKED = 0x2,
  VIR_VCPU_LAST = 0x3,
};
#define LIBVIR_VERSION_NUMBER 8004000
#define VIR_CONNECT_IDENTITY_GROUP_NAME "group-name"
#define VIR_CONNECT_IDENTITY_PROCESS_ID "process-id"
#define VIR_CONNECT_IDENTITY_PROCESS_TIME "process-time"
#define VIR_CONNECT_IDENTITY_SASL_USER_NAME "sasl-user-name"
#define VIR_CONNECT_IDENTITY_SELINUX_CONTEXT "selinux-context"
#define VIR_CONNECT_IDENTITY_UNIX_GROUP_ID "unix-group-id"
#define VIR_CONNECT_IDENTITY_UNIX_USER_ID "unix-user-id"
#define VIR_CONNECT_IDENTITY_USER_NAME "user-name"
#define VIR_CONNECT_IDENTITY_X509_DISTINGUISHED_NAME "x509-distinguished-name"
#define VIR_DOMAIN_BANDWIDTH_IN_AVERAGE "inbound.average"
#define VIR_DOMAIN_BANDWIDTH_IN_BURST "inbound.burst"
#define VIR_DOMAIN_BANDWIDTH_IN_FLOOR "inbound.floor"
#define VIR_DOMAIN_BANDWIDTH_IN_PEAK "inbound.peak"
#define VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE "outbound.average"
#define VIR_DOMAIN_BANDWIDTH_OUT_BURST "outbound.burst"
#define VIR_DOMAIN_BANDWIDTH_OUT_PEAK "outbound.peak"
#define VIR_DOMAIN_BLKIO_DEVICE_READ_BPS "device_read_bytes_sec"
#define VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS "device_read_iops_sec"
#define VIR_DOMAIN_BLKIO_DEVICE_WEIGHT "device_weight"
#define VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS "device_write_bytes_sec"
#define VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS "device_write_iops_sec"
#define VIR_DOMAIN_BLKIO_FIELD_LENGTH VIR_TYPED_PARAM_FIELD_LENGTH
#define VIR_DOMAIN_BLKIO_WEIGHT "weight"
#define VIR_DOMAIN_BLOCK_COPY_BANDWIDTH "bandwidth"
#define VIR_DOMAIN_BLOCK_COPY_BUF_SIZE "buf-size"
#define VIR_DOMAIN_BLOCK_COPY_GRANULARITY "granularity"
#define VIR_DOMAIN_BLOCK_IOTUNE_GROUP_NAME "group_name"
#define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC "read_bytes_sec"
#define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX "read_bytes_sec_max"
#define VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX_LENGTH "read_bytes_sec_max_length"
#define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC "read_iops_sec"
#define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX "read_iops_sec_max"
#define VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX_LENGTH "read_iops_sec_max_length"
#define VIR_DOMAIN_BLOCK_IOTUNE_SIZE_IOPS_SEC "size_iops_sec"
#define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC "total_bytes_sec"
#define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX "total_bytes_sec_max"
#define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX_LENGTH "total_bytes_sec_max_length"
#define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC "total_iops_sec"
#define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX "total_iops_sec_max"
#define VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX_LENGTH "total_iops_sec_max_length"
#define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC "write_bytes_sec"
#define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX "write_bytes_sec_max"
#define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX_LENGTH "write_bytes_sec_max_length"
#define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC "write_iops_sec"
#define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX "write_iops_sec_max"
#define VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX_LENGTH "write_iops_sec_max_length"
#define VIR_DOMAIN_BLOCK_STATS_ERRS "errs"
#define VIR_DOMAIN_BLOCK_STATS_FIELD_LENGTH VIR_TYPED_PARAM_FIELD_LENGTH
#define VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ "flush_operations"
#define VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES "flush_total_times"
#define VIR_DOMAIN_BLOCK_STATS_READ_BYTES "rd_bytes"
#define VIR_DOMAIN_BLOCK_STATS_READ_REQ "rd_operations"
#define VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES "rd_total_times"
#define VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES "wr_bytes"
#define VIR_DOMAIN_BLOCK_STATS_WRITE_REQ "wr_operations"
#define VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES "wr_total_times"
#define VIR_DOMAIN_CPU_STATS_CPUTIME "cpu_time"
#define VIR_DOMAIN_CPU_STATS_SYSTEMTIME "system_time"
#define VIR_DOMAIN_CPU_STATS_USERTIME "user_time"
#define VIR_DOMAIN_CPU_STATS_VCPUTIME "vcpu_time"
#define VIR_DOMAIN_IOTHREAD_POLL_GROW "poll_grow"
#define VIR_DOMAIN_IOTHREAD_POLL_MAX_NS "poll_max_ns"
#define VIR_DOMAIN_IOTHREAD_POLL_SHRINK "poll_shrink"
#define VIR_DOMAIN_JOB_AUTO_CONVERGE_THROTTLE "auto_converge_throttle"
#define VIR_DOMAIN_JOB_COMPRESSION_BYTES "compression_bytes"
#define VIR_DOMAIN_JOB_COMPRESSION_CACHE "compression_cache"
#define VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES "compression_cache_misses"
#define VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW "compression_overflow"
#define VIR_DOMAIN_JOB_COMPRESSION_PAGES "compression_pages"
#define VIR_DOMAIN_JOB_DATA_PROCESSED "data_processed"
#define VIR_DOMAIN_JOB_DATA_REMAINING "data_remaining"
#define VIR_DOMAIN_JOB_DATA_TOTAL "data_total"
#define VIR_DOMAIN_JOB_DISK_BPS "disk_bps"
#define VIR_DOMAIN_JOB_DISK_PROCESSED "disk_processed"
#define VIR_DOMAIN_JOB_DISK_REMAINING "disk_remaining"
#define VIR_DOMAIN_JOB_DISK_TEMP_TOTAL "disk_temp_total"
#define VIR_DOMAIN_JOB_DISK_TEMP_USED "disk_temp_used"
#define VIR_DOMAIN_JOB_DISK_TOTAL "disk_total"
#define VIR_DOMAIN_JOB_DOWNTIME "downtime"
#define VIR_DOMAIN_JOB_DOWNTIME_NET "downtime_net"
#define VIR_DOMAIN_JOB_ERRMSG "errmsg"
#define VIR_DOMAIN_JOB_MEMORY_BPS "memory_bps"
#define VIR_DOMAIN_JOB_MEMORY_CONSTANT "memory_constant"
#define VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE "memory_dirty_rate"
#define VIR_DOMAIN_JOB_MEMORY_ITERATION "memory_iteration"
#define VIR_DOMAIN_JOB_MEMORY_NORMAL "memory_normal"
#define VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES "memory_normal_bytes"
#define VIR_DOMAIN_JOB_MEMORY_PAGE_SIZE "memory_page_size"
#define VIR_DOMAIN_JOB_MEMORY_POSTCOPY_REQS "memory_postcopy_requests"
#define VIR_DOMAIN_JOB_MEMORY_PROCESSED "memory_processed"
#define VIR_DOMAIN_JOB_MEMORY_REMAINING "memory_remaining"
#define VIR_DOMAIN_JOB_MEMORY_TOTAL "memory_total"
#define VIR_DOMAIN_JOB_OPERATION "operation"
#define VIR_DOMAIN_JOB_SETUP_TIME "setup_time"
#define VIR_DOMAIN_JOB_SUCCESS "success"
#define VIR_DOMAIN_JOB_TIME_ELAPSED "time_elapsed"
#define VIR_DOMAIN_JOB_TIME_ELAPSED_NET "time_elapsed_net"
#define VIR_DOMAIN_JOB_TIME_REMAINING "time_remaining"
#define VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MAJOR "sev-api-major"
#define VIR_DOMAIN_LAUNCH_SECURITY_SEV_API_MINOR "sev-api-minor"
#define VIR_DOMAIN_LAUNCH_SECURITY_SEV_BUILD_ID "sev-build-id"
#define VIR_DOMAIN_LAUNCH_SECURITY_SEV_MEASUREMENT "sev-measurement"
#define VIR_DOMAIN_LAUNCH_SECURITY_SEV_POLICY "sev-policy"
#define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET "sev-secret"
#define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_HEADER "sev-secret-header"
#define VIR_DOMAIN_LAUNCH_SECURITY_SEV_SECRET_SET_ADDRESS "sev-secret-set-address"
#define VIR_DOMAIN_MEMORY_FIELD_LENGTH VIR_TYPED_PARAM_FIELD_LENGTH
#define VIR_DOMAIN_MEMORY_HARD_LIMIT "hard_limit"
#define VIR_DOMAIN_MEMORY_MIN_GUARANTEE "min_guarantee"
#define VIR_DOMAIN_MEMORY_PARAM_UNLIMITED 9007199254740991LL /* = INT64_MAX >> 10 */
#define VIR_DOMAIN_MEMORY_SOFT_LIMIT "soft_limit"
#define VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT "swap_hard_limit"
#define VIR_DOMAIN_NUMA_MODE "numa_mode"
#define VIR_DOMAIN_NUMA_NODESET "numa_nodeset"
#define VIR_DOMAIN_SCHEDULER_CAP "cap"
#define VIR_DOMAIN_SCHEDULER_CPU_SHARES "cpu_shares"
#define VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD "emulator_period"
#define VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA "emulator_quota"
#define VIR_DOMAIN_SCHEDULER_GLOBAL_PERIOD "global_period"
#define VIR_DOMAIN_SCHEDULER_GLOBAL_QUOTA "global_quota"
#define VIR_DOMAIN_SCHEDULER_IOTHREAD_PERIOD "iothread_period"
#define VIR_DOMAIN_SCHEDULER_IOTHREAD_QUOTA "iothread_quota"
#define VIR_DOMAIN_SCHEDULER_LIMIT "limit"
#define VIR_DOMAIN_SCHEDULER_RESERVATION "reservation"
#define VIR_DOMAIN_SCHEDULER_SHARES "shares"
#define VIR_DOMAIN_SCHEDULER_VCPU_PERIOD "vcpu_period"
#define VIR_DOMAIN_SCHEDULER_VCPU_QUOTA "vcpu_quota"
#define VIR_DOMAIN_SCHEDULER_WEIGHT "weight"
#define VIR_DOMAIN_SCHED_FIELD_LENGTH VIR_TYPED_PARAM_FIELD_LENGTH
#define VIR_DOMAIN_SEND_KEY_MAX_KEYS 16
#define VIR_DOMAIN_TUNABLE_BLKDEV_DISK "blkdeviotune.disk"
#define VIR_DOMAIN_TUNABLE_BLKDEV_GROUP_NAME "blkdeviotune.group_name"
#define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC "blkdeviotune.read_bytes_sec"
#define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX "blkdeviotune.read_bytes_sec_max"
#define VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX_LENGTH "blkdeviotune.read_bytes_sec_max_length"
#define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC "blkdeviotune.read_iops_sec"
#define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX "blkdeviotune.read_iops_sec_max"
#define VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX_LENGTH "blkdeviotune.read_iops_sec_max_length"
#define VIR_DOMAIN_TUNABLE_BLKDEV_SIZE_IOPS_SEC "blkdeviotune.size_iops_sec"
#define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC "blkdeviotune.total_bytes_sec"
#define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX "blkdeviotune.total_bytes_sec_max"
#define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX_LENGTH "blkdeviotune.total_bytes_sec_max_length"
#define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC "blkdeviotune.total_iops_sec"
#define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX "blkdeviotune.total_iops_sec_max"
#define VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX_LENGTH "blkdeviotune.total_iops_sec_max_length"
#define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC "blkdeviotune.write_bytes_sec"
#define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX "blkdeviotune.write_bytes_sec_max"
#define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX_LENGTH "blkdeviotune.write_bytes_sec_max_length"
#define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC "blkdeviotune.write_iops_sec"
#define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX "blkdeviotune.write_iops_sec_max"
#define VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX_LENGTH "blkdeviotune.write_iops_sec_max_length"
#define VIR_DOMAIN_TUNABLE_CPU_CPU_SHARES "cputune.cpu_shares"
#define VIR_DOMAIN_TUNABLE_CPU_EMULATORPIN "cputune.emulatorpin"
#define VIR_DOMAIN_TUNABLE_CPU_EMULATOR_PERIOD "cputune.emulator_period"
#define VIR_DOMAIN_TUNABLE_CPU_EMULATOR_QUOTA "cputune.emulator_quota"
#define VIR_DOMAIN_TUNABLE_CPU_GLOBAL_PERIOD "cputune.global_period"
#define VIR_DOMAIN_TUNABLE_CPU_GLOBAL_QUOTA "cputune.global_quota"
#define VIR_DOMAIN_TUNABLE_CPU_IOTHREADSPIN "cputune.iothreadpin%u"
#define VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_PERIOD "cputune.iothread_period"
#define VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_QUOTA "cputune.iothread_quota"
#define VIR_DOMAIN_TUNABLE_CPU_VCPUPIN "cputune.vcpupin%u"
#define VIR_DOMAIN_TUNABLE_CPU_VCPU_PERIOD "cputune.vcpu_period"
#define VIR_DOMAIN_TUNABLE_CPU_VCPU_QUOTA "cputune.vcpu_quota"
#define VIR_KEYCODE_SET_RFB VIR_KEYCODE_SET_QNUM
#define VIR_MIGRATE_PARAM_AUTO_CONVERGE_INCREMENT "auto_converge.increment"
#define VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL "auto_converge.initial"
#define VIR_MIGRATE_PARAM_BANDWIDTH "bandwidth"
#define VIR_MIGRATE_PARAM_BANDWIDTH_POSTCOPY "bandwidth.postcopy"
#define VIR_MIGRATE_PARAM_COMPRESSION "compression"
#define VIR_MIGRATE_PARAM_COMPRESSION_MT_DTHREADS "compression.mt.dthreads"
#define VIR_MIGRATE_PARAM_COMPRESSION_MT_LEVEL "compression.mt.level"
#define VIR_MIGRATE_PARAM_COMPRESSION_MT_THREADS "compression.mt.threads"
#define VIR_MIGRATE_PARAM_COMPRESSION_XBZRLE_CACHE "compression.xbzrle.cache"
#define VIR_MIGRATE_PARAM_DEST_NAME "destination_name"
#define VIR_MIGRATE_PARAM_DEST_XML "destination_xml"
#define VIR_MIGRATE_PARAM_DISKS_PORT "disks_port"
#define VIR_MIGRATE_PARAM_DISKS_URI "disks_uri"
#define VIR_MIGRATE_PARAM_GRAPHICS_URI "graphics_uri"
#define VIR_MIGRATE_PARAM_LISTEN_ADDRESS "listen_address"
#define VIR_MIGRATE_PARAM_MIGRATE_DISKS "migrate_disks"
#define VIR_MIGRATE_PARAM_PARALLEL_CONNECTIONS "parallel.connections"
#define VIR_MIGRATE_PARAM_PERSIST_XML "persistent_xml"
#define VIR_MIGRATE_PARAM_TLS_DESTINATION "tls.destination"
#define VIR_MIGRATE_PARAM_URI "migrate_uri"
#define VIR_NETWORK_PORT_BANDWIDTH_IN_AVERAGE "inbound.average"
#define VIR_NETWORK_PORT_BANDWIDTH_IN_BURST "inbound.burst"
#define VIR_NETWORK_PORT_BANDWIDTH_IN_FLOOR "inbound.floor"
#define VIR_NETWORK_PORT_BANDWIDTH_IN_PEAK "inbound.peak"
#define VIR_NETWORK_PORT_BANDWIDTH_OUT_AVERAGE "outbound.average"
#define VIR_NETWORK_PORT_BANDWIDTH_OUT_BURST "outbound.burst"
#define VIR_NETWORK_PORT_BANDWIDTH_OUT_PEAK "outbound.peak"
#define VIR_NODE_CPU_STATS_FIELD_LENGTH 80
#define VIR_NODE_CPU_STATS_IDLE "idle"
#define VIR_NODE_CPU_STATS_INTR "intr"
#define VIR_NODE_CPU_STATS_IOWAIT "iowait"
#define VIR_NODE_CPU_STATS_KERNEL "kernel"
#define VIR_NODE_CPU_STATS_USER "user"
#define VIR_NODE_CPU_STATS_UTILIZATION "utilization"
#define VIR_NODE_MEMORY_SHARED_FULL_SCANS "shm_full_scans"
#define VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES "shm_merge_across_nodes"
#define VIR_NODE_MEMORY_SHARED_PAGES_SHARED "shm_pages_shared"
#define VIR_NODE_MEMORY_SHARED_PAGES_SHARING "shm_pages_sharing"
#define VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN "shm_pages_to_scan"
#define VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED "shm_pages_unshared"
#define VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE "shm_pages_volatile"
#define VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS "shm_sleep_millisecs"
#define VIR_NODE_MEMORY_STATS_BUFFERS "buffers"
#define VIR_NODE_MEMORY_STATS_CACHED "cached"
#define VIR_NODE_MEMORY_STATS_FIELD_LENGTH 80
#define VIR_NODE_MEMORY_STATS_FREE "free"
#define VIR_NODE_MEMORY_STATS_TOTAL "total"
#define VIR_NODE_SEV_CBITPOS "cbitpos"
#define VIR_NODE_SEV_CERT_CHAIN "cert-chain"
#define VIR_NODE_SEV_CPU0_ID "cpu0-id"
#define VIR_NODE_SEV_MAX_ES_GUESTS "max-es-guests"
#define VIR_NODE_SEV_MAX_GUESTS "max-guests"
#define VIR_NODE_SEV_PDH "pdh"
#define VIR_NODE_SEV_REDUCED_PHYS_BITS "reduced-phys-bits"
#define VIR_PERF_PARAM_ALIGNMENT_FAULTS "alignment_faults"
#define VIR_PERF_PARAM_BRANCH_INSTRUCTIONS "branch_instructions"
#define VIR_PERF_PARAM_BRANCH_MISSES "branch_misses"
#define VIR_PERF_PARAM_BUS_CYCLES "bus_cycles"
#define VIR_PERF_PARAM_CACHE_MISSES "cache_misses"
#define VIR_PERF_PARAM_CACHE_REFERENCES "cache_references"
#define VIR_PERF_PARAM_CMT "cmt"
#define VIR_PERF_PARAM_CONTEXT_SWITCHES "context_switches"
#define VIR_PERF_PARAM_CPU_CLOCK "cpu_clock"
#define VIR_PERF_PARAM_CPU_CYCLES "cpu_cycles"
#define VIR_PERF_PARAM_CPU_MIGRATIONS "cpu_migrations"
#define VIR_PERF_PARAM_EMULATION_FAULTS "emulation_faults"
#define VIR_PERF_PARAM_INSTRUCTIONS "instructions"
#define VIR_PERF_PARAM_MBML "mbml"
#define VIR_PERF_PARAM_MBMT "mbmt"
#define VIR_PERF_PARAM_PAGE_FAULTS "page_faults"
#define VIR_PERF_PARAM_PAGE_FAULTS_MAJ "page_faults_maj"
#define VIR_PERF_PARAM_PAGE_FAULTS_MIN "page_faults_min"
#define VIR_PERF_PARAM_REF_CPU_CYCLES "ref_cpu_cycles"
#define VIR_PERF_PARAM_STALLED_CYCLES_BACKEND "stalled_cycles_backend"
#define VIR_PERF_PARAM_STALLED_CYCLES_FRONTEND "stalled_cycles_frontend"
#define VIR_PERF_PARAM_TASK_CLOCK "task_clock"
#define VIR_SAVE_PARAM_DXML "dxml"
#define VIR_SAVE_PARAM_FILE "file"
#define VIR_SECURITY_DOI_BUFLEN (256 + 1)
#define VIR_SECURITY_LABEL_BUFLEN (4096 + 1)
#define VIR_SECURITY_MODEL_BUFLEN (256 + 1)
#define VIR_TYPED_PARAM_FIELD_LENGTH 80
#define VIR_UUID_BUFLEN (16)
#define VIR_UUID_STRING_BUFLEN (36+1)
#define _virBlkioParameter _virTypedParameter
#define _virMemoryParameter _virTypedParameter
#define _virSchedParameter _virTypedParameter
typedef struct _virConnect virConnect;
typedef struct _virConnectAuth virConnectAuth;
typedef struct _virConnectCredential virConnectCredential;
typedef struct _virDomain virDomain;
typedef struct _virDomainBlockInfo virDomainBlockInfo;
typedef struct _virDomainBlockJobInfo virDomainBlockJobInfo;
typedef struct _virDomainBlockStats virDomainBlockStatsStruct;
typedef struct _virDomainCheckpoint virDomainCheckpoint;
typedef struct _virDomainControlInfo virDomainControlInfo;
typedef struct _virDomainDiskError virDomainDiskError;
typedef struct _virDomainEventGraphicsAddress virDomainEventGraphicsAddress;
typedef struct _virDomainEventGraphicsSubject virDomainEventGraphicsSubject;
typedef struct _virDomainEventGraphicsSubjectIdentity virDomainEventGraphicsSubjectIdentity;
typedef struct _virDomainFSInfo virDomainFSInfo;
typedef struct _virDomainIOThreadInfo virDomainIOThreadInfo;
typedef struct _virDomainInfo virDomainInfo;
typedef struct _virDomainInterface virDomainInterface;
typedef struct _virDomainInterfaceIPAddress virDomainIPAddress;
typedef struct _virDomainInterfaceStats virDomainInterfaceStatsStruct;
typedef struct _virDomainJobInfo virDomainJobInfo;
typedef struct _virDomainMemoryStat virDomainMemoryStatStruct;
typedef struct _virDomainSnapshot virDomainSnapshot;
typedef struct _virDomainStatsRecord virDomainStatsRecord;
typedef struct _virError virError;
typedef struct _virInterface virInterface;
typedef struct _virNWFilter virNWFilter;
typedef struct _virNWFilterBinding virNWFilterBinding;
typedef struct _virNetwork virNetwork;
typedef struct _virNetworkDHCPLease virNetworkDHCPLease;
typedef struct _virNetworkPort virNetworkPort;
typedef struct _virNodeCPUStats virNodeCPUStats;
typedef struct _virNodeDevice virNodeDevice;
typedef struct _virNodeInfo virNodeInfo;
typedef struct _virNodeMemoryStats virNodeMemoryStats;
typedef struct _virSecret virSecret;
typedef struct _virSecurityLabel virSecurityLabel;
typedef struct _virSecurityModel virSecurityModel;
typedef struct _virStoragePool virStoragePool;
typedef struct _virStoragePoolInfo virStoragePoolInfo;
typedef struct _virStorageVol virStorageVol;
typedef struct _virStorageVolInfo virStorageVolInfo;
typedef struct _virStream virStream;
typedef struct _virTypedParameter virBlkioParameter;
typedef struct _virTypedParameter virTypedParameter;
typedef struct _virTypedParameter virMemoryParameter;
typedef struct _virTypedParameter virSchedParameter;
typedef struct _virVcpuInfo virVcpuInfo;
typedef virBlkioParameter * virBlkioParameterPtr;
typedef enum virBlkioParameterType virBlkioParameterType;
typedef enum virCPUCompareResult virCPUCompareResult;
typedef virConnectAuth * virConnectAuthPtr;
typedef enum virConnectBaselineCPUFlags virConnectBaselineCPUFlags;
typedef enum virConnectCloseReason virConnectCloseReason;
typedef enum virConnectCompareCPUFlags virConnectCompareCPUFlags;
typedef virConnectCredential * virConnectCredentialPtr;
typedef enum virConnectCredentialType virConnectCredentialType;
typedef enum virConnectDomainEventAgentLifecycleReason virConnectDomainEventAgentLifecycleReason;
typedef enum virConnectDomainEventAgentLifecycleState virConnectDomainEventAgentLifecycleState;
typedef enum virConnectDomainEventBlockJobStatus virConnectDomainEventBlockJobStatus;
typedef enum virConnectDomainEventDiskChangeReason virConnectDomainEventDiskChangeReason;
typedef enum virConnectFlags virConnectFlags;
typedef enum virConnectGetAllDomainStatsFlags virConnectGetAllDomainStatsFlags;
typedef enum virConnectListAllDomainsFlags virConnectListAllDomainsFlags;
typedef enum virConnectListAllInterfacesFlags virConnectListAllInterfacesFlags;
typedef enum virConnectListAllNetworksFlags virConnectListAllNetworksFlags;
typedef enum virConnectListAllNodeDeviceFlags virConnectListAllNodeDeviceFlags;
typedef enum virConnectListAllSecretsFlags virConnectListAllSecretsFlags;
typedef enum virConnectListAllStoragePoolsFlags virConnectListAllStoragePoolsFlags;
typedef virConnect * virConnectPtr;
typedef enum virDomainAgentResponseTimeoutValues virDomainAgentResponseTimeoutValues;
typedef enum virDomainAuthorizedSSHKeysSetFlags virDomainAuthorizedSSHKeysSetFlags;
typedef enum virDomainBackupBeginFlags virDomainBackupBeginFlags;
typedef enum virDomainBlockCommitFlags virDomainBlockCommitFlags;
typedef enum virDomainBlockCopyFlags virDomainBlockCopyFlags;
typedef virDomainBlockInfo * virDomainBlockInfoPtr;
typedef enum virDomainBlockJobAbortFlags virDomainBlockJobAbortFlags;
typedef unsigned long long virDomainBlockJobCursor;
typedef enum virDomainBlockJobInfoFlags virDomainBlockJobInfoFlags;
typedef virDomainBlockJobInfo * virDomainBlockJobInfoPtr;
typedef enum virDomainBlockJobSetSpeedFlags virDomainBlockJobSetSpeedFlags;
typedef enum virDomainBlockJobType virDomainBlockJobType;
typedef enum virDomainBlockPullFlags virDomainBlockPullFlags;
typedef enum virDomainBlockRebaseFlags virDomainBlockRebaseFlags;
typedef enum virDomainBlockResizeFlags virDomainBlockResizeFlags;
typedef virDomainBlockStatsStruct * virDomainBlockStatsPtr;
typedef enum virDomainBlockedReason virDomainBlockedReason;
typedef enum virDomainChannelFlags virDomainChannelFlags;
typedef enum virDomainCheckpointCreateFlags virDomainCheckpointCreateFlags;
typedef enum virDomainCheckpointDeleteFlags virDomainCheckpointDeleteFlags;
typedef enum virDomainCheckpointListFlags virDomainCheckpointListFlags;
typedef virDomainCheckpoint * virDomainCheckpointPtr;
typedef enum virDomainCheckpointXMLFlags virDomainCheckpointXMLFlags;
typedef enum virDomainConsoleFlags virDomainConsoleFlags;
typedef enum virDomainControlErrorReason virDomainControlErrorReason;
typedef virDomainControlInfo * virDomainControlInfoPtr;
typedef enum virDomainControlState virDomainControlState;
typedef enum virDomainCoreDumpFlags virDomainCoreDumpFlags;
typedef enum virDomainCoreDumpFormat virDomainCoreDumpFormat;
typedef enum virDomainCrashedReason virDomainCrashedReason;
typedef enum virDomainCreateFlags virDomainCreateFlags;
typedef enum virDomainDefineFlags virDomainDefineFlags;
typedef enum virDomainDestroyFlagsValues virDomainDestroyFlagsValues;
typedef enum virDomainDeviceModifyFlags virDomainDeviceModifyFlags;
typedef enum virDomainDirtyRateCalcFlags virDomainDirtyRateCalcFlags;
typedef enum virDomainDirtyRateStatus virDomainDirtyRateStatus;
typedef enum virDomainDiskErrorCode virDomainDiskErrorCode;
typedef virDomainDiskError * virDomainDiskErrorPtr;
typedef enum virDomainEventCrashedDetailType virDomainEventCrashedDetailType;
typedef enum virDomainEventDefinedDetailType virDomainEventDefinedDetailType;
typedef virDomainEventGraphicsAddress * virDomainEventGraphicsAddressPtr;
typedef enum virDomainEventGraphicsAddressType virDomainEventGraphicsAddressType;
typedef enum virDomainEventGraphicsPhase virDomainEventGraphicsPhase;
typedef virDomainEventGraphicsSubjectIdentity * virDomainEventGraphicsSubjectIdentityPtr;
typedef virDomainEventGraphicsSubject * virDomainEventGraphicsSubjectPtr;
typedef enum virDomainEventID virDomainEventID;
typedef enum virDomainEventIOErrorAction virDomainEventIOErrorAction;
typedef enum virDomainEventPMSuspendedDetailType virDomainEventPMSuspendedDetailType;
typedef enum virDomainEventResumedDetailType virDomainEventResumedDetailType;
typedef enum virDomainEventShutdownDetailType virDomainEventShutdownDetailType;
typedef enum virDomainEventStartedDetailType virDomainEventStartedDetailType;
typedef enum virDomainEventStoppedDetailType virDomainEventStoppedDetailType;
typedef enum virDomainEventSuspendedDetailType virDomainEventSuspendedDetailType;
typedef enum virDomainEventTrayChangeReason virDomainEventTrayChangeReason;
typedef enum virDomainEventType virDomainEventType;
typedef enum virDomainEventUndefinedDetailType virDomainEventUndefinedDetailType;
typedef enum virDomainEventWatchdogAction virDomainEventWatchdogAction;
typedef virDomainFSInfo * virDomainFSInfoPtr;
typedef enum virDomainGetHostnameFlags virDomainGetHostnameFlags;
typedef enum virDomainGetJobStatsFlags virDomainGetJobStatsFlags;
typedef enum virDomainGuestInfoTypes virDomainGuestInfoTypes;
typedef virDomainIOThreadInfo * virDomainIOThreadInfoPtr;
typedef virDomainIPAddress * virDomainIPAddressPtr;
typedef virDomainInfo * virDomainInfoPtr;
typedef enum virDomainInterfaceAddressesSource virDomainInterfaceAddressesSource;
typedef virDomainInterface * virDomainInterfacePtr;
typedef virDomainInterfaceStatsStruct * virDomainInterfaceStatsPtr;
typedef virDomainJobInfo * virDomainJobInfoPtr;
typedef enum virDomainJobOperation virDomainJobOperation;
typedef enum virDomainJobType virDomainJobType;
typedef enum virDomainLifecycle virDomainLifecycle;
typedef enum virDomainLifecycleAction virDomainLifecycleAction;
typedef enum virDomainMemoryFailureActionType virDomainMemoryFailureActionType;
typedef enum virDomainMemoryFailureFlags virDomainMemoryFailureFlags;
typedef enum virDomainMemoryFailureRecipientType virDomainMemoryFailureRecipientType;
typedef enum virDomainMemoryFlags virDomainMemoryFlags;
typedef enum virDomainMemoryModFlags virDomainMemoryModFlags;
typedef virDomainMemoryStatStruct * virDomainMemoryStatPtr;
typedef enum virDomainMemoryStatTags virDomainMemoryStatTags;
typedef enum virDomainMessageType virDomainMessageType;
typedef enum virDomainMetadataType virDomainMetadataType;
typedef enum virDomainMigrateFlags virDomainMigrateFlags;
typedef enum virDomainMigrateMaxSpeedFlags virDomainMigrateMaxSpeedFlags;
typedef enum virDomainModificationImpact virDomainModificationImpact;
typedef enum virDomainNostateReason virDomainNostateReason;
typedef enum virDomainNumatuneMemMode virDomainNumatuneMemMode;
typedef enum virDomainOpenGraphicsFlags virDomainOpenGraphicsFlags;
typedef enum virDomainPMSuspendedDiskReason virDomainPMSuspendedDiskReason;
typedef enum virDomainPMSuspendedReason virDomainPMSuspendedReason;
typedef enum virDomainPausedReason virDomainPausedReason;
typedef enum virDomainProcessSignal virDomainProcessSignal;
typedef virDomain * virDomainPtr;
typedef enum virDomainRebootFlagValues virDomainRebootFlagValues;
typedef enum virDomainRunningReason virDomainRunningReason;
typedef enum virDomainSaveImageXMLFlags virDomainSaveImageXMLFlags;
typedef enum virDomainSaveRestoreFlags virDomainSaveRestoreFlags;
typedef enum virDomainSetTimeFlags virDomainSetTimeFlags;
typedef enum virDomainSetUserPasswordFlags virDomainSetUserPasswordFlags;
typedef enum virDomainShutdownFlagValues virDomainShutdownFlagValues;
typedef enum virDomainShutdownReason virDomainShutdownReason;
typedef enum virDomainShutoffReason virDomainShutoffReason;
typedef enum virDomainSnapshotCreateFlags virDomainSnapshotCreateFlags;
typedef enum virDomainSnapshotDeleteFlags virDomainSnapshotDeleteFlags;
typedef enum virDomainSnapshotListFlags virDomainSnapshotListFlags;
typedef virDomainSnapshot * virDomainSnapshotPtr;
typedef enum virDomainSnapshotRevertFlags virDomainSnapshotRevertFlags;
typedef enum virDomainSnapshotXMLFlags virDomainSnapshotXMLFlags;
typedef enum virDomainState virDomainState;
typedef virDomainStatsRecord * virDomainStatsRecordPtr;
typedef enum virDomainStatsTypes virDomainStatsTypes;
typedef enum virDomainUndefineFlagsValues virDomainUndefineFlagsValues;
typedef enum virDomainVcpuFlags virDomainVcpuFlags;
typedef enum virDomainXMLFlags virDomainXMLFlags;
typedef enum virErrorDomain virErrorDomain;
typedef enum virErrorLevel virErrorLevel;
typedef enum virErrorNumber virErrorNumber;
typedef virError * virErrorPtr;
typedef enum virEventHandleType virEventHandleType;
typedef enum virIPAddrType virIPAddrType;
typedef enum virInterfaceDefineFlags virInterfaceDefineFlags;
typedef virInterface * virInterfacePtr;
typedef enum virInterfaceXMLFlags virInterfaceXMLFlags;
typedef enum virKeycodeSet virKeycodeSet;
typedef virMemoryParameter * virMemoryParameterPtr;
typedef enum virMemoryParameterType virMemoryParameterType;
typedef enum virNWFilterBindingCreateFlags virNWFilterBindingCreateFlags;
typedef virNWFilterBinding * virNWFilterBindingPtr;
typedef enum virNWFilterDefineFlags virNWFilterDefineFlags;
typedef virNWFilter * virNWFilterPtr;
typedef enum virNetworkCreateFlags virNetworkCreateFlags;
typedef virNetworkDHCPLease * virNetworkDHCPLeasePtr;
typedef enum virNetworkDefineFlags virNetworkDefineFlags;
typedef enum virNetworkEventID virNetworkEventID;
typedef enum virNetworkEventLifecycleType virNetworkEventLifecycleType;
typedef enum virNetworkPortCreateFlags virNetworkPortCreateFlags;
typedef virNetworkPort * virNetworkPortPtr;
typedef virNetwork * virNetworkPtr;
typedef enum virNetworkUpdateCommand virNetworkUpdateCommand;
typedef enum virNetworkUpdateFlags virNetworkUpdateFlags;
typedef enum virNetworkUpdateSection virNetworkUpdateSection;
typedef enum virNetworkXMLFlags virNetworkXMLFlags;
typedef enum virNodeAllocPagesFlags virNodeAllocPagesFlags;
typedef virNodeCPUStats * virNodeCPUStatsPtr;
typedef enum virNodeDeviceEventID virNodeDeviceEventID;
typedef enum virNodeDeviceEventLifecycleType virNodeDeviceEventLifecycleType;
typedef virNodeDevice * virNodeDevicePtr;
typedef enum virNodeGetCPUStatsAllCPUs virNodeGetCPUStatsAllCPUs;
typedef enum virNodeGetMemoryStatsAllCells virNodeGetMemoryStatsAllCells;
typedef virNodeInfo * virNodeInfoPtr;
typedef virNodeMemoryStats * virNodeMemoryStatsPtr;
typedef enum virNodeSuspendTarget virNodeSuspendTarget;
typedef virSchedParameter * virSchedParameterPtr;
typedef enum virSchedParameterType virSchedParameterType;
typedef enum virSecretDefineFlags virSecretDefineFlags;
typedef enum virSecretEventID virSecretEventID;
typedef enum virSecretEventLifecycleType virSecretEventLifecycleType;
typedef virSecret * virSecretPtr;
typedef enum virSecretUsageType virSecretUsageType;
typedef virSecurityLabel * virSecurityLabelPtr;
typedef virSecurityModel * virSecurityModelPtr;
typedef enum virStoragePoolBuildFlags virStoragePoolBuildFlags;
typedef enum virStoragePoolCreateFlags virStoragePoolCreateFlags;
typedef enum virStoragePoolDefineFlags virStoragePoolDefineFlags;
typedef enum virStoragePoolDeleteFlags virStoragePoolDeleteFlags;
typedef enum virStoragePoolEventID virStoragePoolEventID;
typedef enum virStoragePoolEventLifecycleType virStoragePoolEventLifecycleType;
typedef virStoragePoolInfo * virStoragePoolInfoPtr;
typedef virStoragePool * virStoragePoolPtr;
typedef enum virStoragePoolState virStoragePoolState;
typedef enum virStorageVolCreateFlags virStorageVolCreateFlags;
typedef enum virStorageVolDeleteFlags virStorageVolDeleteFlags;
typedef enum virStorageVolDownloadFlags virStorageVolDownloadFlags;
typedef enum virStorageVolInfoFlags virStorageVolInfoFlags;
typedef virStorageVolInfo * virStorageVolInfoPtr;
typedef virStorageVol * virStorageVolPtr;
typedef enum virStorageVolResizeFlags virStorageVolResizeFlags;
typedef enum virStorageVolType virStorageVolType;
typedef enum virStorageVolUploadFlags virStorageVolUploadFlags;
typedef enum virStorageVolWipeAlgorithm virStorageVolWipeAlgorithm;
typedef enum virStorageXMLFlags virStorageXMLFlags;
typedef enum virStreamEventType virStreamEventType;
typedef enum virStreamFlags virStreamFlags;
typedef virStream * virStreamPtr;
typedef enum virStreamRecvFlagsValues virStreamRecvFlagsValues;
typedef enum virTypedParameterFlags virTypedParameterFlags;
typedef virTypedParameter * virTypedParameterPtr;
typedef enum virTypedParameterType virTypedParameterType;
typedef enum virVcpuHostCpuState virVcpuHostCpuState;
typedef virVcpuInfo * virVcpuInfoPtr;
typedef enum virVcpuState virVcpuState;
typedef enum virConnectDomainQemuMonitorEventRegisterFlags virConnectDomainQemuMonitorEventRegisterFlags;
typedef enum virDomainQemuAgentCommandTimeoutValues virDomainQemuAgentCommandTimeoutValues;
typedef enum virDomainQemuMonitorCommandFlags virDomainQemuMonitorCommandFlags;
typedef void (*virFreeCallback)(void * opaque);
typedef void (*virEventTimeoutCallback)(int timer,
                                        void * opaque);
typedef void (*virEventHandleCallback)(int watch,
                                       int fd,
                                       int events,
                                       void * opaque);
typedef int (*virConnectAuthCallbackPtr)(virConnectCredentialPtr cred,
                                         unsigned int ncred,
                                         void * cbdata);
typedef void (*virConnectCloseFunc)(virConnectPtr conn,
                                    int reason,
                                    void * opaque);
typedef void (*virConnectDomainEventAgentLifecycleCallback)(virConnectPtr conn,
                                                            virDomainPtr dom,
                                                            int state,
                                                            int reason,
                                                            void * opaque);
typedef void (*virConnectDomainEventBalloonChangeCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           unsigned long long actual,
                                                           void * opaque);
typedef void (*virConnectDomainEventBlockJobCallback)(virConnectPtr conn,
                                                      virDomainPtr dom,
                                                      const char * disk,
                                                      int type,
                                                      int status,
                                                      void * opaque);
typedef void (*virConnectDomainEventBlockThresholdCallback)(virConnectPtr conn,
                                                            virDomainPtr dom,
                                                            const char * dev,
                                                            const char * path,
                                                            unsigned long long threshold,
                                                            unsigned long long excess,
                                                            void * opaque);
typedef int (*virConnectDomainEventCallback)(virConnectPtr conn,
                                             virDomainPtr dom,
                                             int event,
                                             int detail,
                                             void * opaque);
typedef void (*virConnectDomainEventDeviceAddedCallback)(virConnectPtr conn,
                                                         virDomainPtr dom,
                                                         const char * devAlias,
                                                         void * opaque);
typedef void (*virConnectDomainEventDeviceRemovalFailedCallback)(virConnectPtr conn,
                                                                 virDomainPtr dom,
                                                                 const char * devAlias,
                                                                 void * opaque);
typedef void (*virConnectDomainEventDeviceRemovedCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           const char * devAlias,
                                                           void * opaque);
typedef void (*virConnectDomainEventDiskChangeCallback)(virConnectPtr conn,
                                                        virDomainPtr dom,
                                                        const char * oldSrcPath,
                                                        const char * newSrcPath,
                                                        const char * devAlias,
                                                        int reason,
                                                        void * opaque);
typedef void (*virConnectDomainEventGenericCallback)(virConnectPtr conn,
                                                     virDomainPtr dom,
                                                     void * opaque);
typedef void (*virConnectDomainEventGraphicsCallback)(virConnectPtr conn,
                                                      virDomainPtr dom,
                                                      int phase,
                                                      const virDomainEventGraphicsAddress * local,
                                                      const virDomainEventGraphicsAddress * remote,
                                                      const char * authScheme,
                                                      const virDomainEventGraphicsSubject * subject,
                                                      void * opaque);
typedef void (*virConnectDomainEventIOErrorCallback)(virConnectPtr conn,
                                                     virDomainPtr dom,
                                                     const char * srcPath,
                                                     const char * devAlias,
                                                     int action,
                                                     void * opaque);
typedef void (*virConnectDomainEventIOErrorReasonCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           const char * srcPath,
                                                           const char * devAlias,
                                                           int action,
                                                           const char * reason,
                                                           void * opaque);
typedef void (*virConnectDomainEventJobCompletedCallback)(virConnectPtr conn,
                                                          virDomainPtr dom,
                                                          virTypedParameterPtr params,
                                                          int nparams,
                                                          void * opaque);
typedef void (*virConnectDomainEventMemoryDeviceSizeChangeCallback)(virConnectPtr conn,
                                                                    virDomainPtr dom,
                                                                    const char * alias,
                                                                    unsigned long long size,
                                                                    void * opaque);
typedef void (*virConnectDomainEventMemoryFailureCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           int recipient,
                                                           int action,
                                                           unsigned int flags,
                                                           void * opaque);
typedef void (*virConnectDomainEventMetadataChangeCallback)(virConnectPtr conn,
                                                            virDomainPtr dom,
                                                            int type,
                                                            const char * nsuri,
                                                            void * opaque);
typedef void (*virConnectDomainEventMigrationIterationCallback)(virConnectPtr conn,
                                                                virDomainPtr dom,
                                                                int iteration,
                                                                void * opaque);
typedef void (*virConnectDomainEventPMSuspendCallback)(virConnectPtr conn,
                                                       virDomainPtr dom,
                                                       int reason,
                                                       void * opaque);
typedef void (*virConnectDomainEventPMSuspendDiskCallback)(virConnectPtr conn,
                                                           virDomainPtr dom,
                                                           int reason,
                                                           void * opaque);
typedef void (*virConnectDomainEventPMWakeupCallback)(virConnectPtr conn,
                                                      virDomainPtr dom,
                                                      int reason,
                                                      void * opaque);
typedef void (*virConnectDomainEventRTCChangeCallback)(virConnectPtr conn,
                                                       virDomainPtr dom,
                                                       long long utcoffset,
                                                       void * opaque);
typedef void (*virConnectDomainEventTrayChangeCallback)(virConnectPtr conn,
                                                        virDomainPtr dom,
                                                        const char * devAlias,
                                                        int reason,
                                                        void * opaque);
typedef void (*virConnectDomainEventTunableCallback)(virConnectPtr conn,
                                                     virDomainPtr dom,
                                                     virTypedParameterPtr params,
                                                     int nparams,
                                                     void * opaque);
typedef void (*virConnectDomainEventWatchdogCallback)(virConnectPtr conn,
                                                      virDomainPtr dom,
                                                      int action,
                                                      void * opaque);
typedef void (*virConnectNetworkEventGenericCallback)(virConnectPtr conn,
                                                      virNetworkPtr net,
                                                      void * opaque);
typedef void (*virConnectNetworkEventLifecycleCallback)(virConnectPtr conn,
                                                        virNetworkPtr net,
                                                        int event,
                                                        int detail,
                                                        void * opaque);
typedef void (*virConnectNodeDeviceEventGenericCallback)(virConnectPtr conn,
                                                         virNodeDevicePtr dev,
                                                         void * opaque);
typedef void (*virConnectNodeDeviceEventLifecycleCallback)(virConnectPtr conn,
                                                           virNodeDevicePtr dev,
                                                           int event,
                                                           int detail,
                                                           void * opaque);
typedef void (*virConnectSecretEventGenericCallback)(virConnectPtr conn,
                                                     virSecretPtr secret,
                                                     void * opaque);
typedef void (*virConnectSecretEventLifecycleCallback)(virConnectPtr conn,
                                                       virSecretPtr secret,
                                                       int event,
                                                       int detail,
                                                       void * opaque);
typedef void (*virConnectStoragePoolEventGenericCallback)(virConnectPtr conn,
                                                          virStoragePoolPtr pool,
                                                          void * opaque);
typedef void (*virConnectStoragePoolEventLifecycleCallback)(virConnectPtr conn,
                                                            virStoragePoolPtr pool,
                                                            int event,
                                                            int detail,
                                                            void * opaque);
typedef void (*virErrorFunc)(void * userData,
                             virErrorPtr error);
typedef int (*virEventAddHandleFunc)(int fd,
                                     int event,
                                     virEventHandleCallback cb,
                                     void * opaque,
                                     virFreeCallback ff);
typedef int (*virEventAddTimeoutFunc)(int timeout,
                                      virEventTimeoutCallback cb,
                                      void * opaque,
                                      virFreeCallback ff);
typedef int (*virEventRemoveHandleFunc)(int watch);
typedef int (*virEventRemoveTimeoutFunc)(int timer);
typedef void (*virEventUpdateHandleFunc)(int watch,
                                         int event);
typedef void (*virEventUpdateTimeoutFunc)(int timer,
                                          int timeout);
typedef void (*virStreamEventCallback)(virStreamPtr stream,
                                       int events,
                                       void * opaque);
typedef int (*virStreamSinkFunc)(virStreamPtr st,
                                 const char * data,
                                 size_t nbytes,
                                 void * opaque);
typedef int (*virStreamSinkHoleFunc)(virStreamPtr st,
                                     long long length,
                                     void * opaque);
typedef int (*virStreamSourceFunc)(virStreamPtr st,
                                   char * data,
                                   size_t nbytes,
                                   void * opaque);
typedef int (*virStreamSourceHoleFunc)(virStreamPtr st,
                                       int * inData,
                                       long long * length,
                                       void * opaque);
typedef int (*virStreamSourceSkipFunc)(virStreamPtr st,
                                       long long length,
                                       void * opaque);
typedef void (*virConnectDomainQemuMonitorEventCallback)(virConnectPtr conn,
                                                         virDomainPtr dom,
                                                         const char * event,
                                                         long long seconds,
                                                         unsigned int micros,
                                                         const char * details,
                                                         void * opaque);
struct _virConnect {
};
    
struct _virConnectAuth {
  int * credtype;
  unsigned int ncredtype;
  virConnectAuthCallbackPtr cb;
  void * cbdata;
};
    
struct _virConnectCredential {
  int type;
  const char * prompt;
  const char * challenge;
  const char * defresult;
  char * result;
  unsigned int resultlen;
};
    
struct _virDomain {
};
    
struct _virDomainBlockInfo {
  unsigned long long capacity;
  unsigned long long allocation;
  unsigned long long physical;
};
    
struct _virDomainBlockJobInfo {
  int type;
  unsigned long bandwidth;
  virDomainBlockJobCursor cur;
  virDomainBlockJobCursor end;
};
    
struct _virDomainBlockStats {
  long long rd_req;
  long long rd_bytes;
  long long wr_req;
  long long wr_bytes;
  long long errs;
};
    
struct _virDomainCheckpoint {
};
    
struct _virDomainControlInfo {
  unsigned int state;
  unsigned int details;
  unsigned long long stateTime;
};
    
struct _virDomainDiskError {
  char * disk;
  int error;
};
    
struct _virDomainEventGraphicsAddress {
  int family;
  char * node;
  char * service;
};
    
struct _virDomainEventGraphicsSubject {
  int nidentity;
  virDomainEventGraphicsSubjectIdentityPtr identities;
};
    
struct _virDomainEventGraphicsSubjectIdentity {
  char * type;
  char * name;
};
    
struct _virDomainFSInfo {
  char * mountpoint;
  char * name;
  char * fstype;
  size_t ndevAlias;
  char ** devAlias;
};
    
struct _virDomainIOThreadInfo {
  unsigned int iothread_id;
  unsigned char * cpumap;
  int cpumaplen;
};
    
struct _virDomainInfo {
  unsigned char state;
  unsigned long maxMem;
  unsigned long memory;
  unsigned short nrVirtCpu;
  unsigned long long cpuTime;
};
    
struct _virDomainInterface {
  char * name;
  char * hwaddr;
  unsigned int naddrs;
  virDomainIPAddressPtr addrs;
};
    
struct _virDomainInterfaceIPAddress {
  int type;
  char * addr;
  unsigned int prefix;
};
    
struct _virDomainInterfaceStats {
  long long rx_bytes;
  long long rx_packets;
  long long rx_errs;
  long long rx_drop;
  long long tx_bytes;
  long long tx_packets;
  long long tx_errs;
  long long tx_drop;
};
    
struct _virDomainJobInfo {
  int type;
  unsigned long long timeElapsed;
  unsigned long long timeRemaining;
  unsigned long long dataTotal;
  unsigned long long dataProcessed;
  unsigned long long dataRemaining;
  unsigned long long memTotal;
  unsigned long long memProcessed;
  unsigned long long memRemaining;
  unsigned long long fileTotal;
  unsigned long long fileProcessed;
  unsigned long long fileRemaining;
};
    
struct _virDomainMemoryStat {
  int tag;
  unsigned long long val;
};
    
struct _virDomainSnapshot {
};
    
struct _virDomainStatsRecord {
  virDomainPtr dom;
  virTypedParameterPtr params;
  int nparams;
};
    
struct _virError {
  int code;
  int domain;
  char * message;
  virErrorLevel level;
  virConnectPtr conn;
  virDomainPtr dom;
  char * str1;
  char * str2;
  char * str3;
  int int1;
  int int2;
  virNetworkPtr net;
};
    
struct _virInterface {
};
    
struct _virNWFilter {
};
    
struct _virNWFilterBinding {
};
    
struct _virNetwork {
};
    
struct _virNetworkDHCPLease {
  char * iface;
  long long expirytime;
  int type;
  char * mac;
  char * iaid;
  char * ipaddr;
  unsigned int prefix;
  char * hostname;
  char * clientid;
};
    
struct _virNetworkPort {
};
    
struct _virNodeCPUStats {
  char field[VIR_NODE_CPU_STATS_FIELD_LENGTH];
  unsigned long long value;
};
    
struct _virNodeDevice {
};
    
struct _virNodeInfo {
  char model[32];
  unsigned long memory;
  unsigned int cpus;
  unsigned int mhz;
  unsigned int nodes;
  unsigned int sockets;
  unsigned int cores;
  unsigned int threads;
};
    
struct _virNodeMemoryStats {
  char field[VIR_NODE_MEMORY_STATS_FIELD_LENGTH];
  unsigned long long value;
};
    
struct _virSecret {
};
    
struct _virSecurityLabel {
  char label[VIR_SECURITY_LABEL_BUFLEN];
  int enforcing;
};
    
struct _virSecurityModel {
  char model[VIR_SECURITY_MODEL_BUFLEN];
  char doi[VIR_SECURITY_DOI_BUFLEN];
};
    
struct _virStoragePool {
};
    
struct _virStoragePoolInfo {
  int state;
  unsigned long long capacity;
  unsigned long long allocation;
  unsigned long long available;
};
    
struct _virStorageVol {
};
    
struct _virStorageVolInfo {
  int type;
  unsigned long long capacity;
  unsigned long long allocation;
};
    
struct _virStream {
};
    
struct _virTypedParameter {
  char field[VIR_TYPED_PARAM_FIELD_LENGTH];
  int type;
  union {
    int i;
    unsigned int ui;
    long long int l;
    unsigned long long int ul;
    double d;
    char b;
    char * s;
  } value;
};
    
    
    
    
struct _virVcpuInfo {
  unsigned int number;
  int state;
  unsigned long long cpuTime;
  int cpu;
};
    

