// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/appregistry/adapter.go

// Package appregistry is a generated GoMock package.
package appregistry

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/operator-framework/go-appr/models"
	reflect "reflect"
)

// MockapprApiAdapter is a mock of apprApiAdapter interface
type MockapprApiAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockapprApiAdapterMockRecorder
}

// MockapprApiAdapterMockRecorder is the mock recorder for MockapprApiAdapter
type MockapprApiAdapterMockRecorder struct {
	mock *MockapprApiAdapter
}

// NewMockapprApiAdapter creates a new mock instance
func NewMockapprApiAdapter(ctrl *gomock.Controller) *MockapprApiAdapter {
	mock := &MockapprApiAdapter{ctrl: ctrl}
	mock.recorder = &MockapprApiAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockapprApiAdapter) EXPECT() *MockapprApiAdapterMockRecorder {
	return m.recorder
}

// ListPackages mocks base method
func (m *MockapprApiAdapter) ListPackages(namespace string) (models.Packages, error) {
	ret := m.ctrl.Call(m, "ListPackages", namespace)
	ret0, _ := ret[0].(models.Packages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPackages indicates an expected call of ListPackages
func (mr *MockapprApiAdapterMockRecorder) ListPackages(namespace interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackages", reflect.TypeOf((*MockapprApiAdapter)(nil).ListPackages), namespace)
}

// GetPackageMetadata mocks base method
func (m *MockapprApiAdapter) GetPackageMetadata(namespace, repository, release string) (*models.Package, error) {
	ret := m.ctrl.Call(m, "GetPackageMetadata", namespace, repository, release)
	ret0, _ := ret[0].(*models.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageMetadata indicates an expected call of GetPackageMetadata
func (mr *MockapprApiAdapterMockRecorder) GetPackageMetadata(namespace, repository, release interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageMetadata", reflect.TypeOf((*MockapprApiAdapter)(nil).GetPackageMetadata), namespace, repository, release)
}

// DownloadOperatorManifest mocks base method
func (m *MockapprApiAdapter) DownloadOperatorManifest(namespace, repository, digest string) ([]byte, error) {
	ret := m.ctrl.Call(m, "DownloadOperatorManifest", namespace, repository, digest)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadOperatorManifest indicates an expected call of DownloadOperatorManifest
func (mr *MockapprApiAdapterMockRecorder) DownloadOperatorManifest(namespace, repository, digest interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadOperatorManifest", reflect.TypeOf((*MockapprApiAdapter)(nil).DownloadOperatorManifest), namespace, repository, digest)
}
