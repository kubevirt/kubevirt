load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")

pkg_tar(
    name = "alpine-image-tar",
    srcs = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": ["@alpine_image_aarch64//file"],
        "//conditions:default": ["@alpine_image//file"],
    }),
    mode = "440",
    owner = "107.107",
    package_dir = "/disk",
)

container_image(
    name = "alpine-container-disk-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    tars = [":alpine-image-tar"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "cirros-image-tar",
    srcs = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": ["@cirros_image_aarch64//file"],
        "//conditions:default": ["@cirros_image//file"],
    }),
    mode = "440",
    owner = "107.107",
    package_dir = "/disk",
)

container_image(
    name = "cirros-container-disk-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    tars = [":cirros-image-tar"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "cirros-custom-image-tar",
    srcs = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": ["@cirros_image_aarch64//file"],
        "//conditions:default": ["@cirros_image//file"],
    }),
    mode = "440",
    owner = "107.107",
    package_dir = "/custom-disk",
)

# used for e2e testing of custom base baths
container_image(
    name = "cirros-custom-container-disk-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    tars = [":cirros-custom-image-tar"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "fedora-cloud-image-tar",
    srcs = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": ["@fedora_image_aarch64//file"],
        "//conditions:default": ["@fedora_image//file"],
    }),
    mode = "440",
    owner = "107.107",
    package_dir = "/disk",
)

container_image(
    name = "fedora-cloud-container-disk-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    tars = [":fedora-cloud-image-tar"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "microlivecd-image-tar",
    srcs = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": ["@microlivecd_image_aarch64//file"],
        "//conditions:default": ["@microlivecd_image//file"],
    }),
    mode = "440",
    owner = "107.107",
    package_dir = "/disk",
)

container_image(
    name = "microlivecd-container-disk-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    tars = [":microlivecd-image-tar"],
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "virtio-image-tar",
    srcs = ["@virtio_win_image//file"],
    mode = "440",
    owner = "107.107",
    package_dir = "/disk",
)

container_image(
    name = "virtio-container-disk-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    tars = [":virtio-image-tar"],
    visibility = ["//visibility:public"],
)

container_image(
    name = "fedora-sriov-lane-container-disk-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    base = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "@fedora_sriov_lane_aarch64//image",
        "//conditions:default": "@fedora_sriov_lane//image",
    }),
    mode = "444",
    visibility = ["//visibility:public"],
)

container_image(
    name = "fedora-with-test-tooling",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    base = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "@fedora_with_test_tooling_aarch64//image",
        "//conditions:default": "@fedora_with_test_tooling//image",
    }),
    mode = "444",
    visibility = ["//visibility:public"],
)

container_image(
    name = "alpine-ext-kernel-boot-demo-container",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    base = "@alpine-ext-kernel-boot-demo-container-base//image",
    mode = "444",
    tars = [":alpine-image-tar"],
    visibility = ["//visibility:public"],
)
