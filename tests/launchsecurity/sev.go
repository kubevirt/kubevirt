package launchsecurity

import (
	"bytes"
	"context"
	"crypto/aes"
	"crypto/cipher"
	"crypto/hmac"
	"crypto/rand"
	"crypto/sha256"
	"encoding/base64"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"io"
	"time"

	"kubevirt.io/kubevirt/tests/decorators"

	expect "github.com/google/goexpect"
	"github.com/google/uuid"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	k8smetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v1 "kubevirt.io/api/core/v1"
	"kubevirt.io/client-go/kubecli"

	virtconfig "kubevirt.io/kubevirt/pkg/virt-config"
	"kubevirt.io/kubevirt/tests"
	"kubevirt.io/kubevirt/tests/console"
	"kubevirt.io/kubevirt/tests/framework/checks"
	"kubevirt.io/kubevirt/tests/framework/kubevirt"
	. "kubevirt.io/kubevirt/tests/framework/matcher"
	"kubevirt.io/kubevirt/tests/libvmi"
	"kubevirt.io/kubevirt/tests/libwait"
)

var _ = Describe("[sig-compute]AMD Secure Encrypted Virtualization (SEV)", decorators.SigCompute, func() {
	const (
		tikBase64  = "kyka7P31TaQCFZGvIWlwtg=="
		tekBase64  = "QukFWth0tLFJvhb1G0eOZw=="
		diskSecret = "qwerty123"
	)

	var (
		expectedSEVPlatformInfo = v1.SEVPlatformInfo{
			PDH:       "AQAAAAAQAAADEAAAAwAAAAIAAAD9pSXddb2MCBrrMy2algmNyx4PiUzkoAzNr9iUfrxEu/6TXdWfCGqpxgFa9f/HiD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/JcVjemUBPT+u4QkbIk2Q54HhIeUiM3ORUWl9xKWD45RvWrCwetFF2CiDrZm3tmhAAAAIAAAApC6LNHGdI5sVLx3b8VlQtwKzq1jIcilnnwPPWiWfcNQY9NXj3JlPPID8NjFsClqQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw9bxoQ0BqZKhhINn6JBdsm7KGvNZ/camjggBFh+th6KGKZd8RiWwynwj+s5vnq
			CertChain: "
		}

		sevSessionOptions = &v1.SEVSessionOptions{
			Session: "KOXMb7l+gifAhkqsUAp9oRgDhu2suoj3zc7acQVabfxu4rVyWYlllBseOc4M31Gf+oTALbWAjDWb7Lu5dDZNeOfnsieUH7oG/faRYArjaL7fKn6iRo95s8GtoOeJ8bu4diTPNqPTr4sQmeg4sV+QOXfseO94KqAnEZmPnfwWWI8=",
			DHCert:  "AQAAAAAAAAADEAAAAwAAAAIAAABemUB/cPF55uQUuHUgsB7HxN0JfL/SZuyIkWhetMIsc7X8vlqC12UyZXLxEVRbcpwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5TExeg3dkfCy/g/Cl0h8K2cwhV77+1f1yt3belrhuXDwS+nU/L4tmVoAgCvYQZBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQAAABWAABZ2m7hAFYAAAMAAAAAAAAAXNpu4QBWAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMD7S+EAVgAABAQAAPx/AAAAAAAAAAAAAOh8RwT8fwAAkHpHBPx/AAAAAAAAAAAAAOh8RwT8fwAAKDJHBPx/AAAAAAAAAAAAAAQAAAAAAAAAGdpu4QBWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnAwAAAAAAAOcDAAAAAAAAAAARAAAAAAAAAAAAAAAAAAQEAAAEBAAAGvdY4QBWAAA4L0cE/H8AAAAAAAAAAAAAT0Fv4QBWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACoK0cE/H8AAAAAAAAAAAAAAAAAAAAAAAAAABEA/H8AAAAAAAAAAAAAAAAAAAAAAAAa91jhAFYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQAAABWAABZ2m7hAFYAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMD7S+EAVgAABAQAAPx/AAAAAAAAAAAAAOh8RwT8fwAAkHpHBPx/AAAAAAAAAAAAAOh8RwT8fwAAKDJHBPx/AAAAAAAAAAAAAAQAAAAAAAAAGdpu4QBWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnAwAAAAAAAOcDAAAAAAAAAAARAAAAAAAAAAAAAAAAAAQEAAAEBAAAGvdY4QBWAAA4L0c
		}

		expectedSEVMeasurementInfo = v1.SEVMeasurementInfo{
			APIMajor:  0,
			APIMinor:  17,
			BuildID:   48,
			Policy:    1,
			LoaderSHA: "12349ef587bb9090c1f36b5e0f58e21f42bb423d8fc023f737f5ed592756cf9d",
		}
	)

	newSEVFedora := func(opts ...libvmi.Option) *v1.VirtualMachineInstance {
		sevOptions := []libvmi.Option{
			libvmi.WithUefi(false),
			libvmi.WithSEV(),
		}
		opts = append(sevOptions, opts...)
		return libvmi.NewFedora(opts...)
	}

	// As per section 6.5 LAUNCH_MEASURE of the AMD SEV specification the launch
	// measurement is calculated as:
	//   HMAC(0x04 || API_MAJOR || API_MINOR || BUILD ||
	//        GCTX.POLICY || GCTX.LD || MNONCE; GCTX.TIK)
	// The implementation is based on
	//   https://blog.hansenpartnership.com/wp-uploads/2020/12/sevsecret.txt
	verifyMeasurement := func(sevMeasurementInfo *v1.SEVMeasurementInfo, tikBase64 string) []byte {
		By("Verifying launch measurement")
		tik, err := base64.StdEncoding.DecodeString(tikBase64)
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		h := hmac.New(sha256.New, tik)
		err = binary.Write(h, binary.LittleEndian, uint8(0x04))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		err = binary.Write(h, binary.LittleEndian, uint8(sevMeasurementInfo.APIMajor))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		err = binary.Write(h, binary.LittleEndian, uint8(sevMeasurementInfo.APIMinor))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		err = binary.Write(h, binary.LittleEndian, uint8(sevMeasurementInfo.BuildID))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		err = binary.Write(h, binary.LittleEndian, uint32(sevMeasurementInfo.Policy))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		loaderSHA, err := hex.DecodeString(sevMeasurementInfo.LoaderSHA)
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		h.Write(loaderSHA)
		m, err := base64.StdEncoding.DecodeString(sevMeasurementInfo.Measurement)
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		nonce := m[32:48]
		h.Write(nonce)
		measure := m[0:32]
		ExpectWithOffset(1, hex.EncodeToString(h.Sum(nil))).To(Equal(hex.EncodeToString(measure)))
		return measure
	}

	// The implementation is based on
	//   https://blog.hansenpartnership.com/wp-uploads/2020/12/sevsecret.txt
	encryptSecret := func(diskSecret string, measure []byte, tikBase64, tekBase64 string) *v1.SEVSecretOptions {
		By("Encrypting launch secret")
		tik, err := base64.StdEncoding.DecodeString(tikBase64)
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		tek, err := base64.StdEncoding.DecodeString(tekBase64)
		ExpectWithOffset(1, err).ToNot(HaveOccurred())

		// AMD SEV specification, section 4.6 Endianness: all integral values
		// passed between the firmware and the CPU driver are little-endian
		// formatted. Applies to UUIDs as well.
		writeUUID := func(w io.Writer, uuid uuid.UUID) {
			var err error
			err = binary.Write(w, binary.LittleEndian, binary.BigEndian.Uint32(uuid[0:4]))
			ExpectWithOffset(2, err).ToNot(HaveOccurred())
			err = binary.Write(w, binary.LittleEndian, binary.BigEndian.Uint16(uuid[4:6]))
			ExpectWithOffset(2, err).ToNot(HaveOccurred())
			err = binary.Write(w, binary.LittleEndian, binary.BigEndian.Uint16(uuid[6:8]))
			ExpectWithOffset(2, err).ToNot(HaveOccurred())
			_, err = w.Write(uuid[8:])
			ExpectWithOffset(2, err).ToNot(HaveOccurred())
		}

		const (
			uuidLen = 16
			sizeLen = 4
		)

		// total length of table: header plus one entry with trailing \0
		l := (uuidLen + sizeLen) + (uuidLen + sizeLen) + len(diskSecret) + 1
		// SEV-ES requires rounding to 16
		l = (l + 15) & ^15

		secret := bytes.NewBuffer(make([]byte, 0, l))
		// 0:16
		writeUUID(secret, uuid.MustParse("{1e74f542-71dd-4d66-963e-ef4287ff173b}"))
		// 16:20
		err = binary.Write(secret, binary.LittleEndian, uint32(l))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		// 20:36
		writeUUID(secret, uuid.MustParse("{736869e5-84f0-4973-92ec-06879ce3da0b}"))
		// 36:40
		err = binary.Write(secret, binary.LittleEndian, uint32(uuidLen+sizeLen+len(diskSecret)+1))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		// 40:40+len(diskSecret)+1
		secret.Write([]byte(diskSecret))
		// write zeroes
		secret.Write(make([]byte, l-secret.Len()))
		ExpectWithOffset(1, secret.Len()).To(Equal(l))

		// The data protection scheme utilizes AES-128 CTR mode:
		//   C = AES-128-CTR(M; K, IV)
		iv := make([]byte, 16)
		_, err = rand.Read(iv)
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		aes, err := aes.NewCipher(tek)
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		ctr := cipher.NewCTR(aes, iv)
		encryptedSecret := make([]byte, secret.Len())
		cipher.Stream.XORKeyStream(ctr, encryptedSecret, secret.Bytes())

		// AMD SEV specification, section 6.6 LAUNCH_SECRET:
		//   Header: FLAGS + IV + HMAC
		header := bytes.NewBuffer(make([]byte, 0, 52))
		// 0:4 FLAGS.COMPRESSED
		err = binary.Write(header, binary.LittleEndian, uint32(0))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		// 4:20 IV
		header.Write(iv)
		// HMAC(0x01 || FLAGS || IV || GUEST_LENGTH ||
		//      TRANS_LENGTH || DATA || MEASURE; GCTX.TIK)
		h := hmac.New(sha256.New, tik)
		err = binary.Write(h, binary.LittleEndian, uint8(0x01))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		h.Write(header.Bytes()[0:20]) // FLAGS || IV
		err = binary.Write(h, binary.LittleEndian, uint32(l))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		err = binary.Write(h, binary.LittleEndian, uint32(l))
		ExpectWithOffset(1, err).ToNot(HaveOccurred())
		h.Write(encryptedSecret)
		h.Write(measure)
		// 20:52 HMAC
		header.Write(h.Sum(nil))

		return &v1.SEVSecretOptions{
			Secret: base64.StdEncoding.EncodeToString(encryptedSecret),
			Header: base64.StdEncoding.EncodeToString(header.Bytes()),
		}
	}

	BeforeEach(func() {
		checks.SkipTestIfNoFeatureGate(virtconfig.WorkloadEncryptionSEV)
	})

	Context("[Serial]device management", Serial, func() {
		var (
			virtClient      kubecli.KubevirtClient
			nodeName        string
			isDevicePresent bool
			err             error
		)

		BeforeEach(func() {
			virtClient = kubevirt.Client()

			nodeName = tests.NodeNameWithHandler()
			Expect(nodeName).ToNot(BeEmpty())

			checkCmd := []string{"ls", "/dev/sev"}
			_, err = tests.ExecuteCommandInVirtHandlerPod(nodeName, checkCmd)
			isDevicePresent = (err == nil)

			if !isDevicePresent {
				// Create a fake SEV device
				mknodCmd := []string{"mknod", "/dev/sev", "c", "10", "124"}
				_, err = tests.ExecuteCommandInVirtHandlerPod(nodeName, mknodCmd)
				Expect(err).ToNot(HaveOccurred())
			}

			Eventually(func() bool {
				node, err := virtClient.CoreV1().Nodes().Get(context.Background(), nodeName, k8smetav1.GetOptions{})
				Expect(err).ToNot(HaveOccurred())
				val, ok := node.Status.Capacity["devices.kubevirt.io/sev"]
				return ok && !val.IsZero()
			}, 30*time.Second, 1*time.Second).Should(BeTrue(), "SEV capacity should not be zero")
		})

		AfterEach(func() {
			if !isDevicePresent {
				// Remove the fake SEV device
				rmCmd := []string{"rm", "-f", "/dev/sev"}
				_, err = tests.ExecuteCommandInVirtHandlerPod(nodeName, rmCmd)
				Expect(err).ToNot(HaveOccurred())
			}

			tests.EnableFeatureGate(virtconfig.WorkloadEncryptionSEV)
		})

		It("should reset SEV capacity when the feature gate is disabled", func() {
			By(fmt.Sprintf("Disabling %s feature gate", virtconfig.WorkloadEncryptionSEV))
			tests.DisableFeatureGate(virtconfig.WorkloadEncryptionSEV)
			Eventually(func() bool {
				node, err := virtClient.CoreV1().Nodes().Get(context.Background(), nodeName, k8smetav1.GetOptions{})
				Expect(err).ToNot(HaveOccurred())
				val, ok := node.Status.Capacity["devices.kubevirt.io/sev"]
				return !ok || val.IsZero()
			}, 30*time.Second, 1*time.Second).Should(BeTrue(), "SEV capacity should be zero")
		})
	})

	Context("lifecycle", func() {
		BeforeEach(func() {
			checks.SkipTestIfNotSEVCapable()
		})

		It("should start a SEV VM", func() {
			const secureBoot = false
			vmi := libvmi.NewFedora(libvmi.WithUefi(secureBoot), libvmi.WithSEV())
			vmi = tests.RunVMIAndExpectLaunch(vmi, 240)

			By("Expecting the VirtualMachineInstance console")
			Expect(console.LoginToFedora(vmi)).To(Succeed())

			By("Verifying that SEV is enabled in the guest")
			err := console.SafeExpectBatch(vmi, []expect.Batcher{
				&expect.BSnd{S: "\n"},
				&expect.BExp{R: console.PromptExpression},
				&expect.BSnd{S: "dmesg | grep --color=never SEV\n"},
				&expect.BExp{R: "AMD Memory Encryption Features active: SEV"},
				&expect.BSnd{S: "\n"},
				&expect.BExp{R: console.PromptExpression},
			}, 30)
			Expect(err).ToNot(HaveOccurred())
		})

		It("should run guest attestation", func() {
			vmi := newSEVFedora(libvmi.WithSEVAttestation())
			vmi = tests.RunVMI(vmi, 30)
			Eventually(ThisVMI(vmi), 60).Should(BeInPhase(v1.Scheduled))

			virtClient, err := kubecli.GetKubevirtClient()
			Expect(err).ToNot(HaveOccurred())

			By("Fetching platform certificates")
			sevPlatformInfo, err := virtClient.VirtualMachineInstance(vmi.Namespace).SEVFetchCertChain(vmi.Name)
			Expect(err).ToNot(HaveOccurred())
			Expect(sevPlatformInfo).To(Equal(expectedSEVPlatformInfo))

			By("Setting up session parameters")
			err = virtClient.VirtualMachineInstance(vmi.Namespace).SEVSetupSession(vmi.Name, sevSessionOptions)
			Expect(err).ToNot(HaveOccurred())
			Eventually(ThisVMI(vmi), 60).Should(And(BeRunning(), HaveConditionTrue(v1.VirtualMachineInstancePaused)))

			By("Querying launch measurement")
			sevMeasurementInfo, err := virtClient.VirtualMachineInstance(vmi.Namespace).SEVQueryLaunchMeasurement(vmi.Name)
			Expect(err).ToNot(HaveOccurred())
			Expect(sevMeasurementInfo.APIMajor).To(Equal(expectedSEVMeasurementInfo.APIMajor))
			Expect(sevMeasurementInfo.APIMinor).To(Equal(expectedSEVMeasurementInfo.APIMinor))
			Expect(sevMeasurementInfo.BuildID).To(Equal(expectedSEVMeasurementInfo.BuildID))
			Expect(sevMeasurementInfo.Policy).To(Equal(expectedSEVMeasurementInfo.Policy))
			Expect(sevMeasurementInfo.LoaderSHA).To(Equal(expectedSEVMeasurementInfo.LoaderSHA))
			measure := verifyMeasurement(&sevMeasurementInfo, tikBase64)
			sevSecretOptions := encryptSecret(diskSecret, measure, tikBase64, tekBase64)

			By("Injecting launch secret")
			err = virtClient.VirtualMachineInstance(vmi.Namespace).SEVInjectLaunchSecret(vmi.Name, sevSecretOptions)
			Expect(err).ToNot(HaveOccurred())

			By("Unpausing the VirtualMachineInstance")
			err = virtClient.VirtualMachineInstance(vmi.Namespace).Unpause(context.Background(), vmi.Name, &v1.UnpauseOptions{})
			Expect(err).ToNot(HaveOccurred())
			Eventually(ThisVMI(vmi), 30*time.Second, time.Second).Should(HaveConditionMissingOrFalse(v1.VirtualMachineInstancePaused))

			By("Waiting for the VirtualMachineInstance to become ready")
			libwait.WaitUntilVMIReady(vmi, console.LoginToFedora)
		})
	})
})
