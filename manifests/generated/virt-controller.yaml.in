---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    kubevirt.io: virt-controller
  name: virt-controller
  namespace: {{.Namespace}}
spec:
  replicas: 2
  selector:
    matchLabels:
      kubevirt.io: virt-controller
  strategy: {}
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly","operator":"Exists"}]'
      labels:
        kubevirt.io: virt-controller
        prometheus.kubevirt.io: ""
      name: virt-controller
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: kubevirt.io
                  operator: In
                  values:
                  - virt-controller
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - command:
        - virt-controller
        - --launcher-image
        - {{.DockerPrefix}}/virt-launcher:{{.DockerTag}}
        - --port
        - "8443"
        - --pod-ip-address
        - $(MY_POD_IP)
        - --pod-name
        - $(MY_POD_NAME)
        - -v
        - {{.Verbosity}}
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: {{.DockerPrefix}}/virt-controller:{{.DockerTag}}
        imagePullPolicy: {{.ImagePullPolicy}}
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 15
          timeoutSeconds: 10
        name: virt-controller
        ports:
        - containerPort: 8443
          name: metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /leader
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 15
          timeoutSeconds: 10
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/kubevirt/certificates
          name: certificates
      securityContext:
        runAsNonRoot: true
      serviceAccountName: kubevirt-controller
      volumes:
      - emptyDir: {}
        name: certificates
