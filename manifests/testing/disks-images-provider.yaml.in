---
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: host-path-disk-alpine
  labels:
    kubevirt.io: ""
    os: "alpine"
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/hostImages/alpine
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: host-path-disk-custom
  labels:
    kubevirt.io: ""
    os: "custom"
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/hostImages/custom
---
apiVersion: v1
kind: Service
metadata:
  name: cdi-http-import-server
  namespace: {{.Namespace}}
  labels:
    kubevirt.io: "cdi-http-import-server"
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  selector:
    kubevirt.io: cdi-http-import-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cdi-http-import-server
  namespace: {{.Namespace}}
  labels:
    kubevirt.io: "cdi-http-import-server"
spec:
  selector:
    matchLabels:
      kubevirt.io: "cdi-http-import-server"
  replicas: 1
  template:
    metadata:
      labels:
        kubevirt.io: cdi-http-import-server
    spec:
      serviceAccountName: kubevirt-testing
      containers:
        - name: cdi-http-import-server
          image: {{.DockerPrefix}}/cdi-http-import-server:{{.DockerTag}}
          imagePullPolicy: Always
          ports:
            - containerPort: 80
              name: "http"
              protocol: "TCP"
          readinessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: disks-images-provider
  namespace: {{.Namespace}}
  labels:
    kubevirt.io: "disks-images-provider"
spec:
  selector:
    matchLabels:
      kubevirt.io: "disks-images-provider"
  template:
    metadata:
      labels:
        name: disks-images-provider
        kubevirt.io: disks-images-provider
      name: disks-images-provider
    spec:
      serviceAccountName: kubevirt-testing
      containers:
        - name: target
          image: {{.DockerPrefix}}/disks-images-provider:{{.DockerTag}}
          imagePullPolicy: Always
          volumeMounts:
          - name: images
            mountPath: /hostImages
          - name: local-storage
            mountPath: /local-storage
          securityContext:
            privileged: true
          readinessProbe:
            exec:
              command:
              - cat
              - /ready
            initialDelaySeconds: 10
            periodSeconds: 5
        - name: loopdev
          command:
          - sh
          - -c
          - |
            while true; do
              for i in $(seq 0 5); do
                  losetup -d /dev/loop$i
                  rm -f /dev/loop$i
                  mknod /dev/loop$i b 7 $i
              done
              sleep 100000000
            done
          image: {{.DockerPrefix}}/disks-images-provider:{{.DockerTag}}
          imagePullPolicy: IfNotPresent
          resources: {}
          securityContext:
            privileged: true
          volumeMounts:
          - name: dev
            mountPath: /dev
      volumes:
        - name: images
          hostPath:
            path: /tmp/hostImages
            type: DirectoryOrCreate
        - name: local-storage
          hostPath:
            path: /mnt/local-storage
            type: DirectoryOrCreate
        - name: dev
          hostPath:
            path: /dev
