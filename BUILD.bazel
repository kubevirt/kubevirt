# See https://github.com/bazelbuild/bazel/issues/7899
load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")

py_runtime(
    name = "py2_runtime",
    interpreter_path = "/usr/bin/python2",
    python_version = "PY2",
)

py_runtime(
    name = "py3_runtime",
    interpreter_path = "/usr/bin/python3",
    python_version = "PY3",
)

py_runtime_pair(
    name = "py_runtime_pair",
    py2_runtime = ":py2_runtime",
    py3_runtime = ":py3_runtime",
)

toolchain(
    name = "py_toolchain",
    toolchain = "py_runtime_pair",
    toolchain_type = "@bazel_tools//tools/python:toolchain_type",
)

load("@io_bazel_rules_go//go:def.bzl", "go_library")
load("@bazel_gazelle//:def.bzl", "gazelle")
load("@io_bazel_rules_go//go:def.bzl", "nogo")
load("@com_github_ash2k_bazel_tools//goimports:def.bzl", "goimports")
load("@bazeldnf//:def.bzl", "bazeldnf")

goimports(
    name = "goimports",
    display_diffs = True,
    exclude_paths = [
        "./vendor/*",
        "./.history/*",
        "./.git/*",
        "./_ci-configs/*",
    ],
    local = ["kubevirt.io/kubevirt"],
    prefix = "kubevirt.io/kubevirt",
    write = True,
)

nogo(
    name = "nogo_vet",
    config = "nogo_config.json",
    visibility = ["//visibility:public"],
    # These deps enable the analyses equivalent to running `go vet`.
    # Passing vet = True enables only a tiny subset of these (the ones
    # that are always correct).
    # You can see the what `go vet` does by running `go doc cmd/vet`.
    deps = [
        "//vendor/github.com/nunnatsa/ginkgolinter:go_default_library",
        "//tools/analyzers/banncheck:go_default_library",
        "//vendor/github.com/gordonklaus/ineffassign/pkg/ineffassign:go_default_library",
        "//vendor/github.com/kisielk/errcheck/errcheck:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/asmdecl:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/assign:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/atomic:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/bools:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/buildtag:go_default_library",
        # Fails on a vendored dependency, disabling for now.
        # "@org_golang_x_tools//go/analysis/passes/cgocall:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/composite:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/copylock:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/httpresponse:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/loopclosure:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/lostcancel:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/nilfunc:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/printf:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/shift:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/stdmethods:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/structtag:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/tests:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/unreachable:go_default_library",
        # FIXME: Nogo fails analysis although configured to be disabled on nogo_config.json.
        # "@org_golang_x_tools//go/analysis/passes/unsafeptr:go_default_library",
        "@org_golang_x_tools//go/analysis/passes/unusedresult:go_default_library",
    ],
)

# gazelle:prefix kubevirt.io/kubevirt
# gazelle:build_tags selinux
# gazelle:resolve go golang.org/x/tools/go/analysis @org_golang_x_tools//go/analysis:go_default_library
gazelle(
    name = "gazelle",
    build_tags = ["selinux"],
)

bazeldnf(name = "bazeldnf")

load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")

buildifier(name = "buildifier")

genrule(
    name = "get-version",
    srcs = [],
    outs = [".version"],
    cmd = "grep ^STABLE_BUILD_SCM_REVISION bazel-out/stable-status.txt | cut -d' ' -f2 >$@",
    stamp = 1,
    visibility = ["//visibility:public"],
)

cc_library(
    name = "libvirt-libs",
    srcs = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": ["//rpm:libvirt-libs_aarch64/usr/lib64"],
        "//conditions:default": ["//rpm:libvirt-libs_x86_64/usr/lib64"],
    }),
    hdrs = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": ["//rpm:libvirt-libs_aarch64/usr/include/libvirt"],
        "//conditions:default": ["//rpm:libvirt-libs_x86_64/usr/include/libvirt"],
    }),
    include_prefix = "libvirt",
    linkstatic = 1,
    strip_include_prefix = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "/rpm/libvirt-libs_aarch64/",
        "//conditions:default": "/rpm/libvirt-libs_x86_64/",
    }),
    visibility = ["//visibility:public"],
)

load("@io_bazel_rules_docker//contrib:passwd.bzl", "passwd_entry", "passwd_file")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

passwd_entry(
    name = "nonroot-user",
    gid = 1001,
    home = "/home/nonroot-user",
    shell = "/bin/bash",
    uid = 1001,
    username = "nonroot-user",
)

passwd_file(
    name = "passwd",
    entries = [
        ":nonroot-user",
    ],
)

pkg_tar(
    name = "passwd-tar",
    srcs = [":passwd"],
    mode = "0644",
    package_dir = "etc",
    visibility = ["//visibility:public"],
)

load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_bundle",
    "container_image",
    "container_push",
)

container_image(
    name = "passwd-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    base = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "@go_image_base_aarch64//image",
        "//conditions:default": "@go_image_base//image",
    }),
    tars = [":passwd-tar"],
    user = "1001",
    visibility = ["//visibility:public"],
)

load(
    "@io_bazel_rules_docker//repositories:repositories.bzl",
    container_repositories = "repositories",
)

config_setting(
    name = "release",
    values = {"define": "release=true"},
)

container_bundle(
    name = "build-other-images",
    images = {
        # cmd images
        "$(container_prefix)/$(image_prefix)sidecar-shim:$(container_tag)": "//cmd/sidecars:sidecar-shim-image",
        "$(container_prefix)/$(image_prefix)example-hook-sidecar:$(container_tag)": "//cmd/sidecars/smbios:example-hook-sidecar-image",
        "$(container_prefix)/$(image_prefix)example-disk-mutation-hook-sidecar:$(container_tag)": "//cmd/sidecars/disk-mutation:example-disk-mutation-hook-sidecar-image",
        "$(container_prefix)/$(image_prefix)example-cloudinit-hook-sidecar:$(container_tag)": "//cmd/sidecars/cloudinit:example-cloudinit-hook-sidecar-image",
        "$(container_prefix)/$(image_prefix)network-slirp-binding:$(container_tag)": "//cmd/sidecars/network-slirp-binding:network-slirp-binding-image",
        "$(container_prefix)/$(image_prefix)network-passt-binding:$(container_tag)": "//cmd/sidecars/network-passt-binding:network-passt-binding-image",
        # container-disk images
        "$(container_prefix)/$(image_prefix)alpine-container-disk-demo:$(container_tag)": "//containerimages:alpine-container-disk-image",
        "$(container_prefix)/$(image_prefix)cirros-container-disk-demo:$(container_tag)": "//containerimages:cirros-container-disk-image",
        "$(container_prefix)/$(image_prefix)cirros-custom-container-disk-demo:$(container_tag)": "//containerimages:cirros-custom-container-disk-image",
        "$(container_prefix)/$(image_prefix)virtio-container-disk:$(container_tag)": "//containerimages:virtio-container-disk-image",
        # Kernel boot container
        "$(container_prefix)/$(image_prefix)alpine-ext-kernel-boot-demo:$(container_tag)": "//containerimages:alpine-ext-kernel-boot-demo-container",
        # Customized container-disk images
        "$(container_prefix)/$(image_prefix)fedora-with-test-tooling-container-disk:$(container_tag)": "//containerimages:fedora-with-test-tooling",
        "$(container_prefix)/$(image_prefix)alpine-with-test-tooling-container-disk:$(container_tag)": "//containerimages:alpine-with-test-tooling",
        "$(container_prefix)/$(image_prefix)fedora-realtime-container-disk:$(container_tag)": "//containerimages:fedora-realtime",
        # testing images
        "$(container_prefix)/$(image_prefix)disks-images-provider:$(container_tag)": "//images/disks-images-provider:disks-images-provider-image",
        "$(container_prefix)/$(image_prefix)nfs-server:$(container_tag)": "//images/nfs-server:nfs-server-image",
        "$(container_prefix)/$(image_prefix)vm-killer:$(container_tag)": "//images/vm-killer:vm-killer-image",
        "$(container_prefix)/$(image_prefix)winrmcli:$(container_tag)": "//images/winrmcli:winrmcli-image",
    },
)

# This is for generating a bundle of the core components for external processing
container_bundle(
    name = "virt-components-bundle",
    images = {
        "$(container_prefix)/$(image_prefix)virt-api:$(container_tag)": "//cmd/virt-api:virt-api-image",
        "$(container_prefix)/$(image_prefix)virt-controller:$(container_tag)": "//cmd/virt-controller:virt-controller-image",
        "$(container_prefix)/$(image_prefix)virt-handler:$(container_tag)": "//cmd/virt-handler:virt-handler-image",
        "$(container_prefix)/$(image_prefix)virt-launcher:$(container_tag)": "//cmd/virt-launcher:virt-launcher-image",
        "$(container_prefix)/$(image_prefix)virt-operator:$(container_tag)": "//cmd/virt-operator:virt-operator-image",
    },
)

# heads up: docker_push is loaded from contrib:push-all, while container_push is loaded earlier from container:container
load("@io_bazel_rules_docker//contrib:push-all.bzl", "docker_push")

# we need to push virt images with the rule from container:container in order to get the digest file
container_push(
    name = "push-virt-operator",
    format = "Docker",
    image = "//cmd/virt-operator:virt-operator-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-operator",
    tag = "$(container_tag)",
)

container_push(
    name = "push-virt-api",
    format = "Docker",
    image = "//cmd/virt-api:virt-api-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-api",
    tag = "$(container_tag)",
)

container_push(
    name = "push-virt-controller",
    format = "Docker",
    image = "//cmd/virt-controller:virt-controller-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-controller",
    tag = "$(container_tag)",
)

container_push(
    name = "push-virt-handler",
    format = "Docker",
    image = "//cmd/virt-handler:virt-handler-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-handler",
    tag = "$(container_tag)",
)

container_push(
    name = "push-virt-launcher",
    format = "Docker",
    image = "//cmd/virt-launcher:virt-launcher-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-launcher",
    tag = "$(container_tag)",
)

container_push(
    name = "push-conformance",
    testonly = True,
    format = "Docker",
    image = "//tests:conformance_image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)conformance",
    tag = "$(container_tag)",
)

container_push(
    name = "push-libguestfs-tools",
    format = "Docker",
    image = "//cmd/libguestfs:libguestfs-tools-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)libguestfs-tools",
    tag = "$(container_tag)",
)

container_push(
    name = "push-virt-exportserver",
    format = "Docker",
    image = "//cmd/virt-exportserver:virt-exportserver-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-exportserver",
    tag = "$(container_tag)",
)

container_push(
    name = "push-virt-exportproxy",
    format = "Docker",
    image = "//cmd/virt-exportproxy:virt-exportproxy-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virt-exportproxy",
    tag = "$(container_tag)",
)

container_push(
    name = "push-pr-helper",
    format = "Docker",
    image = "//cmd/pr-helper:pr-helper",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)pr-helper",
    tag = "$(container_tag)",
)

# The following container_push list is synced with the images in container_bundle "build-other-images".
# cmd images
container_push(
    name = "push-sidecar-shim",
    format = "Docker",
    image = "//cmd/sidecars:sidecar-shim-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)sidecar-shim",
    tag = "$(container_tag)",
)

container_push(
    name = "push-network-slirp-binding",
    format = "Docker",
    image = "//cmd/sidecars/network-slirp-binding:network-slirp-binding-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)network-slirp-binding",
    tag = "$(container_tag)",
)

container_push(
    name = "push-network-passt-binding",
    format = "Docker",
    image = "//cmd/sidecars/network-passt-binding:network-passt-binding-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)network-passt-binding",
    tag = "$(container_tag)",
)

container_push(
    name = "push-example-hook-sidecar",
    format = "Docker",
    image = "//cmd/sidecars/smbios:example-hook-sidecar-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)example-hook-sidecar",
    tag = "$(container_tag)",
)

container_push(
    name = "push-example-disk-mutation-hook-sidecar",
    format = "Docker",
    image = "//cmd/sidecars/disk-mutation:example-disk-mutation-hook-sidecar-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)example-disk-mutation-hook-sidecar",
    tag = "$(container_tag)",
)

container_push(
    name = "push-example-cloudinit-hook-sidecar",
    format = "Docker",
    image = "//cmd/sidecars/cloudinit:example-cloudinit-hook-sidecar-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)example-cloudinit-hook-sidecar",
    tag = "$(container_tag)",
)

# container-disk images
container_push(
    name = "push-alpine-container-disk-demo",
    format = "Docker",
    image = "//containerimages:alpine-container-disk-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)alpine-container-disk-demo",
    tag = "$(container_tag)",
)

container_push(
    name = "push-cirros-container-disk-demo",
    format = "Docker",
    image = "//containerimages:cirros-container-disk-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)cirros-container-disk-demo",
    tag = "$(container_tag)",
)

container_push(
    name = "push-cirros-custom-container-disk-demo",
    format = "Docker",
    image = "//containerimages:cirros-custom-container-disk-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)cirros-custom-container-disk-demo",
    tag = "$(container_tag)",
)

container_push(
    name = "push-virtio-container-disk",
    format = "Docker",
    image = "//containerimages:virtio-container-disk-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)virtio-container-disk",
    tag = "$(container_tag)",
)

# Kernel boot container
container_push(
    name = "push-alpine-ext-kernel-boot-demo",
    format = "Docker",
    image = "//containerimages:alpine-ext-kernel-boot-demo-container",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)alpine-ext-kernel-boot-demo",
    tag = "$(container_tag)",
)

# Customized container-disk images
container_push(
    name = "push-fedora-with-test-tooling-container-disk",
    format = "Docker",
    image = "//containerimages:fedora-with-test-tooling",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)fedora-with-test-tooling-container-disk",
    tag = "$(container_tag)",
)

container_push(
    name = "push-alpine-with-test-tooling-container-disk",
    format = "Docker",
    image = "//containerimages:alpine-with-test-tooling",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)alpine-with-test-tooling-container-disk",
    tag = "$(container_tag)",
)

container_push(
    name = "push-fedora-realtime-container-disk",
    format = "Docker",
    image = "//containerimages:fedora-realtime",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)fedora-realtime-container-disk",
    tag = "$(container_tag)",
)

# testing images
container_push(
    name = "push-disks-images-provider",
    format = "Docker",
    image = "//images/disks-images-provider:disks-images-provider-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)disks-images-provider",
    tag = "$(container_tag)",
)

container_push(
    name = "push-nfs-server",
    format = "Docker",
    image = "//images/nfs-server:nfs-server-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)nfs-server",
    tag = "$(container_tag)",
)

container_push(
    name = "push-vm-killer",
    format = "Docker",
    image = "//images/vm-killer:vm-killer-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)vm-killer",
    tag = "$(container_tag)",
)

container_push(
    name = "push-winrmcli",
    format = "Docker",
    image = "//images/winrmcli:winrmcli-image",
    registry = "$(container_prefix)",
    repository = "$(image_prefix)winrmcli",
    tag = "$(container_tag)",
)

genrule(
    name = "build-virtctl",
    srcs = [
        "//cmd/virtctl",
    ],
    outs = ["virtctl-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-virtctl-amd64",
    srcs = [
        "//cmd/virtctl:virtctl-amd64",
    ],
    outs = ["virtctl-copier-amd64"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-virtctl-darwin",
    srcs = [
        "//cmd/virtctl:virtctl-darwin",
    ],
    outs = ["virtctl-copier-darwin"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-virtctl-windows",
    srcs = [
        "//cmd/virtctl:virtctl-windows",
    ],
    outs = ["virtctl-copier-windows"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-virtctl-arm64",
    srcs = [
        "//cmd/virtctl:virtctl-arm64",
    ],
    outs = ["virtctl-copier-arm64"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-virtctl-darwin-arm64",
    srcs = [
        "//cmd/virtctl:virtctl-darwin-arm64",
    ],
    outs = ["virtctl-copier-darwin-arm64"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-ginkgo",
    srcs = [
        "//vendor/github.com/onsi/ginkgo/v2/ginkgo",
    ],
    outs = ["ginkgo-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-manifest-templator",
    srcs = [
        "//tools/manifest-templator:templator",
    ],
    outs = ["manifest-templator-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-perfscale-audit",
    srcs = [
        "//tools/perfscale-audit",
    ],
    outs = ["perfscale-audit-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-perfscale-load-generator",
    srcs = [
        "//tools/perfscale-load-generator",
    ],
    outs = ["perfscale-load-generator-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-cluster-profiler",
    srcs = [
        "//tools/cluster-profiler",
    ],
    outs = ["cluster-profiler-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-junit-merger",
    srcs = [
        "//tools/junit-merger",
    ],
    outs = ["junit-merger-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-functests",
    testonly = True,
    srcs = [
        "//tests:go_default_test",
    ],
    outs = ["functests-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-example-guest-agent",
    testonly = True,
    srcs = [
        "//cmd/example-guest-agent",
    ],
    outs = ["example-guest-agent-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

genrule(
    name = "build-dump",
    srcs = [
        "//cmd/dump",
    ],
    outs = ["dump-copier"],
    cmd = "echo '#!/bin/sh\n\ncp -f $(SRCS) $$1' > \"$@\"",
    executable = 1,
)

filegroup(
    name = "coverage_files",
    srcs = glob(["bazel-out/k8-fastbuild/testlogs/**/coverage.dat"]),
)

genrule(
    name = "goveralls",
    srcs = [
        ":coverage_files",
    ],
    outs = ["bazel-goveralls"],
    cmd = "echo '#!/bin/sh\n\necho $(SRCS) | hack/goveralls.sh'  > \"$@\"",
    executable = 1,
)

go_library(
    name = "go_default_library",
    srcs = ["doc.go"],
    importpath = "kubevirt.io/kubevirt",
    visibility = ["//visibility:public"],
)
