// Automatically generated by MockGen. DO NOT EDIT!
// Source: configurator.go

package dhcp

import (
	gomock "github.com/golang/mock/gomock"

	v1 "kubevirt.io/api/core/v1"
	cache "kubevirt.io/kubevirt/pkg/network/cache"
)

// Mock of Configurator interface
type MockConfigurator struct {
	ctrl     *gomock.Controller
	recorder *_MockConfiguratorRecorder
}

// Recorder for MockConfigurator (not exported)
type _MockConfiguratorRecorder struct {
	mock *MockConfigurator
}

func NewMockConfigurator(ctrl *gomock.Controller) *MockConfigurator {
	mock := &MockConfigurator{ctrl: ctrl}
	mock.recorder = &_MockConfiguratorRecorder{mock}
	return mock
}

func (_m *MockConfigurator) EXPECT() *_MockConfiguratorRecorder {
	return _m.recorder
}

func (_m *MockConfigurator) EnsureDHCPServerStarted(podInterfaceName string, dhcpConfig cache.DHCPConfig, dhcpOptions *v1.DHCPOptions) error {
	ret := _m.ctrl.Call(_m, "EnsureDHCPServerStarted", podInterfaceName, dhcpConfig, dhcpOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConfiguratorRecorder) EnsureDHCPServerStarted(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnsureDHCPServerStarted", arg0, arg1, arg2)
}

func (_m *MockConfigurator) Generate() (*cache.DHCPConfig, error) {
	ret := _m.ctrl.Call(_m, "Generate")
	ret0, _ := ret[0].(*cache.DHCPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConfiguratorRecorder) Generate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Generate")
}

// Mock of ConfigGenerator interface
type MockConfigGenerator struct {
	ctrl     *gomock.Controller
	recorder *_MockConfigGeneratorRecorder
}

// Recorder for MockConfigGenerator (not exported)
type _MockConfigGeneratorRecorder struct {
	mock *MockConfigGenerator
}

func NewMockConfigGenerator(ctrl *gomock.Controller) *MockConfigGenerator {
	mock := &MockConfigGenerator{ctrl: ctrl}
	mock.recorder = &_MockConfigGeneratorRecorder{mock}
	return mock
}

func (_m *MockConfigGenerator) EXPECT() *_MockConfigGeneratorRecorder {
	return _m.recorder
}

func (_m *MockConfigGenerator) Generate() (*cache.DHCPConfig, error) {
	ret := _m.ctrl.Call(_m, "Generate")
	ret0, _ := ret[0].(*cache.DHCPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConfigGeneratorRecorder) Generate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Generate")
}
