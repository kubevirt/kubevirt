// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/handler-launcher-com/notify/v1/notify.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	pkg/handler-launcher-com/notify/v1/notify.proto

It has these top-level messages:
	DomainEventRequest
	K8SEventRequest
	Response
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DomainEventRequest struct {
	DomainJSON []byte `protobuf:"bytes,1,opt,name=domainJSON,proto3" json:"domainJSON,omitempty"`
	StatusJSON []byte `protobuf:"bytes,2,opt,name=statusJSON,proto3" json:"statusJSON,omitempty"`
	EventType  string `protobuf:"bytes,3,opt,name=eventType" json:"eventType,omitempty"`
}

func (m *DomainEventRequest) Reset()                    { *m = DomainEventRequest{} }
func (m *DomainEventRequest) String() string            { return proto.CompactTextString(m) }
func (*DomainEventRequest) ProtoMessage()               {}
func (*DomainEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DomainEventRequest) GetDomainJSON() []byte {
	if m != nil {
		return m.DomainJSON
	}
	return nil
}

func (m *DomainEventRequest) GetStatusJSON() []byte {
	if m != nil {
		return m.StatusJSON
	}
	return nil
}

func (m *DomainEventRequest) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

type K8SEventRequest struct {
	EventJSON []byte `protobuf:"bytes,1,opt,name=eventJSON,proto3" json:"eventJSON,omitempty"`
}

func (m *K8SEventRequest) Reset()                    { *m = K8SEventRequest{} }
func (m *K8SEventRequest) String() string            { return proto.CompactTextString(m) }
func (*K8SEventRequest) ProtoMessage()               {}
func (*K8SEventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *K8SEventRequest) GetEventJSON() []byte {
	if m != nil {
		return m.EventJSON
	}
	return nil
}

type Response struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*DomainEventRequest)(nil), "kubevirt.notify.v1.DomainEventRequest")
	proto.RegisterType((*K8SEventRequest)(nil), "kubevirt.notify.v1.K8sEventRequest")
	proto.RegisterType((*Response)(nil), "kubevirt.notify.v1.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Notify service

type NotifyClient interface {
	HandleDomainEvent(ctx context.Context, in *DomainEventRequest, opts ...grpc.CallOption) (*Response, error)
	HandleK8SEvent(ctx context.Context, in *K8SEventRequest, opts ...grpc.CallOption) (*Response, error)
}

type notifyClient struct {
	cc *grpc.ClientConn
}

func NewNotifyClient(cc *grpc.ClientConn) NotifyClient {
	return &notifyClient{cc}
}

func (c *notifyClient) HandleDomainEvent(ctx context.Context, in *DomainEventRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.notify.v1.Notify/HandleDomainEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) HandleK8SEvent(ctx context.Context, in *K8SEventRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/kubevirt.notify.v1.Notify/HandleK8sEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notify service

type NotifyServer interface {
	HandleDomainEvent(context.Context, *DomainEventRequest) (*Response, error)
	HandleK8SEvent(context.Context, *K8SEventRequest) (*Response, error)
}

func RegisterNotifyServer(s *grpc.Server, srv NotifyServer) {
	s.RegisterService(&_Notify_serviceDesc, srv)
}

func _Notify_HandleDomainEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).HandleDomainEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.notify.v1.Notify/HandleDomainEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).HandleDomainEvent(ctx, req.(*DomainEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_HandleK8SEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).HandleK8SEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.notify.v1.Notify/HandleK8SEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).HandleK8SEvent(ctx, req.(*K8SEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notify_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubevirt.notify.v1.Notify",
	HandlerType: (*NotifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleDomainEvent",
			Handler:    _Notify_HandleDomainEvent_Handler,
		},
		{
			MethodName: "HandleK8sEvent",
			Handler:    _Notify_HandleK8SEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/handler-launcher-com/notify/v1/notify.proto",
}

func init() { proto.RegisterFile("pkg/handler-launcher-com/notify/v1/notify.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xdf, 0xf4, 0x95, 0xda, 0x0c, 0xa2, 0x38, 0xa7, 0x20, 0x45, 0x4a, 0x04, 0xe9, 0xa5,
	0x09, 0xd1, 0x8b, 0x27, 0x0f, 0xa2, 0x20, 0x0a, 0x15, 0x56, 0xbd, 0xe8, 0x29, 0x4d, 0xc7, 0x36,
	0xb4, 0xd9, 0x8d, 0x99, 0x4d, 0xa0, 0xdf, 0xcd, 0x0f, 0x27, 0xd9, 0x76, 0x49, 0xb4, 0x05, 0x6f,
	0x3b, 0xbf, 0x67, 0xfe, 0x3d, 0xb3, 0x10, 0xe6, 0x8b, 0x59, 0x38, 0x8f, 0xe5, 0x74, 0x49, 0xc5,
	0x68, 0x19, 0x97, 0x32, 0x99, 0x53, 0x31, 0x4a, 0x54, 0x16, 0x4a, 0xa5, 0xd3, 0x8f, 0x55, 0x58,
	0x45, 0x9b, 0x57, 0x90, 0x17, 0x4a, 0x2b, 0xc4, 0x45, 0x39, 0xa1, 0x2a, 0x2d, 0x74, 0xb0, 0xc1,
	0x55, 0xe4, 0x17, 0x80, 0xb7, 0x2a, 0x8b, 0x53, 0x79, 0x57, 0x91, 0xd4, 0x82, 0x3e, 0x4b, 0x62,
	0x8d, 0xa7, 0x00, 0x53, 0x43, 0x1f, 0x9e, 0x9f, 0xc6, 0x9e, 0x33, 0x70, 0x86, 0x07, 0xa2, 0x45,
	0x6a, 0x9d, 0x75, 0xac, 0x4b, 0x36, 0x7a, 0x67, 0xad, 0x37, 0x04, 0xfb, 0xe0, 0x52, 0xdd, 0xef,
	0x65, 0x95, 0x93, 0xf7, 0x7f, 0xe0, 0x0c, 0x5d, 0xd1, 0x00, 0x3f, 0x84, 0xa3, 0xc7, 0x2b, 0xfe,
	0x31, 0xd0, 0x16, 0xb4, 0xe6, 0x35, 0xc0, 0xbf, 0x86, 0x9e, 0x20, 0xce, 0x95, 0x64, 0x42, 0x0f,
	0xf6, 0xb9, 0x4c, 0x12, 0x62, 0x36, 0x79, 0x3d, 0x61, 0xc3, 0x5a, 0xc9, 0x88, 0x39, 0x9e, 0x91,
	0xd9, 0xc8, 0x15, 0x36, 0xbc, 0xf8, 0x72, 0xa0, 0x3b, 0x36, 0x96, 0xf1, 0x1d, 0x8e, 0xef, 0xcd,
	0xc9, 0x5a, 0xae, 0xf1, 0x3c, 0xd8, 0xbe, 0x4c, 0xb0, 0x7d, 0x96, 0x93, 0xfe, 0xae, 0x3c, 0xbb,
	0x99, 0xff, 0x0f, 0x5f, 0xe1, 0x70, 0xdd, 0xdc, 0xda, 0xc3, 0xb3, 0x5d, 0x15, 0xbf, 0xcc, 0xff,
	0xd5, 0xf6, 0x66, 0xef, 0xad, 0x53, 0x45, 0x93, 0xae, 0xf9, 0xc4, 0xcb, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xab, 0x48, 0xce, 0x53, 0xf7, 0x01, 0x00, 0x00,
}
