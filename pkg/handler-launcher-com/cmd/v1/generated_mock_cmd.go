// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/handler-launcher-com/cmd/v1/cmd.pb.go
//
// Generated by this command:
//
//	mockgen -source pkg/handler-launcher-com/cmd/v1/cmd.pb.go -package=v1 -destination=pkg/handler-launcher-com/cmd/v1/generated_mock_cmd.go
//

// Package v1 is a generated GoMock package.
package v1

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// MockCmdClient is a mock of CmdClient interface.
type MockCmdClient struct {
	ctrl     *gomock.Controller
	recorder *MockCmdClientMockRecorder
	isgomock struct{}
}

// MockCmdClientMockRecorder is the mock recorder for MockCmdClient.
type MockCmdClientMockRecorder struct {
	mock *MockCmdClient
}

// NewMockCmdClient creates a new mock instance.
func NewMockCmdClient(ctrl *gomock.Controller) *MockCmdClient {
	mock := &MockCmdClient{ctrl: ctrl}
	mock.recorder = &MockCmdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdClient) EXPECT() *MockCmdClientMockRecorder {
	return m.recorder
}

// CancelVirtualMachineMigration mocks base method.
func (m *MockCmdClient) CancelVirtualMachineMigration(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelVirtualMachineMigration", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelVirtualMachineMigration indicates an expected call of CancelVirtualMachineMigration.
func (mr *MockCmdClientMockRecorder) CancelVirtualMachineMigration(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelVirtualMachineMigration", reflect.TypeOf((*MockCmdClient)(nil).CancelVirtualMachineMigration), varargs...)
}

// DeleteVirtualMachine mocks base method.
func (m *MockCmdClient) DeleteVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine.
func (mr *MockCmdClientMockRecorder) DeleteVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).DeleteVirtualMachine), varargs...)
}

// Exec mocks base method.
func (m *MockCmdClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(*ExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockCmdClientMockRecorder) Exec(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockCmdClient)(nil).Exec), varargs...)
}

// FinalizeVirtualMachineMigration mocks base method.
func (m *MockCmdClient) FinalizeVirtualMachineMigration(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FinalizeVirtualMachineMigration", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeVirtualMachineMigration indicates an expected call of FinalizeVirtualMachineMigration.
func (mr *MockCmdClientMockRecorder) FinalizeVirtualMachineMigration(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualMachineMigration", reflect.TypeOf((*MockCmdClient)(nil).FinalizeVirtualMachineMigration), varargs...)
}

// FreezeVirtualMachine mocks base method.
func (m *MockCmdClient) FreezeVirtualMachine(ctx context.Context, in *FreezeRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FreezeVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FreezeVirtualMachine indicates an expected call of FreezeVirtualMachine.
func (mr *MockCmdClientMockRecorder) FreezeVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).FreezeVirtualMachine), varargs...)
}

// GetDomain mocks base method.
func (m *MockCmdClient) GetDomain(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomain", varargs...)
	ret0, _ := ret[0].(*DomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockCmdClientMockRecorder) GetDomain(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockCmdClient)(nil).GetDomain), varargs...)
}

// GetDomainDirtyRateStats mocks base method.
func (m *MockCmdClient) GetDomainDirtyRateStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DirtyRateStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainDirtyRateStats", varargs...)
	ret0, _ := ret[0].(*DirtyRateStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainDirtyRateStats indicates an expected call of GetDomainDirtyRateStats.
func (mr *MockCmdClientMockRecorder) GetDomainDirtyRateStats(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDirtyRateStats", reflect.TypeOf((*MockCmdClient)(nil).GetDomainDirtyRateStats), varargs...)
}

// GetDomainStats mocks base method.
func (m *MockCmdClient) GetDomainStats(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*DomainStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDomainStats", varargs...)
	ret0, _ := ret[0].(*DomainStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainStats indicates an expected call of GetDomainStats.
func (mr *MockCmdClientMockRecorder) GetDomainStats(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStats", reflect.TypeOf((*MockCmdClient)(nil).GetDomainStats), varargs...)
}

// GetFilesystems mocks base method.
func (m *MockCmdClient) GetFilesystems(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestFilesystemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFilesystems", varargs...)
	ret0, _ := ret[0].(*GuestFilesystemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystems indicates an expected call of GetFilesystems.
func (mr *MockCmdClientMockRecorder) GetFilesystems(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystems", reflect.TypeOf((*MockCmdClient)(nil).GetFilesystems), varargs...)
}

// GetGuestInfo mocks base method.
func (m *MockCmdClient) GetGuestInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGuestInfo", varargs...)
	ret0, _ := ret[0].(*GuestInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestInfo indicates an expected call of GetGuestInfo.
func (mr *MockCmdClientMockRecorder) GetGuestInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestInfo", reflect.TypeOf((*MockCmdClient)(nil).GetGuestInfo), varargs...)
}

// GetLaunchMeasurement mocks base method.
func (m *MockCmdClient) GetLaunchMeasurement(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*LaunchMeasurementResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLaunchMeasurement", varargs...)
	ret0, _ := ret[0].(*LaunchMeasurementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchMeasurement indicates an expected call of GetLaunchMeasurement.
func (mr *MockCmdClientMockRecorder) GetLaunchMeasurement(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchMeasurement", reflect.TypeOf((*MockCmdClient)(nil).GetLaunchMeasurement), varargs...)
}

// GetQemuVersion mocks base method.
func (m *MockCmdClient) GetQemuVersion(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*QemuVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQemuVersion", varargs...)
	ret0, _ := ret[0].(*QemuVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQemuVersion indicates an expected call of GetQemuVersion.
func (mr *MockCmdClientMockRecorder) GetQemuVersion(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQemuVersion", reflect.TypeOf((*MockCmdClient)(nil).GetQemuVersion), varargs...)
}

// GetSEVInfo mocks base method.
func (m *MockCmdClient) GetSEVInfo(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SEVInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSEVInfo", varargs...)
	ret0, _ := ret[0].(*SEVInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSEVInfo indicates an expected call of GetSEVInfo.
func (mr *MockCmdClientMockRecorder) GetSEVInfo(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSEVInfo", reflect.TypeOf((*MockCmdClient)(nil).GetSEVInfo), varargs...)
}

// GetScreenshot mocks base method.
func (m *MockCmdClient) GetScreenshot(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*ScreenshotResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScreenshot", varargs...)
	ret0, _ := ret[0].(*ScreenshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScreenshot indicates an expected call of GetScreenshot.
func (mr *MockCmdClientMockRecorder) GetScreenshot(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScreenshot", reflect.TypeOf((*MockCmdClient)(nil).GetScreenshot), varargs...)
}

// GetUsers mocks base method.
func (m *MockCmdClient) GetUsers(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GuestUserListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*GuestUserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockCmdClientMockRecorder) GetUsers(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockCmdClient)(nil).GetUsers), varargs...)
}

// GuestPing mocks base method.
func (m *MockCmdClient) GuestPing(ctx context.Context, in *GuestPingRequest, opts ...grpc.CallOption) (*GuestPingResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GuestPing", varargs...)
	ret0, _ := ret[0].(*GuestPingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuestPing indicates an expected call of GuestPing.
func (mr *MockCmdClientMockRecorder) GuestPing(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuestPing", reflect.TypeOf((*MockCmdClient)(nil).GuestPing), varargs...)
}

// HotplugHostDevices mocks base method.
func (m *MockCmdClient) HotplugHostDevices(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HotplugHostDevices", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HotplugHostDevices indicates an expected call of HotplugHostDevices.
func (mr *MockCmdClientMockRecorder) HotplugHostDevices(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotplugHostDevices", reflect.TypeOf((*MockCmdClient)(nil).HotplugHostDevices), varargs...)
}

// InjectLaunchSecret mocks base method.
func (m *MockCmdClient) InjectLaunchSecret(ctx context.Context, in *InjectLaunchSecretRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InjectLaunchSecret", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InjectLaunchSecret indicates an expected call of InjectLaunchSecret.
func (mr *MockCmdClientMockRecorder) InjectLaunchSecret(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectLaunchSecret", reflect.TypeOf((*MockCmdClient)(nil).InjectLaunchSecret), varargs...)
}

// KillVirtualMachine mocks base method.
func (m *MockCmdClient) KillVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "KillVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillVirtualMachine indicates an expected call of KillVirtualMachine.
func (mr *MockCmdClientMockRecorder) KillVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).KillVirtualMachine), varargs...)
}

// MigrateVirtualMachine mocks base method.
func (m *MockCmdClient) MigrateVirtualMachine(ctx context.Context, in *MigrationRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MigrateVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateVirtualMachine indicates an expected call of MigrateVirtualMachine.
func (mr *MockCmdClientMockRecorder) MigrateVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).MigrateVirtualMachine), varargs...)
}

// PauseVirtualMachine mocks base method.
func (m *MockCmdClient) PauseVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PauseVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseVirtualMachine indicates an expected call of PauseVirtualMachine.
func (mr *MockCmdClientMockRecorder) PauseVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).PauseVirtualMachine), varargs...)
}

// Ping mocks base method.
func (m *MockCmdClient) Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockCmdClientMockRecorder) Ping(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCmdClient)(nil).Ping), varargs...)
}

// ResetVirtualMachine mocks base method.
func (m *MockCmdClient) ResetVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetVirtualMachine indicates an expected call of ResetVirtualMachine.
func (mr *MockCmdClientMockRecorder) ResetVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).ResetVirtualMachine), varargs...)
}

// ShutdownVirtualMachine mocks base method.
func (m *MockCmdClient) ShutdownVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ShutdownVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShutdownVirtualMachine indicates an expected call of ShutdownVirtualMachine.
func (mr *MockCmdClientMockRecorder) ShutdownVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).ShutdownVirtualMachine), varargs...)
}

// SignalTargetPodCleanup mocks base method.
func (m *MockCmdClient) SignalTargetPodCleanup(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignalTargetPodCleanup", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignalTargetPodCleanup indicates an expected call of SignalTargetPodCleanup.
func (mr *MockCmdClientMockRecorder) SignalTargetPodCleanup(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalTargetPodCleanup", reflect.TypeOf((*MockCmdClient)(nil).SignalTargetPodCleanup), varargs...)
}

// SoftRebootVirtualMachine mocks base method.
func (m *MockCmdClient) SoftRebootVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SoftRebootVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftRebootVirtualMachine indicates an expected call of SoftRebootVirtualMachine.
func (mr *MockCmdClientMockRecorder) SoftRebootVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftRebootVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).SoftRebootVirtualMachine), varargs...)
}

// SyncMigrationTarget mocks base method.
func (m *MockCmdClient) SyncMigrationTarget(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncMigrationTarget", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncMigrationTarget indicates an expected call of SyncMigrationTarget.
func (mr *MockCmdClientMockRecorder) SyncMigrationTarget(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncMigrationTarget", reflect.TypeOf((*MockCmdClient)(nil).SyncMigrationTarget), varargs...)
}

// SyncVirtualMachine mocks base method.
func (m *MockCmdClient) SyncVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncVirtualMachine indicates an expected call of SyncVirtualMachine.
func (mr *MockCmdClientMockRecorder) SyncVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).SyncVirtualMachine), varargs...)
}

// SyncVirtualMachineCPUs mocks base method.
func (m *MockCmdClient) SyncVirtualMachineCPUs(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncVirtualMachineCPUs", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncVirtualMachineCPUs indicates an expected call of SyncVirtualMachineCPUs.
func (mr *MockCmdClientMockRecorder) SyncVirtualMachineCPUs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncVirtualMachineCPUs", reflect.TypeOf((*MockCmdClient)(nil).SyncVirtualMachineCPUs), varargs...)
}

// SyncVirtualMachineMemory mocks base method.
func (m *MockCmdClient) SyncVirtualMachineMemory(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncVirtualMachineMemory", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncVirtualMachineMemory indicates an expected call of SyncVirtualMachineMemory.
func (mr *MockCmdClientMockRecorder) SyncVirtualMachineMemory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncVirtualMachineMemory", reflect.TypeOf((*MockCmdClient)(nil).SyncVirtualMachineMemory), varargs...)
}

// UnfreezeVirtualMachine mocks base method.
func (m *MockCmdClient) UnfreezeVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnfreezeVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnfreezeVirtualMachine indicates an expected call of UnfreezeVirtualMachine.
func (mr *MockCmdClientMockRecorder) UnfreezeVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfreezeVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).UnfreezeVirtualMachine), varargs...)
}

// UnpauseVirtualMachine mocks base method.
func (m *MockCmdClient) UnpauseVirtualMachine(ctx context.Context, in *VMIRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnpauseVirtualMachine", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpauseVirtualMachine indicates an expected call of UnpauseVirtualMachine.
func (mr *MockCmdClientMockRecorder) UnpauseVirtualMachine(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpauseVirtualMachine", reflect.TypeOf((*MockCmdClient)(nil).UnpauseVirtualMachine), varargs...)
}

// VirtualMachineMemoryDump mocks base method.
func (m *MockCmdClient) VirtualMachineMemoryDump(ctx context.Context, in *MemoryDumpRequest, opts ...grpc.CallOption) (*Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VirtualMachineMemoryDump", varargs...)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualMachineMemoryDump indicates an expected call of VirtualMachineMemoryDump.
func (mr *MockCmdClientMockRecorder) VirtualMachineMemoryDump(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineMemoryDump", reflect.TypeOf((*MockCmdClient)(nil).VirtualMachineMemoryDump), varargs...)
}

// MockCmdServer is a mock of CmdServer interface.
type MockCmdServer struct {
	ctrl     *gomock.Controller
	recorder *MockCmdServerMockRecorder
	isgomock struct{}
}

// MockCmdServerMockRecorder is the mock recorder for MockCmdServer.
type MockCmdServerMockRecorder struct {
	mock *MockCmdServer
}

// NewMockCmdServer creates a new mock instance.
func NewMockCmdServer(ctrl *gomock.Controller) *MockCmdServer {
	mock := &MockCmdServer{ctrl: ctrl}
	mock.recorder = &MockCmdServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmdServer) EXPECT() *MockCmdServerMockRecorder {
	return m.recorder
}

// CancelVirtualMachineMigration mocks base method.
func (m *MockCmdServer) CancelVirtualMachineMigration(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelVirtualMachineMigration", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelVirtualMachineMigration indicates an expected call of CancelVirtualMachineMigration.
func (mr *MockCmdServerMockRecorder) CancelVirtualMachineMigration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelVirtualMachineMigration", reflect.TypeOf((*MockCmdServer)(nil).CancelVirtualMachineMigration), arg0, arg1)
}

// DeleteVirtualMachine mocks base method.
func (m *MockCmdServer) DeleteVirtualMachine(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualMachine indicates an expected call of DeleteVirtualMachine.
func (mr *MockCmdServerMockRecorder) DeleteVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).DeleteVirtualMachine), arg0, arg1)
}

// Exec mocks base method.
func (m *MockCmdServer) Exec(arg0 context.Context, arg1 *ExecRequest) (*ExecResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1)
	ret0, _ := ret[0].(*ExecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockCmdServerMockRecorder) Exec(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockCmdServer)(nil).Exec), arg0, arg1)
}

// FinalizeVirtualMachineMigration mocks base method.
func (m *MockCmdServer) FinalizeVirtualMachineMigration(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualMachineMigration", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeVirtualMachineMigration indicates an expected call of FinalizeVirtualMachineMigration.
func (mr *MockCmdServerMockRecorder) FinalizeVirtualMachineMigration(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualMachineMigration", reflect.TypeOf((*MockCmdServer)(nil).FinalizeVirtualMachineMigration), arg0, arg1)
}

// FreezeVirtualMachine mocks base method.
func (m *MockCmdServer) FreezeVirtualMachine(arg0 context.Context, arg1 *FreezeRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FreezeVirtualMachine indicates an expected call of FreezeVirtualMachine.
func (mr *MockCmdServerMockRecorder) FreezeVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).FreezeVirtualMachine), arg0, arg1)
}

// GetDomain mocks base method.
func (m *MockCmdServer) GetDomain(arg0 context.Context, arg1 *EmptyRequest) (*DomainResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0, arg1)
	ret0, _ := ret[0].(*DomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockCmdServerMockRecorder) GetDomain(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockCmdServer)(nil).GetDomain), arg0, arg1)
}

// GetDomainDirtyRateStats mocks base method.
func (m *MockCmdServer) GetDomainDirtyRateStats(arg0 context.Context, arg1 *EmptyRequest) (*DirtyRateStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainDirtyRateStats", arg0, arg1)
	ret0, _ := ret[0].(*DirtyRateStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainDirtyRateStats indicates an expected call of GetDomainDirtyRateStats.
func (mr *MockCmdServerMockRecorder) GetDomainDirtyRateStats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDirtyRateStats", reflect.TypeOf((*MockCmdServer)(nil).GetDomainDirtyRateStats), arg0, arg1)
}

// GetDomainStats mocks base method.
func (m *MockCmdServer) GetDomainStats(arg0 context.Context, arg1 *EmptyRequest) (*DomainStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainStats", arg0, arg1)
	ret0, _ := ret[0].(*DomainStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainStats indicates an expected call of GetDomainStats.
func (mr *MockCmdServerMockRecorder) GetDomainStats(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStats", reflect.TypeOf((*MockCmdServer)(nil).GetDomainStats), arg0, arg1)
}

// GetFilesystems mocks base method.
func (m *MockCmdServer) GetFilesystems(arg0 context.Context, arg1 *EmptyRequest) (*GuestFilesystemsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystems", arg0, arg1)
	ret0, _ := ret[0].(*GuestFilesystemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystems indicates an expected call of GetFilesystems.
func (mr *MockCmdServerMockRecorder) GetFilesystems(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystems", reflect.TypeOf((*MockCmdServer)(nil).GetFilesystems), arg0, arg1)
}

// GetGuestInfo mocks base method.
func (m *MockCmdServer) GetGuestInfo(arg0 context.Context, arg1 *EmptyRequest) (*GuestInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestInfo", arg0, arg1)
	ret0, _ := ret[0].(*GuestInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestInfo indicates an expected call of GetGuestInfo.
func (mr *MockCmdServerMockRecorder) GetGuestInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestInfo", reflect.TypeOf((*MockCmdServer)(nil).GetGuestInfo), arg0, arg1)
}

// GetLaunchMeasurement mocks base method.
func (m *MockCmdServer) GetLaunchMeasurement(arg0 context.Context, arg1 *VMIRequest) (*LaunchMeasurementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchMeasurement", arg0, arg1)
	ret0, _ := ret[0].(*LaunchMeasurementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchMeasurement indicates an expected call of GetLaunchMeasurement.
func (mr *MockCmdServerMockRecorder) GetLaunchMeasurement(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchMeasurement", reflect.TypeOf((*MockCmdServer)(nil).GetLaunchMeasurement), arg0, arg1)
}

// GetQemuVersion mocks base method.
func (m *MockCmdServer) GetQemuVersion(arg0 context.Context, arg1 *EmptyRequest) (*QemuVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQemuVersion", arg0, arg1)
	ret0, _ := ret[0].(*QemuVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQemuVersion indicates an expected call of GetQemuVersion.
func (mr *MockCmdServerMockRecorder) GetQemuVersion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQemuVersion", reflect.TypeOf((*MockCmdServer)(nil).GetQemuVersion), arg0, arg1)
}

// GetSEVInfo mocks base method.
func (m *MockCmdServer) GetSEVInfo(arg0 context.Context, arg1 *EmptyRequest) (*SEVInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSEVInfo", arg0, arg1)
	ret0, _ := ret[0].(*SEVInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSEVInfo indicates an expected call of GetSEVInfo.
func (mr *MockCmdServerMockRecorder) GetSEVInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSEVInfo", reflect.TypeOf((*MockCmdServer)(nil).GetSEVInfo), arg0, arg1)
}

// GetScreenshot mocks base method.
func (m *MockCmdServer) GetScreenshot(arg0 context.Context, arg1 *VMIRequest) (*ScreenshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScreenshot", arg0, arg1)
	ret0, _ := ret[0].(*ScreenshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScreenshot indicates an expected call of GetScreenshot.
func (mr *MockCmdServerMockRecorder) GetScreenshot(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScreenshot", reflect.TypeOf((*MockCmdServer)(nil).GetScreenshot), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockCmdServer) GetUsers(arg0 context.Context, arg1 *EmptyRequest) (*GuestUserListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*GuestUserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockCmdServerMockRecorder) GetUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockCmdServer)(nil).GetUsers), arg0, arg1)
}

// GuestPing mocks base method.
func (m *MockCmdServer) GuestPing(arg0 context.Context, arg1 *GuestPingRequest) (*GuestPingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuestPing", arg0, arg1)
	ret0, _ := ret[0].(*GuestPingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuestPing indicates an expected call of GuestPing.
func (mr *MockCmdServerMockRecorder) GuestPing(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuestPing", reflect.TypeOf((*MockCmdServer)(nil).GuestPing), arg0, arg1)
}

// HotplugHostDevices mocks base method.
func (m *MockCmdServer) HotplugHostDevices(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HotplugHostDevices", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HotplugHostDevices indicates an expected call of HotplugHostDevices.
func (mr *MockCmdServerMockRecorder) HotplugHostDevices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotplugHostDevices", reflect.TypeOf((*MockCmdServer)(nil).HotplugHostDevices), arg0, arg1)
}

// InjectLaunchSecret mocks base method.
func (m *MockCmdServer) InjectLaunchSecret(arg0 context.Context, arg1 *InjectLaunchSecretRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectLaunchSecret", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InjectLaunchSecret indicates an expected call of InjectLaunchSecret.
func (mr *MockCmdServerMockRecorder) InjectLaunchSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectLaunchSecret", reflect.TypeOf((*MockCmdServer)(nil).InjectLaunchSecret), arg0, arg1)
}

// KillVirtualMachine mocks base method.
func (m *MockCmdServer) KillVirtualMachine(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillVirtualMachine indicates an expected call of KillVirtualMachine.
func (mr *MockCmdServerMockRecorder) KillVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).KillVirtualMachine), arg0, arg1)
}

// MigrateVirtualMachine mocks base method.
func (m *MockCmdServer) MigrateVirtualMachine(arg0 context.Context, arg1 *MigrationRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateVirtualMachine indicates an expected call of MigrateVirtualMachine.
func (mr *MockCmdServerMockRecorder) MigrateVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).MigrateVirtualMachine), arg0, arg1)
}

// PauseVirtualMachine mocks base method.
func (m *MockCmdServer) PauseVirtualMachine(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PauseVirtualMachine indicates an expected call of PauseVirtualMachine.
func (mr *MockCmdServerMockRecorder) PauseVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).PauseVirtualMachine), arg0, arg1)
}

// Ping mocks base method.
func (m *MockCmdServer) Ping(arg0 context.Context, arg1 *EmptyRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockCmdServerMockRecorder) Ping(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCmdServer)(nil).Ping), arg0, arg1)
}

// ResetVirtualMachine mocks base method.
func (m *MockCmdServer) ResetVirtualMachine(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetVirtualMachine indicates an expected call of ResetVirtualMachine.
func (mr *MockCmdServerMockRecorder) ResetVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).ResetVirtualMachine), arg0, arg1)
}

// ShutdownVirtualMachine mocks base method.
func (m *MockCmdServer) ShutdownVirtualMachine(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShutdownVirtualMachine indicates an expected call of ShutdownVirtualMachine.
func (mr *MockCmdServerMockRecorder) ShutdownVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).ShutdownVirtualMachine), arg0, arg1)
}

// SignalTargetPodCleanup mocks base method.
func (m *MockCmdServer) SignalTargetPodCleanup(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalTargetPodCleanup", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignalTargetPodCleanup indicates an expected call of SignalTargetPodCleanup.
func (mr *MockCmdServerMockRecorder) SignalTargetPodCleanup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalTargetPodCleanup", reflect.TypeOf((*MockCmdServer)(nil).SignalTargetPodCleanup), arg0, arg1)
}

// SoftRebootVirtualMachine mocks base method.
func (m *MockCmdServer) SoftRebootVirtualMachine(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftRebootVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoftRebootVirtualMachine indicates an expected call of SoftRebootVirtualMachine.
func (mr *MockCmdServerMockRecorder) SoftRebootVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftRebootVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).SoftRebootVirtualMachine), arg0, arg1)
}

// SyncMigrationTarget mocks base method.
func (m *MockCmdServer) SyncMigrationTarget(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncMigrationTarget", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncMigrationTarget indicates an expected call of SyncMigrationTarget.
func (mr *MockCmdServerMockRecorder) SyncMigrationTarget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncMigrationTarget", reflect.TypeOf((*MockCmdServer)(nil).SyncMigrationTarget), arg0, arg1)
}

// SyncVirtualMachine mocks base method.
func (m *MockCmdServer) SyncVirtualMachine(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncVirtualMachine indicates an expected call of SyncVirtualMachine.
func (mr *MockCmdServerMockRecorder) SyncVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).SyncVirtualMachine), arg0, arg1)
}

// SyncVirtualMachineCPUs mocks base method.
func (m *MockCmdServer) SyncVirtualMachineCPUs(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncVirtualMachineCPUs", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncVirtualMachineCPUs indicates an expected call of SyncVirtualMachineCPUs.
func (mr *MockCmdServerMockRecorder) SyncVirtualMachineCPUs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncVirtualMachineCPUs", reflect.TypeOf((*MockCmdServer)(nil).SyncVirtualMachineCPUs), arg0, arg1)
}

// SyncVirtualMachineMemory mocks base method.
func (m *MockCmdServer) SyncVirtualMachineMemory(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncVirtualMachineMemory", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncVirtualMachineMemory indicates an expected call of SyncVirtualMachineMemory.
func (mr *MockCmdServerMockRecorder) SyncVirtualMachineMemory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncVirtualMachineMemory", reflect.TypeOf((*MockCmdServer)(nil).SyncVirtualMachineMemory), arg0, arg1)
}

// UnfreezeVirtualMachine mocks base method.
func (m *MockCmdServer) UnfreezeVirtualMachine(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfreezeVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnfreezeVirtualMachine indicates an expected call of UnfreezeVirtualMachine.
func (mr *MockCmdServerMockRecorder) UnfreezeVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfreezeVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).UnfreezeVirtualMachine), arg0, arg1)
}

// UnpauseVirtualMachine mocks base method.
func (m *MockCmdServer) UnpauseVirtualMachine(arg0 context.Context, arg1 *VMIRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpauseVirtualMachine", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpauseVirtualMachine indicates an expected call of UnpauseVirtualMachine.
func (mr *MockCmdServerMockRecorder) UnpauseVirtualMachine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpauseVirtualMachine", reflect.TypeOf((*MockCmdServer)(nil).UnpauseVirtualMachine), arg0, arg1)
}

// VirtualMachineMemoryDump mocks base method.
func (m *MockCmdServer) VirtualMachineMemoryDump(arg0 context.Context, arg1 *MemoryDumpRequest) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineMemoryDump", arg0, arg1)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VirtualMachineMemoryDump indicates an expected call of VirtualMachineMemoryDump.
func (mr *MockCmdServerMockRecorder) VirtualMachineMemoryDump(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineMemoryDump", reflect.TypeOf((*MockCmdServer)(nil).VirtualMachineMemoryDump), arg0, arg1)
}
