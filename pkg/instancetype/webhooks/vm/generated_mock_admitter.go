// Code generated by MockGen. DO NOT EDIT.
// Source: kubevirt.io/kubevirt/pkg/virt-api/webhooks/validating-webhook/admitters (interfaces: instancetypeVMsAdmitter)
//
// Generated by this command:
//
//	mockgen -package=vm -destination=generated_mock_admitter.go kubevirt.io/kubevirt/pkg/virt-api/webhooks/validating-webhook/admitters instancetypeVMsAdmitter
//

// Package vm is a generated GoMock package.
package vm

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	v10 "kubevirt.io/api/core/v1"
	v1beta1 "kubevirt.io/api/instancetype/v1beta1"

	conflict "kubevirt.io/kubevirt/pkg/instancetype/conflict"
)

// MockinstancetypeVMsAdmitter is a mock of instancetypeVMsAdmitter interface.
type MockinstancetypeVMsAdmitter struct {
	ctrl     *gomock.Controller
	recorder *MockinstancetypeVMsAdmitterMockRecorder
	isgomock struct{}
}

// MockinstancetypeVMsAdmitterMockRecorder is the mock recorder for MockinstancetypeVMsAdmitter.
type MockinstancetypeVMsAdmitterMockRecorder struct {
	mock *MockinstancetypeVMsAdmitter
}

// NewMockinstancetypeVMsAdmitter creates a new mock instance.
func NewMockinstancetypeVMsAdmitter(ctrl *gomock.Controller) *MockinstancetypeVMsAdmitter {
	mock := &MockinstancetypeVMsAdmitter{ctrl: ctrl}
	mock.recorder = &MockinstancetypeVMsAdmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinstancetypeVMsAdmitter) EXPECT() *MockinstancetypeVMsAdmitterMockRecorder {
	return m.recorder
}

// ApplyToVM mocks base method.
func (m *MockinstancetypeVMsAdmitter) ApplyToVM(vm *v10.VirtualMachine) (*v1beta1.VirtualMachineInstancetypeSpec, *v1beta1.VirtualMachinePreferenceSpec, []v1.StatusCause) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyToVM", vm)
	ret0, _ := ret[0].(*v1beta1.VirtualMachineInstancetypeSpec)
	ret1, _ := ret[1].(*v1beta1.VirtualMachinePreferenceSpec)
	ret2, _ := ret[2].([]v1.StatusCause)
	return ret0, ret1, ret2
}

// ApplyToVM indicates an expected call of ApplyToVM.
func (mr *MockinstancetypeVMsAdmitterMockRecorder) ApplyToVM(vm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyToVM", reflect.TypeOf((*MockinstancetypeVMsAdmitter)(nil).ApplyToVM), vm)
}

// Check mocks base method.
func (m *MockinstancetypeVMsAdmitter) Check(arg0 *v1beta1.VirtualMachineInstancetypeSpec, arg1 *v1beta1.VirtualMachinePreferenceSpec, arg2 *v10.VirtualMachineInstanceSpec) (conflict.Conflicts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1, arg2)
	ret0, _ := ret[0].(conflict.Conflicts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockinstancetypeVMsAdmitterMockRecorder) Check(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockinstancetypeVMsAdmitter)(nil).Check), arg0, arg1, arg2)
}
