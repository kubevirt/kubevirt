// Code generated by MockGen. DO NOT EDIT.
// Source: kubevirt.io/kubevirt/pkg/virt-controller/watch/vm (interfaces: instancetypeHandler)
//
// Generated by this command:
//
//	mockgen -package=vm -mock_names=instancetypeHandler=MockInstancetypeVMController -destination=generated_mock_controller.go kubevirt.io/kubevirt/pkg/virt-controller/watch/vm instancetypeHandler
//

// Package vm is a generated GoMock package.
package vm

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "kubevirt.io/api/core/v1"
)

// MockInstancetypeVMController is a mock of instancetypeHandler interface.
type MockInstancetypeVMController struct {
	ctrl     *gomock.Controller
	recorder *MockInstancetypeVMControllerMockRecorder
	isgomock struct{}
}

// MockInstancetypeVMControllerMockRecorder is the mock recorder for MockInstancetypeVMController.
type MockInstancetypeVMControllerMockRecorder struct {
	mock *MockInstancetypeVMController
}

// NewMockInstancetypeVMController creates a new mock instance.
func NewMockInstancetypeVMController(ctrl *gomock.Controller) *MockInstancetypeVMController {
	mock := &MockInstancetypeVMController{ctrl: ctrl}
	mock.recorder = &MockInstancetypeVMControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancetypeVMController) EXPECT() *MockInstancetypeVMControllerMockRecorder {
	return m.recorder
}

// ApplyAutoAttachPreferences mocks base method.
func (m *MockInstancetypeVMController) ApplyAutoAttachPreferences(vm *v1.VirtualMachine, vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyAutoAttachPreferences", vm, vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyAutoAttachPreferences indicates an expected call of ApplyAutoAttachPreferences.
func (mr *MockInstancetypeVMControllerMockRecorder) ApplyAutoAttachPreferences(vm, vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyAutoAttachPreferences", reflect.TypeOf((*MockInstancetypeVMController)(nil).ApplyAutoAttachPreferences), vm, vmi)
}

// ApplyToVM mocks base method.
func (m *MockInstancetypeVMController) ApplyToVM(arg0 *v1.VirtualMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyToVM", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyToVM indicates an expected call of ApplyToVM.
func (mr *MockInstancetypeVMControllerMockRecorder) ApplyToVM(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyToVM", reflect.TypeOf((*MockInstancetypeVMController)(nil).ApplyToVM), arg0)
}

// ApplyToVMI mocks base method.
func (m *MockInstancetypeVMController) ApplyToVMI(arg0 *v1.VirtualMachine, arg1 *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyToVMI", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyToVMI indicates an expected call of ApplyToVMI.
func (mr *MockInstancetypeVMControllerMockRecorder) ApplyToVMI(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyToVMI", reflect.TypeOf((*MockInstancetypeVMController)(nil).ApplyToVMI), arg0, arg1)
}

// Sync mocks base method.
func (m *MockInstancetypeVMController) Sync(arg0 *v1.VirtualMachine, arg1 *v1.VirtualMachineInstance) (*v1.VirtualMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(*v1.VirtualMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockInstancetypeVMControllerMockRecorder) Sync(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockInstancetypeVMController)(nil).Sync), arg0, arg1)
}
