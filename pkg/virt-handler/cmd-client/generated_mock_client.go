// Automatically generated by MockGen. DO NOT EDIT!
// Source: client.go

package cmdclient

import (
	gomock "github.com/golang/mock/gomock"

	v1 "kubevirt.io/client-go/api/v1"
	v10 "kubevirt.io/kubevirt/pkg/handler-launcher-com/cmd/v1"
	api "kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/api"
	stats "kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/stats"
)

// Mock of LauncherClient interface
type MockLauncherClient struct {
	ctrl     *gomock.Controller
	recorder *_MockLauncherClientRecorder
}

// Recorder for MockLauncherClient (not exported)
type _MockLauncherClientRecorder struct {
	mock *MockLauncherClient
}

func NewMockLauncherClient(ctrl *gomock.Controller) *MockLauncherClient {
	mock := &MockLauncherClient{ctrl: ctrl}
	mock.recorder = &_MockLauncherClientRecorder{mock}
	return mock
}

func (_m *MockLauncherClient) EXPECT() *_MockLauncherClientRecorder {
	return _m.recorder
}

func (_m *MockLauncherClient) SyncVirtualMachine(vmi *v1.VirtualMachineInstance, options *v10.VirtualMachineOptions) error {
	ret := _m.ctrl.Call(_m, "SyncVirtualMachine", vmi, options)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) SyncVirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncVirtualMachine", arg0, arg1)
}

func (_m *MockLauncherClient) PauseVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "PauseVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) PauseVirtualMachine(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PauseVirtualMachine", arg0)
}

func (_m *MockLauncherClient) UnpauseVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "UnpauseVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) UnpauseVirtualMachine(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnpauseVirtualMachine", arg0)
}

func (_m *MockLauncherClient) SyncMigrationTarget(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "SyncMigrationTarget", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) SyncMigrationTarget(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncMigrationTarget", arg0)
}

func (_m *MockLauncherClient) ShutdownVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "ShutdownVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) ShutdownVirtualMachine(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShutdownVirtualMachine", arg0)
}

func (_m *MockLauncherClient) KillVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "KillVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) KillVirtualMachine(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KillVirtualMachine", arg0)
}

func (_m *MockLauncherClient) MigrateVirtualMachine(vmi *v1.VirtualMachineInstance, options *MigrationOptions) error {
	ret := _m.ctrl.Call(_m, "MigrateVirtualMachine", vmi, options)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) MigrateVirtualMachine(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MigrateVirtualMachine", arg0, arg1)
}

func (_m *MockLauncherClient) CancelVirtualMachineMigration(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "CancelVirtualMachineMigration", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) CancelVirtualMachineMigration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelVirtualMachineMigration", arg0)
}

func (_m *MockLauncherClient) SetVirtualMachineGuestTime(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "SetVirtualMachineGuestTime", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) SetVirtualMachineGuestTime(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetVirtualMachineGuestTime", arg0)
}

func (_m *MockLauncherClient) DeleteDomain(vmi *v1.VirtualMachineInstance) error {
	ret := _m.ctrl.Call(_m, "DeleteDomain", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) DeleteDomain(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDomain", arg0)
}

func (_m *MockLauncherClient) GetDomain() (*api.Domain, bool, error) {
	ret := _m.ctrl.Call(_m, "GetDomain")
	ret0, _ := ret[0].(*api.Domain)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockLauncherClientRecorder) GetDomain() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDomain")
}

func (_m *MockLauncherClient) GetDomainStats() (*stats.DomainStats, bool, error) {
	ret := _m.ctrl.Call(_m, "GetDomainStats")
	ret0, _ := ret[0].(*stats.DomainStats)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockLauncherClientRecorder) GetDomainStats() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDomainStats")
}

func (_m *MockLauncherClient) GetGuestInfo() (*v1.VirtualMachineInstanceGuestAgentInfo, error) {
	ret := _m.ctrl.Call(_m, "GetGuestInfo")
	ret0, _ := ret[0].(*v1.VirtualMachineInstanceGuestAgentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLauncherClientRecorder) GetGuestInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGuestInfo")
}

func (_m *MockLauncherClient) GetUsers() (v1.VirtualMachineInstanceGuestOSUserList, error) {
	ret := _m.ctrl.Call(_m, "GetUsers")
	ret0, _ := ret[0].(v1.VirtualMachineInstanceGuestOSUserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLauncherClientRecorder) GetUsers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUsers")
}

func (_m *MockLauncherClient) GetFilesystems() (v1.VirtualMachineInstanceFileSystemList, error) {
	ret := _m.ctrl.Call(_m, "GetFilesystems")
	ret0, _ := ret[0].(v1.VirtualMachineInstanceFileSystemList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLauncherClientRecorder) GetFilesystems() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFilesystems")
}

func (_m *MockLauncherClient) Ping() error {
	ret := _m.ctrl.Call(_m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLauncherClientRecorder) Ping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ping")
}

func (_m *MockLauncherClient) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockLauncherClientRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockLauncherClient) HandleK8sEvents() {
	_m.ctrl.Call(_m, "HandleK8sEvents")
}

func (_mr *_MockLauncherClientRecorder) HandleK8sEvents() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HandleK8sEvents")
}

func (_m *MockLauncherClient) HandleDomainEvents() {
	_m.ctrl.Call(_m, "HandleDomainEvents")
}

func (_mr *_MockLauncherClientRecorder) HandleDomainEvents() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HandleDomainEvents")
}

// Mock of VMIClientFactory interface
type MockVMIClientFactory struct {
	ctrl     *gomock.Controller
	recorder *_MockVMIClientFactoryRecorder
}

// Recorder for MockVMIClientFactory (not exported)
type _MockVMIClientFactoryRecorder struct {
	mock *MockVMIClientFactory
}

func NewMockVMIClientFactory(ctrl *gomock.Controller) *MockVMIClientFactory {
	mock := &MockVMIClientFactory{ctrl: ctrl}
	mock.recorder = &_MockVMIClientFactoryRecorder{mock}
	return mock
}

func (_m *MockVMIClientFactory) EXPECT() *_MockVMIClientFactoryRecorder {
	return _m.recorder
}

func (_m *MockVMIClientFactory) ClientForVMIIfExists(vmi *v1.VirtualMachineInstance) (LauncherClient, string, bool) {
	ret := _m.ctrl.Call(_m, "ClientForVMIIfExists", vmi)
	ret0, _ := ret[0].(LauncherClient)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

func (_mr *_MockVMIClientFactoryRecorder) ClientForVMIIfExists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientForVMIIfExists", arg0)
}

func (_m *MockVMIClientFactory) RemoveClientForVMI(vmi *v1.VirtualMachineInstance) {
	_m.ctrl.Call(_m, "RemoveClientForVMI", vmi)
}

func (_mr *_MockVMIClientFactoryRecorder) RemoveClientForVMI(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveClientForVMI", arg0)
}

func (_m *MockVMIClientFactory) ClientForVMI(vmi *v1.VirtualMachineInstance) (LauncherClient, string, error) {
	ret := _m.ctrl.Call(_m, "ClientForVMI", vmi)
	ret0, _ := ret[0].(LauncherClient)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockVMIClientFactoryRecorder) ClientForVMI(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientForVMI", arg0)
}

// Mock of ReadOnlyVMIClientFactory interface
type MockReadOnlyVMIClientFactory struct {
	ctrl     *gomock.Controller
	recorder *_MockReadOnlyVMIClientFactoryRecorder
}

// Recorder for MockReadOnlyVMIClientFactory (not exported)
type _MockReadOnlyVMIClientFactoryRecorder struct {
	mock *MockReadOnlyVMIClientFactory
}

func NewMockReadOnlyVMIClientFactory(ctrl *gomock.Controller) *MockReadOnlyVMIClientFactory {
	mock := &MockReadOnlyVMIClientFactory{ctrl: ctrl}
	mock.recorder = &_MockReadOnlyVMIClientFactoryRecorder{mock}
	return mock
}

func (_m *MockReadOnlyVMIClientFactory) EXPECT() *_MockReadOnlyVMIClientFactoryRecorder {
	return _m.recorder
}

func (_m *MockReadOnlyVMIClientFactory) ClientForVMIIfExists(vmi *v1.VirtualMachineInstance) (LauncherClient, string, bool) {
	ret := _m.ctrl.Call(_m, "ClientForVMIIfExists", vmi)
	ret0, _ := ret[0].(LauncherClient)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

func (_mr *_MockReadOnlyVMIClientFactoryRecorder) ClientForVMIIfExists(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClientForVMIIfExists", arg0)
}
