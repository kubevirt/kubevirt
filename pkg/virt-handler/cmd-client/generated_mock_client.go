// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -package=cmdclient -destination=generated_mock_client.go
//

// Package cmdclient is a generated GoMock package.
package cmdclient

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "kubevirt.io/api/core/v1"

	v10 "kubevirt.io/kubevirt/pkg/handler-launcher-com/cmd/v1"
	api "kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/api"
	stats "kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/stats"
)

// MockLauncherClient is a mock of LauncherClient interface.
type MockLauncherClient struct {
	ctrl     *gomock.Controller
	recorder *MockLauncherClientMockRecorder
	isgomock struct{}
}

// MockLauncherClientMockRecorder is the mock recorder for MockLauncherClient.
type MockLauncherClientMockRecorder struct {
	mock *MockLauncherClient
}

// NewMockLauncherClient creates a new mock instance.
func NewMockLauncherClient(ctrl *gomock.Controller) *MockLauncherClient {
	mock := &MockLauncherClient{ctrl: ctrl}
	mock.recorder = &MockLauncherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLauncherClient) EXPECT() *MockLauncherClientMockRecorder {
	return m.recorder
}

// CancelVirtualMachineMigration mocks base method.
func (m *MockLauncherClient) CancelVirtualMachineMigration(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelVirtualMachineMigration", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelVirtualMachineMigration indicates an expected call of CancelVirtualMachineMigration.
func (mr *MockLauncherClientMockRecorder) CancelVirtualMachineMigration(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelVirtualMachineMigration", reflect.TypeOf((*MockLauncherClient)(nil).CancelVirtualMachineMigration), vmi)
}

// Close mocks base method.
func (m *MockLauncherClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockLauncherClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLauncherClient)(nil).Close))
}

// DeleteDomain mocks base method.
func (m *MockLauncherClient) DeleteDomain(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDomain", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDomain indicates an expected call of DeleteDomain.
func (mr *MockLauncherClientMockRecorder) DeleteDomain(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDomain", reflect.TypeOf((*MockLauncherClient)(nil).DeleteDomain), vmi)
}

// Exec mocks base method.
func (m *MockLauncherClient) Exec(arg0, arg1 string, arg2 []string, arg3 int32) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Exec indicates an expected call of Exec.
func (mr *MockLauncherClientMockRecorder) Exec(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockLauncherClient)(nil).Exec), arg0, arg1, arg2, arg3)
}

// FinalizeVirtualMachineMigration mocks base method.
func (m *MockLauncherClient) FinalizeVirtualMachineMigration(vmi *v1.VirtualMachineInstance, options *v10.VirtualMachineOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeVirtualMachineMigration", vmi, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeVirtualMachineMigration indicates an expected call of FinalizeVirtualMachineMigration.
func (mr *MockLauncherClientMockRecorder) FinalizeVirtualMachineMigration(vmi, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeVirtualMachineMigration", reflect.TypeOf((*MockLauncherClient)(nil).FinalizeVirtualMachineMigration), vmi, options)
}

// FreezeVirtualMachine mocks base method.
func (m *MockLauncherClient) FreezeVirtualMachine(vmi *v1.VirtualMachineInstance, unfreezeTimeoutSeconds int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeVirtualMachine", vmi, unfreezeTimeoutSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreezeVirtualMachine indicates an expected call of FreezeVirtualMachine.
func (mr *MockLauncherClientMockRecorder) FreezeVirtualMachine(vmi, unfreezeTimeoutSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).FreezeVirtualMachine), vmi, unfreezeTimeoutSeconds)
}

// GetDomain mocks base method.
func (m *MockLauncherClient) GetDomain() (*api.Domain, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain")
	ret0, _ := ret[0].(*api.Domain)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockLauncherClientMockRecorder) GetDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockLauncherClient)(nil).GetDomain))
}

// GetDomainDirtyRateStats mocks base method.
func (m *MockLauncherClient) GetDomainDirtyRateStats() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainDirtyRateStats")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainDirtyRateStats indicates an expected call of GetDomainDirtyRateStats.
func (mr *MockLauncherClientMockRecorder) GetDomainDirtyRateStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainDirtyRateStats", reflect.TypeOf((*MockLauncherClient)(nil).GetDomainDirtyRateStats))
}

// GetDomainStats mocks base method.
func (m *MockLauncherClient) GetDomainStats() (*stats.DomainStats, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainStats")
	ret0, _ := ret[0].(*stats.DomainStats)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDomainStats indicates an expected call of GetDomainStats.
func (mr *MockLauncherClientMockRecorder) GetDomainStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainStats", reflect.TypeOf((*MockLauncherClient)(nil).GetDomainStats))
}

// GetFilesystems mocks base method.
func (m *MockLauncherClient) GetFilesystems() (v1.VirtualMachineInstanceFileSystemList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesystems")
	ret0, _ := ret[0].(v1.VirtualMachineInstanceFileSystemList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesystems indicates an expected call of GetFilesystems.
func (mr *MockLauncherClientMockRecorder) GetFilesystems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesystems", reflect.TypeOf((*MockLauncherClient)(nil).GetFilesystems))
}

// GetGuestInfo mocks base method.
func (m *MockLauncherClient) GetGuestInfo() (*v1.VirtualMachineInstanceGuestAgentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestInfo")
	ret0, _ := ret[0].(*v1.VirtualMachineInstanceGuestAgentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestInfo indicates an expected call of GetGuestInfo.
func (mr *MockLauncherClientMockRecorder) GetGuestInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestInfo", reflect.TypeOf((*MockLauncherClient)(nil).GetGuestInfo))
}

// GetLaunchMeasurement mocks base method.
func (m *MockLauncherClient) GetLaunchMeasurement(arg0 *v1.VirtualMachineInstance) (*v1.SEVMeasurementInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaunchMeasurement", arg0)
	ret0, _ := ret[0].(*v1.SEVMeasurementInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLaunchMeasurement indicates an expected call of GetLaunchMeasurement.
func (mr *MockLauncherClientMockRecorder) GetLaunchMeasurement(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaunchMeasurement", reflect.TypeOf((*MockLauncherClient)(nil).GetLaunchMeasurement), arg0)
}

// GetQemuVersion mocks base method.
func (m *MockLauncherClient) GetQemuVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQemuVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQemuVersion indicates an expected call of GetQemuVersion.
func (mr *MockLauncherClientMockRecorder) GetQemuVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQemuVersion", reflect.TypeOf((*MockLauncherClient)(nil).GetQemuVersion))
}

// GetSEVInfo mocks base method.
func (m *MockLauncherClient) GetSEVInfo() (*v1.SEVPlatformInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSEVInfo")
	ret0, _ := ret[0].(*v1.SEVPlatformInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSEVInfo indicates an expected call of GetSEVInfo.
func (mr *MockLauncherClientMockRecorder) GetSEVInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSEVInfo", reflect.TypeOf((*MockLauncherClient)(nil).GetSEVInfo))
}

// GetScreenshot mocks base method.
func (m *MockLauncherClient) GetScreenshot(arg0 *v1.VirtualMachineInstance) (*v10.ScreenshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScreenshot", arg0)
	ret0, _ := ret[0].(*v10.ScreenshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScreenshot indicates an expected call of GetScreenshot.
func (mr *MockLauncherClientMockRecorder) GetScreenshot(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScreenshot", reflect.TypeOf((*MockLauncherClient)(nil).GetScreenshot), arg0)
}

// GetUsers mocks base method.
func (m *MockLauncherClient) GetUsers() (v1.VirtualMachineInstanceGuestOSUserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].(v1.VirtualMachineInstanceGuestOSUserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockLauncherClientMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockLauncherClient)(nil).GetUsers))
}

// GuestPing mocks base method.
func (m *MockLauncherClient) GuestPing(arg0 string, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuestPing", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuestPing indicates an expected call of GuestPing.
func (mr *MockLauncherClientMockRecorder) GuestPing(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuestPing", reflect.TypeOf((*MockLauncherClient)(nil).GuestPing), arg0, arg1)
}

// HotplugHostDevices mocks base method.
func (m *MockLauncherClient) HotplugHostDevices(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HotplugHostDevices", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// HotplugHostDevices indicates an expected call of HotplugHostDevices.
func (mr *MockLauncherClientMockRecorder) HotplugHostDevices(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotplugHostDevices", reflect.TypeOf((*MockLauncherClient)(nil).HotplugHostDevices), vmi)
}

// InjectLaunchSecret mocks base method.
func (m *MockLauncherClient) InjectLaunchSecret(arg0 *v1.VirtualMachineInstance, arg1 *v1.SEVSecretOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectLaunchSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InjectLaunchSecret indicates an expected call of InjectLaunchSecret.
func (mr *MockLauncherClientMockRecorder) InjectLaunchSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectLaunchSecret", reflect.TypeOf((*MockLauncherClient)(nil).InjectLaunchSecret), arg0, arg1)
}

// KillVirtualMachine mocks base method.
func (m *MockLauncherClient) KillVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillVirtualMachine indicates an expected call of KillVirtualMachine.
func (mr *MockLauncherClientMockRecorder) KillVirtualMachine(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).KillVirtualMachine), vmi)
}

// MigrateVirtualMachine mocks base method.
func (m *MockLauncherClient) MigrateVirtualMachine(vmi *v1.VirtualMachineInstance, options *MigrationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateVirtualMachine", vmi, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateVirtualMachine indicates an expected call of MigrateVirtualMachine.
func (mr *MockLauncherClientMockRecorder) MigrateVirtualMachine(vmi, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).MigrateVirtualMachine), vmi, options)
}

// PauseVirtualMachine mocks base method.
func (m *MockLauncherClient) PauseVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseVirtualMachine indicates an expected call of PauseVirtualMachine.
func (mr *MockLauncherClientMockRecorder) PauseVirtualMachine(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).PauseVirtualMachine), vmi)
}

// Ping mocks base method.
func (m *MockLauncherClient) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockLauncherClientMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockLauncherClient)(nil).Ping))
}

// ResetVirtualMachine mocks base method.
func (m *MockLauncherClient) ResetVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetVirtualMachine indicates an expected call of ResetVirtualMachine.
func (mr *MockLauncherClientMockRecorder) ResetVirtualMachine(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).ResetVirtualMachine), vmi)
}

// ShutdownVirtualMachine mocks base method.
func (m *MockLauncherClient) ShutdownVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownVirtualMachine indicates an expected call of ShutdownVirtualMachine.
func (mr *MockLauncherClientMockRecorder) ShutdownVirtualMachine(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).ShutdownVirtualMachine), vmi)
}

// SignalTargetPodCleanup mocks base method.
func (m *MockLauncherClient) SignalTargetPodCleanup(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalTargetPodCleanup", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignalTargetPodCleanup indicates an expected call of SignalTargetPodCleanup.
func (mr *MockLauncherClientMockRecorder) SignalTargetPodCleanup(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalTargetPodCleanup", reflect.TypeOf((*MockLauncherClient)(nil).SignalTargetPodCleanup), vmi)
}

// SoftRebootVirtualMachine mocks base method.
func (m *MockLauncherClient) SoftRebootVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftRebootVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftRebootVirtualMachine indicates an expected call of SoftRebootVirtualMachine.
func (mr *MockLauncherClientMockRecorder) SoftRebootVirtualMachine(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftRebootVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).SoftRebootVirtualMachine), vmi)
}

// SyncMigrationTarget mocks base method.
func (m *MockLauncherClient) SyncMigrationTarget(vmi *v1.VirtualMachineInstance, options *v10.VirtualMachineOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncMigrationTarget", vmi, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncMigrationTarget indicates an expected call of SyncMigrationTarget.
func (mr *MockLauncherClientMockRecorder) SyncMigrationTarget(vmi, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncMigrationTarget", reflect.TypeOf((*MockLauncherClient)(nil).SyncMigrationTarget), vmi, options)
}

// SyncVirtualMachine mocks base method.
func (m *MockLauncherClient) SyncVirtualMachine(vmi *v1.VirtualMachineInstance, options *v10.VirtualMachineOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncVirtualMachine", vmi, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncVirtualMachine indicates an expected call of SyncVirtualMachine.
func (mr *MockLauncherClientMockRecorder) SyncVirtualMachine(vmi, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).SyncVirtualMachine), vmi, options)
}

// SyncVirtualMachineCPUs mocks base method.
func (m *MockLauncherClient) SyncVirtualMachineCPUs(vmi *v1.VirtualMachineInstance, options *v10.VirtualMachineOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncVirtualMachineCPUs", vmi, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncVirtualMachineCPUs indicates an expected call of SyncVirtualMachineCPUs.
func (mr *MockLauncherClientMockRecorder) SyncVirtualMachineCPUs(vmi, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncVirtualMachineCPUs", reflect.TypeOf((*MockLauncherClient)(nil).SyncVirtualMachineCPUs), vmi, options)
}

// SyncVirtualMachineMemory mocks base method.
func (m *MockLauncherClient) SyncVirtualMachineMemory(vmi *v1.VirtualMachineInstance, options *v10.VirtualMachineOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncVirtualMachineMemory", vmi, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncVirtualMachineMemory indicates an expected call of SyncVirtualMachineMemory.
func (mr *MockLauncherClientMockRecorder) SyncVirtualMachineMemory(vmi, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncVirtualMachineMemory", reflect.TypeOf((*MockLauncherClient)(nil).SyncVirtualMachineMemory), vmi, options)
}

// UnfreezeVirtualMachine mocks base method.
func (m *MockLauncherClient) UnfreezeVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfreezeVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfreezeVirtualMachine indicates an expected call of UnfreezeVirtualMachine.
func (mr *MockLauncherClientMockRecorder) UnfreezeVirtualMachine(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfreezeVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).UnfreezeVirtualMachine), vmi)
}

// UnpauseVirtualMachine mocks base method.
func (m *MockLauncherClient) UnpauseVirtualMachine(vmi *v1.VirtualMachineInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpauseVirtualMachine", vmi)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnpauseVirtualMachine indicates an expected call of UnpauseVirtualMachine.
func (mr *MockLauncherClientMockRecorder) UnpauseVirtualMachine(vmi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpauseVirtualMachine", reflect.TypeOf((*MockLauncherClient)(nil).UnpauseVirtualMachine), vmi)
}

// VirtualMachineMemoryDump mocks base method.
func (m *MockLauncherClient) VirtualMachineMemoryDump(vmi *v1.VirtualMachineInstance, dumpPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VirtualMachineMemoryDump", vmi, dumpPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// VirtualMachineMemoryDump indicates an expected call of VirtualMachineMemoryDump.
func (mr *MockLauncherClientMockRecorder) VirtualMachineMemoryDump(vmi, dumpPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VirtualMachineMemoryDump", reflect.TypeOf((*MockLauncherClient)(nil).VirtualMachineMemoryDump), vmi, dumpPath)
}
