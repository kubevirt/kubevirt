// Automatically generated by MockGen. DO NOT EDIT!
// Source: multipath_monitor.go

package multipath_monitor

import (
	exec "os/exec"

	gomock "github.com/golang/mock/gomock"

	safepath "kubevirt.io/kubevirt/pkg/safepath"
)

// Mock of mounter interface
type Mockmounter struct {
	ctrl     *gomock.Controller
	recorder *_MockmounterRecorder
}

// Recorder for Mockmounter (not exported)
type _MockmounterRecorder struct {
	mock *Mockmounter
}

func NewMockmounter(ctrl *gomock.Controller) *Mockmounter {
	mock := &Mockmounter{ctrl: ctrl}
	mock.recorder = &_MockmounterRecorder{mock}
	return mock
}

func (_m *Mockmounter) EXPECT() *_MockmounterRecorder {
	return _m.recorder
}

func (_m *Mockmounter) Mount(sourcePath *safepath.Path, targetPath *safepath.Path, ro bool) *exec.Cmd {
	ret := _m.ctrl.Call(_m, "Mount", sourcePath, targetPath, ro)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

func (_mr *_MockmounterRecorder) Mount(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Mount", arg0, arg1, arg2)
}

func (_m *Mockmounter) Umount(path *safepath.Path) *exec.Cmd {
	ret := _m.ctrl.Call(_m, "Umount", path)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

func (_mr *_MockmounterRecorder) Umount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Umount", arg0)
}

func (_m *Mockmounter) IsMounted(mountPoint *safepath.Path) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsMounted", mountPoint)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmounterRecorder) IsMounted(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsMounted", arg0)
}
