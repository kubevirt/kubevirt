// Automatically generated by MockGen. DO NOT EDIT!
// Source: manager.go

package hooks

import (
	time "time"

	gomock "github.com/golang/mock/gomock"
	v1 "kubevirt.io/api/core/v1"

	cloud_init "kubevirt.io/kubevirt/pkg/cloud-init"
	api "kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/api"
)

// Mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *_MockManagerRecorder
}

// Recorder for MockManager (not exported)
type _MockManagerRecorder struct {
	mock *MockManager
}

func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &_MockManagerRecorder{mock}
	return mock
}

func (_m *MockManager) EXPECT() *_MockManagerRecorder {
	return _m.recorder
}

func (_m *MockManager) Collect(_param0 uint, _param1 time.Duration) error {
	ret := _m.ctrl.Call(_m, "Collect", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Collect(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Collect", arg0, arg1)
}

func (_m *MockManager) OnDefineDomain(_param0 *api.DomainSpec, _param1 *v1.VirtualMachineInstance) (string, error) {
	ret := _m.ctrl.Call(_m, "OnDefineDomain", _param0, _param1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) OnDefineDomain(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnDefineDomain", arg0, arg1)
}

func (_m *MockManager) PreCloudInitIso(_param0 *v1.VirtualMachineInstance, _param1 *cloud_init.CloudInitData) (*cloud_init.CloudInitData, error) {
	ret := _m.ctrl.Call(_m, "PreCloudInitIso", _param0, _param1)
	ret0, _ := ret[0].(*cloud_init.CloudInitData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockManagerRecorder) PreCloudInitIso(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PreCloudInitIso", arg0, arg1)
}

func (_m *MockManager) Shutdown() error {
	ret := _m.ctrl.Call(_m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManagerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}
