// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api_info.proto

/*
Package kubevirt_hooks_info is a generated protocol buffer package.

It is generated from these files:
	api_info.proto

It has these top-level messages:
	InfoParams
	InfoResult
	HookPoint
*/
package kubevirt_hooks_info

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfoParams struct {
}

func (m *InfoParams) Reset()                    { *m = InfoParams{} }
func (m *InfoParams) String() string            { return proto.CompactTextString(m) }
func (*InfoParams) ProtoMessage()               {}
func (*InfoParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InfoResult struct {
	// name of the hook used by virt-launcher to compare it with requested hooks
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// hookPoints is a list of subscribed hook points
	HookPoints []*HookPoint `protobuf:"bytes,3,rep,name=hookPoints" json:"hookPoints,omitempty"`
	// versions is a list of implemented hook Callbacks service versions
	Versions []string `protobuf:"bytes,4,rep,name=versions" json:"versions,omitempty"`
}

func (m *InfoResult) Reset()                    { *m = InfoResult{} }
func (m *InfoResult) String() string            { return proto.CompactTextString(m) }
func (*InfoResult) ProtoMessage()               {}
func (*InfoResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfoResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InfoResult) GetHookPoints() []*HookPoint {
	if m != nil {
		return m.HookPoints
	}
	return nil
}

func (m *InfoResult) GetVersions() []string {
	if m != nil {
		return m.Versions
	}
	return nil
}

type HookPoint struct {
	// name represents name of the subscribed hook point
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// priority is used to sort hooks prior to their execution (second key is the name)
	Priority int32 `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
}

func (m *HookPoint) Reset()                    { *m = HookPoint{} }
func (m *HookPoint) String() string            { return proto.CompactTextString(m) }
func (*HookPoint) ProtoMessage()               {}
func (*HookPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HookPoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HookPoint) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func init() {
	proto.RegisterType((*InfoParams)(nil), "kubevirt.hooks.info.InfoParams")
	proto.RegisterType((*InfoResult)(nil), "kubevirt.hooks.info.InfoResult")
	proto.RegisterType((*HookPoint)(nil), "kubevirt.hooks.info.HookPoint")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Info service

type InfoClient interface {
	Info(ctx context.Context, in *InfoParams, opts ...grpc.CallOption) (*InfoResult, error)
}

type infoClient struct {
	cc *grpc.ClientConn
}

func NewInfoClient(cc *grpc.ClientConn) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) Info(ctx context.Context, in *InfoParams, opts ...grpc.CallOption) (*InfoResult, error) {
	out := new(InfoResult)
	err := grpc.Invoke(ctx, "/kubevirt.hooks.info.Info/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Info service

type InfoServer interface {
	Info(context.Context, *InfoParams) (*InfoResult, error)
}

func RegisterInfoServer(s *grpc.Server, srv InfoServer) {
	s.RegisterService(&_Info_serviceDesc, srv)
}

func _Info_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubevirt.hooks.info.Info/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).Info(ctx, req.(*InfoParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Info_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kubevirt.hooks.info.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Info_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_info.proto",
}

func init() { proto.RegisterFile("api_info.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2c, 0xc8, 0x8c,
	0xcf, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xce, 0x2e, 0x4d, 0x4a,
	0x2d, 0xcb, 0x2c, 0x2a, 0xd1, 0xcb, 0xc8, 0xcf, 0xcf, 0x2e, 0xd6, 0x03, 0x49, 0x29, 0xf1, 0x70,
	0x71, 0x79, 0xe6, 0xa5, 0xe5, 0x07, 0x24, 0x16, 0x25, 0xe6, 0x16, 0x2b, 0xd5, 0x40, 0x78, 0x41,
	0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x1d, 0x17, 0x17, 0x48, 0x77, 0x40, 0x7e, 0x66, 0x5e,
	0x49, 0xb1, 0x04, 0xb3, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x9c, 0x1e, 0x16, 0x93, 0xf5, 0x3c, 0x60,
	0xca, 0x82, 0x90, 0x74, 0x08, 0x49, 0x71, 0x71, 0x94, 0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7, 0x15,
	0x4b, 0xb0, 0x28, 0x30, 0x6b, 0x70, 0x06, 0xc1, 0xf9, 0x4a, 0xd6, 0x5c, 0x9c, 0x70, 0x4d, 0x58,
	0x2d, 0x97, 0xe2, 0xe2, 0x28, 0x28, 0xca, 0xcc, 0x2f, 0xca, 0x2c, 0xa9, 0x94, 0x60, 0x52, 0x60,
	0xd4, 0x60, 0x0d, 0x82, 0xf3, 0x8d, 0x02, 0xb8, 0x58, 0x40, 0x4e, 0x17, 0xf2, 0x80, 0xd2, 0xf2,
	0x58, 0x1d, 0x85, 0xf0, 0xab, 0x14, 0x6e, 0x05, 0x10, 0xef, 0x27, 0xb1, 0x81, 0x83, 0xcd, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x38, 0x98, 0xcf, 0x48, 0x01, 0x00, 0x00,
}
